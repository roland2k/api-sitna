/*! dustjs-i18n - v0.0.2 - 2015-03-31
* https://bitbucket.org/manolakis/dustjs-i18n
* Copyright (c) 2015 Manuel Martin; Licensed MIT */
!function (a, b) { "function" == typeof define && define.amd ? define(["dustjs-linkedin"], function (c) { return b(c, a) }) : "object" == typeof module && module.exports ? module.exports = b(require("dustjs-linkedin"), this) : a.dust = b(a.dust, a) }(this, function (a, b, c) { "use strict"; var d = Object.prototype.toString, e = typeof console !== c ? console : { log: function () { } }, f = { isArray: Array.isArray || function (a) { return "[object Array]" === d.call(a) }, isAvailable: function (a) { return h[a] !== c }, log: e.log }, g = { selected: c, languages: {}, filters: {} }, h = g.languages; return typeof String.prototype.trim === c && (String.prototype.trim = function () { return this.replace(/^\s+|\s+$/g, "") }), a.i18n = { resetContext: function () { g.selected = c, Object.keys(h).forEach(function (a) { delete h[a] }) }, setLanguage: function (a) { if (!f.isAvailable(a)) throw new Error("language '" + a + "' not available!"); g.selected = a }, setLanguages: function (a) { f.isArray(a) && a.forEach(function (a) { f.isAvailable(a) || (h[a] = {}), g.selected === c && (g.selected = a) }) }, add: function (a, b) { if (f.isAvailable(a)) { var c = h[a]; Object.keys(b).forEach(function (a) { c[a] = b[a] }) } }, addFilter: function (a, b) { a in g.filters || (g.filters[a] = b) } }, a.helpers.i18n = function (b, d, e, i) { if (i && i.$key !== c) { var j, k, l, m, n, o = g.selected, p = h[o], q = /\{(\s*[\w]+\s*)\}/g; m = a.helpers.tap(i.$key, b, d).split("|"); var r = a.helpers.tap(m.shift(), b, d); for (n = p !== c && p[r] !== c ? p[r] : null; null !== (j = q.exec(n)) ;) l = j[1].trim(), "$key" === l ? (k = "", f.log("$key can't be used as a parameter")) : k = a.helpers.tap(i[j[1].trim()], b, d), n = n.replace(j[0], k); m.forEach(function (a) { a in g.filters && (n = g.filters[a](n)) }), b.write(n) } else f.log("No key given in the i18n helper"); return b }, a });