!function(e,t){"function"==typeof define&&define.amd?define(["../../lib/cesium/build/cesium-sitna"],t):"object"==typeof exports?module.exports=t(require("../../lib/cesium/build/cesium-sitna")):e.cesium=t(e.cesium)}(this,function(e){window.CESIUM_BASE_URL=TC.apiLocation+"lib/cesium/build/";const t="Too many parallel requests, so postpone loading tile";e.WCSTerrainProvider||TC.syncLoadJS(TC.apiLocation+"TC/cesium/mergeTerrainProvider/MergeTerrainProvider");e.Resource.prototype._clone=e.Resource.prototype.clone;e.Resource.prototype.clone=function(){let t=e.Resource.prototype._clone.apply(this,arguments);t.tcLayer=this.tcLayer;return t};e.ImageryLayer.prototype.__requestImagery=e.ImageryLayer.prototype._requestImagery;e.ImageryLayer.prototype._requestImagery=function(r){var o=this._imageryProvider,i=this;function s(t){if(!e.defined(t))return a();r.image=t;r.state=e.ImageryState.RECEIVED;r.request=void 0;e.TileProviderError.handleSuccess(i._requestImageError)}function a(s){if("string"!=typeof s||s!==t)if(s.status&&"200"===s.status.toString()){r.state=e.ImageryState.FAILED;r.request=void 0}else if(r.request.state!==e.RequestState.CANCELLED){r.state=e.ImageryState.FAILED;r.request=void 0;var a="Failed to obtain image tile X: "+r.x+" Y: "+r.y+" Level: "+r.level+".";i._requestImageError=e.TileProviderError.handleError(i._requestImageError,o,o.errorEvent,a,r.x,r.y,r.level,u,s)}else{r.state=e.ImageryState.UNLOADED;r.request=void 0}else{r.state=e.ImageryState.UNLOADED;r.request=void 0}}function u(){var t=new e.Request({throttle:!1,throttleByServer:!0,type:e.RequestType.IMAGERY});r.request=t;r.state=e.ImageryState.TRANSITIONING;var i=o.requestImage(r.x,r.y,r.level,t);if(e.defined(i)){e.defined(o.getTileCredits)&&(r.credits=o.getTileCredits(r.x,r.y,r.level));e.when(i,s,a)}else{r.state=e.ImageryState.UNLOADED;r.request=void 0}}u()};e.Resource.prototype._fetchImage=e.Resource.prototype.fetchImage;e.Resource.prototype.fetchImage=function(){if(this.tcLayer){let r=this,o=arguments,i=e.when.defer();this.tcLayer.getWebGLUrl.call(this.tcLayer,this.url).then(function(s){r.url=s;let a=e.Resource.prototype._fetchImage.apply(r,o);a?a.then(i.resolve):i.reject(t)}).catch(function(e){i.reject(e)});return i.promise}return e.Resource.prototype._fetchImage.apply(this,arguments)};return e});
//# sourceMappingURL=../maps/cesium/cesium.min.js.map