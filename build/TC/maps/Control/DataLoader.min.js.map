{"version":3,"sources":["control/DataLoader.js"],"names":["TC","control","TabContainer","syncLoadJS","apiLocation","DataLoader","apply","this","arguments","controlOptions","title","externalWMS","suggestions","options","wmsSuggestions","fileImport","enableDragAndDrop","defaultSelection","inherit","prototype","register","map","self","getLocaleString","Promise","resolve","reject","call","then","ctl","div","classList","add","CLASS"],"mappings":"AAyFAA,GAAGC,QAAUD,GAAGC,SAAW,GAEtBD,GAAGC,QAAQC,cACZF,GAAGG,WAAWH,GAAGI,YAAc,2BAGnCJ,GAAGC,QAAQI,WAAa,WAGpBL,GAAGC,QAAQC,aAAaI,MAFXC,KAEuBC,WAFvBD,KAIRE,eAAiB,CAClB,CACIC,MAAO,SACPC,YAAa,CAAEC,YAPVL,KAO4BM,QAAQC,iBAE7C,CACIC,WAAY,CACRC,kBAXCT,KAWuBM,QAAQG,qBAX/BT,KAeRU,iBAAmB,GAG5BjB,GAAGkB,QAAQlB,GAAGC,QAAQI,WAAYL,GAAGC,QAAQC,cAGxBF,GAAGC,QAAQI,WAAWc,UAE9BC,SAAW,SAAUC,GAC1B,MAAMC,EAAOf,KACbe,EAAKD,IAAMA,EACXC,EAAKZ,MAAQY,EAAKC,gBAAgB,WAClC,OAAO,IAAIC,QAAQ,SAAUC,EAASC,GAClC1B,GAAGC,QAAQC,aAAaiB,UAAUC,SAASO,KAAKL,EAAMD,GAAKO,KAAKC,IAC5DA,EAAIC,IAAIC,UAAUC,IAAIV,EAAKW,MAAQ,WACnCR,EAAQI","sourcesContent":["\r\n/**\r\n  * Opciones de control para añadir datos geográficos.\r\n  * \r\n  * En el control se pueden añadir WMS escribiendo la dirección del servicio o eligiendo un servicio de la lista de sugerencias de servicios de interés.\r\n  *\r\n  * También se pueden añadir datos de archivos buscándolos en el cuadro de diálogo que se abre tras pulsar _Abrir archivo_ o arrastrándolos y soltándolos dentro del área del mapa.\r\n  * @typedef DataLoaderOptions\r\n  * @extends ControlOptions\r\n  * @see MapControlOptions\r\n  * @property {HTMLElement|string} [div] - Elemento del DOM en el que crear el control o valor de atributo id de dicho elemento.\r\n  * @property {boolean} [enableDragAndDrop] - Propiedad que establece si está permitido arrastrar y soltar archivos al área del mapa, además de abrirlos de la manera convencional abriendo el cuadro de diálogo de búsqueda de archivos.\r\n  * @property {WMSGroupOptions[]} [wmsSuggestions] - Lista de grupos de sugerencias de servicios WMS ofrecidos por el control. Por ejemplo se puede establecer un grupo de servicios WMS estatales y otro de servicios WMS mundiales.\r\n  * @example <caption>[Ver en vivo](../examples/cfg.DataLoaderOptions.html)</caption> {@lang html} \r\n  * <div id=\"mapa\"></div>\r\n  * <script>\r\n  *     // Establecemos un layout simplificado apto para hacer demostraciones de controles.\r\n  *     SITNA.Cfg.layout = \"layout/ctl-container\";\r\n  *     // Activamos el proxy para poder acceder a servicios de otro dominio.\r\n  *     SITNA.Cfg.proxy = \"proxy/proxy.ashx?\";\r\n  *     // Añadimos el control de tabla de contenidos en el primer contenedor.\r\n  *     SITNA.Cfg.controls.TOC = {\r\n  *         div: \"slot1\"\r\n  *     };\r\n  *     // Añadimos el control de datos externos en el segundo contenedor.\r\n  *     SITNA.Cfg.controls.dataLoader = {\r\n  *         div: \"slot2\",\r\n  *         enableDragAndDrop: true,\r\n  *         wmsSuggestions: [\r\n  *             {\r\n  *                 group: \"Estatales\",\r\n  *                 items: [\r\n  *                     {\r\n  *                         name: \"Mapa Base (IGN)\",\r\n  *                         url: \"https://www.ign.es/wms-inspire/ign-base\"\r\n  *                     },\r\n  *                     {\r\n  *                         name: \"Unidades Administrativas (IGN)\",\r\n  *                         url: \"https://www.ign.es/wms-inspire/unidades-administrativas\"\r\n  *                     },\r\n  *                     {\r\n  *                         name: \"Cartografía Topográfica (IGN)\",\r\n  *                         url: \"https://www.ign.es/wms-inspire/mapa-raster\"\r\n  *                     },\r\n  *                     {\r\n  *                         name: \"Ortofotos PNOA Máxima Actualidad (IGN)\",\r\n  *                         url: \"https://www.ign.es/wms-inspire/pnoa-ma\"\r\n  *                     }\r\n  *                 ]\r\n  *             },\r\n  *             {\r\n  *                 group: \"Comunidades limítrofes\",\r\n  *                 items: [\r\n  *                     {\r\n  *                         name: \"Aragón\",\r\n  *                         url: \"http://idearagon.aragon.es/Visor2D\"\r\n  *                     },\r\n  *                     {\r\n  *                         name: \"La Rioja\",\r\n  *                         url: \"https://ogc.larioja.org/wms/request.php\"\r\n  *                     },\r\n  *                     {\r\n  *                         name: \"País Vasco\",\r\n  *                         url: \"http://www.geo.euskadi.eus/WMS_KARTOGRAFIA\"\r\n  *                     }\r\n  *                 ]\r\n  *             }\r\n  *         ]\r\n  *     };\r\n  *     var map = new SITNA.Map(\"mapa\");\r\n  * </script>\r\n  */\r\n\r\n/**\r\n  * Opciones de sugerencia de servicio externo WMS.\r\n  * @typedef WMSOptions\r\n  * @see WMSGroupOptions\r\n  * @property {string} name - Nombre del servicio WMS. Se mostrará como un elemento en la lista de opciones del control.\r\n  * @property {string} url - URL de acceso al servicio WMS.\r\n  */\r\n\r\n/**\r\n  * Opciones de grupo de sugerencias de servicios externos WMS.\r\n  * @typedef WMSGroupOptions\r\n  * @see DataLoaderOptions\r\n  * @property {string} group - Nombre del grupo de sugerencias. Se mostrará como una sección en la lista de opciones del control.\r\n  * @property {WMSOptions[]} items - Lista de sugerencias de servicios externos WMS.\r\n  */\r\n\r\nTC.control = TC.control || {};\r\n\r\nif (!TC.control.TabContainer) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/TabContainer');\r\n}\r\n\r\nTC.control.DataLoader = function () {\r\n    const self = this;\r\n\r\n    TC.control.TabContainer.apply(self, arguments);\r\n\r\n    self.controlOptions = [\r\n        {\r\n            title: 'addWMS',\r\n            externalWMS: { suggestions: self.options.wmsSuggestions }            \r\n        },\r\n        {\r\n            fileImport: {\r\n                enableDragAndDrop: self.options.enableDragAndDrop\r\n            }\r\n        }\r\n    ];\r\n    self.defaultSelection = 0;\r\n};\r\n\r\nTC.inherit(TC.control.DataLoader, TC.control.TabContainer);\r\n\r\n(function () {\r\n    const ctlProto = TC.control.DataLoader.prototype;\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        self.map = map;\r\n        self.title = self.getLocaleString('addMaps');\r\n        return new Promise(function (resolve, reject) {\r\n            TC.control.TabContainer.prototype.register.call(self, map).then(ctl => {\r\n                ctl.div.classList.add(self.CLASS + '-datldr');\r\n                resolve(ctl);\r\n            });\r\n        })\r\n    };\r\n\r\n})();\r\n"]}