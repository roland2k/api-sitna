{"version":3,"sources":["control/SWCacheClient.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","SWCacheClient","apply","this","arguments","serviceWorkerEnabled","serviceWorkerIsRequired","options","inherit","ctlProto","prototype","CLASS","SW_URL","register","map","self","result","call","_swPromise","Promise","resolve","reject","navigator","serviceWorker","scope","then","reg","installing","waiting","active","console","log","reason","Error","error","catch","unsafeProtocol","isFrame","window","parent","location","protocol","e","toast","getLocaleString","url","href","replace","type","Consts","msgType","WARNING","getServiceWorker","addMessageEventListener","cacheName","action","eventName","addEventListener","messageHandler","event","data","name","removeEventListener","createCache","sw","opts","postMessage","list","urlList","silent","deleteCache"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\n(function () {\r\n\r\n    TC.control.SWCacheClient = function () {\r\n        const self = this;\r\n        TC.Control.apply(this, arguments);\r\n        self.serviceWorkerEnabled = false;\r\n        self.serviceWorkerIsRequired = self.options.serviceWorkerIsRequired || true;\r\n    };\r\n\r\n    TC.inherit(TC.control.SWCacheClient, TC.Control);\r\n\r\n    var ctlProto = TC.control.SWCacheClient.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-swcc';\r\n    ctlProto.SW_URL = 'tc-cb-service-worker.js';\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n\r\n        // Si el navegador es compatible, aÃ±adimos el service worker.\r\n        self._swPromise = new Promise(function (resolve, reject) {\r\n            if (navigator.serviceWorker) {\r\n\r\n                navigator.serviceWorker.register(self.SW_URL, {\r\n                    scope: './'\r\n                }).then(\r\n                    function (reg) {\r\n                        self.serviceWorkerEnabled = true;\r\n                        if (reg.installing) {\r\n                            resolve(reg.installing);\r\n                        } else if (reg.waiting) {\r\n                            resolve(reg.waiting);\r\n                        } else if (reg.active) {\r\n                            resolve(reg.active);\r\n                        }\r\n                        console.log(reg.scope, 'register');\r\n                    },\r\n                    function (reason) {\r\n                        self.serviceWorkerEnabled = false;\r\n                        reject(new Error(reason));\r\n                        console.error('Could not register service worker: ' + reason);\r\n                    });\r\n            }\r\n            else {                \r\n                reject(new Error(\"Browser does not support service workers\"));\r\n            }\r\n        });\r\n\r\n        self._swPromise.catch(() => {\r\n            let unsafeProtocol = false;\r\n            const isFrame = window.parent !== window;\r\n            for (var scope = window; !unsafeProtocol; scope = scope.parent) {\r\n                try {\r\n                    if (scope.location.protocol !== 'https:') {\r\n                        unsafeProtocol = true;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                }\r\n                if (scope === scope.parent) {\r\n                    break;\r\n                }\r\n            }\r\n            if (unsafeProtocol) {\r\n                map.toast(self.getLocaleString('httpsRequired.warning', { url: location.href.replace(location.protocol, '') }), { type: TC.Consts.msgType.WARNING });\r\n            }\r\n            else if (isFrame) {\r\n                map.toast(self.getLocaleString('frameOrNotCompatible.warning'), { type: TC.Consts.msgType.WARNING });\r\n            }\r\n            else {\r\n                if (self.serviceWorkerIsRequired) {\r\n                    map.toast(self.getLocaleString('browserNotCompatible.warning'), { type: TC.Consts.msgType.WARNING });\r\n                }\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n\r\n    ctlProto.getServiceWorker = function () {\r\n        if (!this._swPromise) {\r\n            return Promise.reject(new Error('No service worker available'));\r\n        }\r\n        return this._swPromise;\r\n    };\r\n\r\n    var addMessageEventListener = function (resolve, reject, cacheName, action, eventName) {\r\n        var MESSAGE = 'message';\r\n        var messageHandler = function messageHandler(event) {\r\n            if (event.data.name === cacheName) {\r\n                if (event.data.action === action && event.data.event === eventName) {\r\n                    resolve(cacheName);\r\n                }\r\n                else if (event.data.event === 'error') {\r\n                    reject(Error(`Error message from service worker [${event.data.url} - ${event.data.action} - ${event.data.name}]`));\r\n                }\r\n                if (event.data.event !== 'progress') {\r\n                    navigator.serviceWorker.removeEventListener(MESSAGE, messageHandler);\r\n                }\r\n            }\r\n        };\r\n        navigator.serviceWorker.addEventListener(MESSAGE, messageHandler);\r\n    };\r\n\r\n    ctlProto.createCache = function (name, options) {\r\n        var self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            self.getServiceWorker().then(function (sw) {\r\n                var ACTION = 'create';\r\n                var opts = options || {};\r\n                addMessageEventListener(resolve, reject, name, ACTION, 'cached');\r\n                sw.postMessage({\r\n                    action: ACTION,\r\n                    name: name,\r\n                    list: opts.urlList || [],\r\n                    silent: opts.silent\r\n                });\r\n            }, function () {\r\n                resolve(false);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.deleteCache = function (name, options) {\r\n        var self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            self.getServiceWorker().then(function (sw) {\r\n                var ACTION = 'delete';\r\n                var opts = options || {};\r\n                addMessageEventListener(resolve, reject, name, ACTION, 'deleted');\r\n                sw.postMessage({\r\n                    action: ACTION,\r\n                    name: name,\r\n                    silent: opts.silent\r\n                });\r\n            }, function () {\r\n                resolve(false);\r\n            });\r\n        });\r\n    };\r\n\r\n})();\r\n"]}