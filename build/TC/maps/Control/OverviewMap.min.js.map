{"version":3,"sources":["control/OverviewMap.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","OverviewMap","apply","this","arguments","isLoaded","layer","inherit","ctlProto","prototype","CLASS","template","compiler","main","container","depth0","helpers","partials","data","useData","register","map","self","registerLayer","lyr","findLayerById","id","layers","result","i","length","lyrObj","options","availableBaseLayers","Util","isPlainObject","baseLayers","Raster","Layer","type","Consts","layerType","VECTOR","KML","WFS","Vector","instanceLayer","Promise","resolve","reject","call","then","ctl","wrap","loaded","defaultLayer","baseLayer","overviewMapLayer","e","resetOptions","getCapabilitiesPromise","isCompatible","crs","getCompatibleMatrixSets","getFallbackLayer","reset","resetOVMapProjection","on","event","PROJECTIONCHANGE","BASELAYERCHANGE","WMS","WMTS","newLayer","indexOf","bind","catch","err","callback","isFunction","MAPLOAD","activate","enable","deactivate","disable"],"mappings":"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","sourcesContent":["\r\n/**\r\n  * Opciones de control de mapa de situaci√≥n.\r\n  * @typedef OverviewMapOptions\r\n  * @extends ControlOptions\r\n  * @see MapControlOptions\r\n  * @property {HTMLElement|string} [div] - Elemento del DOM en el que crear el control o valor de atributo id de dicho elemento.\r\n  * @property {string|object} layer - Identificador de capa para usar como mapa de fondo u objeto de opciones de capa.\r\n  */\r\n\r\nTC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.OverviewMap = function () {\r\n    var self = this;\r\n\r\n    TC.Control.apply(self, arguments);\r\n\r\n    self.isLoaded = false;\r\n\r\n    self.layer = null;\r\n};\r\n\r\nTC.inherit(TC.control.OverviewMap, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.OverviewMap.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-ovmap';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/tc-ctl-ovmap.hbs\";\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        const instanceLayer = function (layer) {\r\n            var lyr;\r\n\r\n            var findLayerById = function (id, layers) {\r\n                var result = null;\r\n                for (var i = 0; i < layers.length; i++) {\r\n                    var lyr = layers[i];\r\n                    var l = lyr.id || lyr;\r\n                    if (l === id) {\r\n                        result = lyr;\r\n                        break;\r\n                    }\r\n                }\r\n                return result;\r\n            };\r\n\r\n            if (typeof layer === 'string') {\r\n                var lyrObj = findLayerById(layer, map.options.availableBaseLayers);\r\n                if (!TC.Util.isPlainObject(lyrObj)) {\r\n                    lyrObj = findLayerById(layer, map.options.baseLayers);\r\n                }\r\n                if (TC.Util.isPlainObject(lyrObj)) {\r\n                    lyr = new TC.layer.Raster(lyrObj);\r\n                }\r\n            }\r\n            else {\r\n                if (layer instanceof TC.Layer) {\r\n                    lyr = layer;\r\n                }\r\n                else if (layer.type === TC.Consts.layerType.VECTOR || layer.type === TC.Consts.layerType.KML || layer.type === TC.Consts.layerType.WFS) {\r\n                    lyr = new TC.layer.Vector(layer);\r\n                }\r\n                else {\r\n                    lyr = new TC.layer.Raster(layer);\r\n                }\r\n            }\r\n\r\n            return lyr;\r\n        };\r\n\r\n        const registerLayer = function (layer) {\r\n            var lyr;\r\n\r\n            lyr = instanceLayer(layer);\r\n\r\n            return lyr;\r\n        };\r\n\r\n        const resetOVMapProjection = function (e) {\r\n            const resetOptions = {};\r\n            self.layer.getCapabilitiesPromise().then(function () {\r\n                if (!self.layer.isCompatible(map.crs) && self.layer.wrap.getCompatibleMatrixSets(map.crs).length === 0) {\r\n                    resetOptions.layer = self.layer.getFallbackLayer();\r\n                }\r\n                self.wrap.reset(resetOptions);\r\n            });\r\n        };\r\n\r\n        const changeBaseLayer = function (e) {\r\n            const self = this;\r\n\r\n            if (self.map.baseLayer.type === TC.Consts.layerType.WMS || self.map.baseLayer.type === TC.Consts.layerType.WMTS || self.options.layer) {\r\n                var newLayer = self.map.baseLayer.overviewMapLayer || self.options.layer;\r\n                if (self.layer.id !== newLayer) {\r\n                    var overviewMapLayer = registerLayer(newLayer);\r\n                    self.wrap.reset({\r\n                        layer: overviewMapLayer\r\n                    }).then(function (layer) {\r\n                        self.layer = layer;\r\n                    });\r\n                } else if (TC.Consts.event.PROJECTIONCHANGE.indexOf(e.type) > -1) {\r\n                    self.wrap.reset({\r\n                        layer: self.layer\r\n                    }).then(function (layer) {\r\n                        self.layer = layer;\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        const result = new Promise(function (resolve, reject) {\r\n            TC.Control.prototype.register.call(self, map)\r\n                .then(function (ctl) {\r\n                    self.wrap = new TC.wrap.control.OverviewMap(self);\r\n                    map.loaded(function () {\r\n                        self.defaultLayer = registerLayer(self.options.layer);\r\n                        self.layer = registerLayer(map.baseLayer.overviewMapLayer || self.options.layer || map.options.baseLayers[0] || map.options.availableBaseLayers[0]);\r\n\r\n                        self.wrap.register(map);                        \r\n\r\n                        resetOVMapProjection({ crs: map.crs });\r\n\r\n                        map.on(TC.Consts.event.PROJECTIONCHANGE + ' ' + TC.Consts.event.BASELAYERCHANGE, changeBaseLayer.bind(self));\r\n                    });\r\n                    resolve(ctl);\r\n                })\r\n                .catch(function (err) {\r\n                    reject(err);\r\n                });\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.loaded = function (callback) {\r\n        var self = this;\r\n\r\n        if (TC.Util.isFunction(callback)) {\r\n            if (self.isLoaded && self.map && self.map.isLoaded) {\r\n                callback();\r\n            }\r\n            else {\r\n                self.on(TC.Consts.event.MAPLOAD, callback);\r\n            }\r\n        }\r\n    };\r\n\r\n    ctlProto.activate = function () {\r\n        this.enable();\r\n    };\r\n\r\n    ctlProto.deactivate = function () {\r\n        this.disable();\r\n    };\r\n\r\n    ctlProto.enable = function () {\r\n        var self = this;\r\n        TC.Control.prototype.enable.call(self);\r\n        self.wrap.enable();\r\n    };\r\n\r\n    ctlProto.disable = function () {\r\n        var self = this;\r\n        TC.Control.prototype.disable.call(self);\r\n        self.wrap.disable();\r\n    };\r\n\r\n})();"]}