{"version":3,"sources":["control/FullScreen.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","FullScreen","apply","this","arguments","inherit","ctlProto","prototype","CLASS","template","compiler","main","container","depth0","helpers","partials","data","lookupProperty","parent","propertyName","Object","hasOwnProperty","call","escapeExpression","nullContext","name","hash","loc","start","line","column","end","useData","key","fullscreenEnabled","fullscreenElement","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","webkit","moz","ms","document","window","vendor","keys","fscreen","inFullscreen","element","requestFullscreenFunction","bind","addEventListener","type","handler","options","removeEventListener","Boolean","val","onfullscreenchange","toLowerCase","onfullscreenerror","register","map","self","result","then","btn","div","querySelector","doFullscreenChange","classList","toggle","Consts","classes","ACTIVE","setAttribute","getLocaleString","byBtn","body","Util","detectMobile","windowWidth","innerWidth","devicePixelRatio","windowHeight","innerHeight","screenWidth","screen","width","screenHeight","height","header","getElementsByTagName","length","add","view3D","removeAttribute","remove","resizeEvent","createEvent","initEvent","dispatchEvent","disable"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.FullScreen = function () {\r\n    var self = this;\r\n\r\n    TC.Control.apply(self, arguments);\r\n};\r\n\r\nTC.inherit(TC.control.FullScreen, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.FullScreen.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-fscreen';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/tc-ctl-fscreen.hbs\";\r\n\r\n    const key = {\r\n        fullscreenEnabled: 0,\r\n        fullscreenElement: 1,\r\n        requestFullscreen: 2,\r\n        exitFullscreen: 3,\r\n        fullscreenchange: 4,\r\n        fullscreenerror: 5,\r\n    };\r\n\r\n    const webkit = [\r\n        'webkitFullscreenEnabled',\r\n        'webkitFullscreenElement',\r\n        'webkitRequestFullscreen',\r\n        'webkitExitFullscreen',\r\n        'webkitfullscreenchange',\r\n        'webkitfullscreenerror',\r\n    ];\r\n\r\n    const moz = [\r\n        'mozFullScreenEnabled',\r\n        'mozFullScreenElement',\r\n        'mozRequestFullScreen',\r\n        'mozCancelFullScreen',\r\n        'mozfullscreenchange',\r\n        'mozfullscreenerror',\r\n    ];\r\n\r\n    const ms = [\r\n        'msFullscreenEnabled',\r\n        'msFullscreenElement',\r\n        'msRequestFullscreen',\r\n        'msExitFullscreen',\r\n        'MSFullscreenChange',\r\n        'MSFullscreenError',\r\n    ];\r\n\r\n    const document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\r\n\r\n    const vendor = (\r\n        ('fullscreenEnabled' in document && Object.keys(key)) ||\r\n        (webkit[0] in document && webkit) ||\r\n        (moz[0] in document && moz) ||\r\n        (ms[0] in document && ms) ||\r\n        []\r\n    );\r\n\r\n    ctlProto.fscreen = {\r\n        inFullscreen: false,\r\n        requestFullscreen: element => element[vendor[key.requestFullscreen]](),\r\n        requestFullscreenFunction: element => element[vendor[key.requestFullscreen]],\r\n        get exitFullscreen() { return document[vendor[key.exitFullscreen]].bind(document); },\r\n        addEventListener: (type, handler, options) => document.addEventListener(vendor[key[type]], handler, options),\r\n        removeEventListener: (type, handler, options) => document.removeEventListener(vendor[key[type]], handler, options),\r\n        get fullscreenEnabled() { return Boolean(document[vendor[key.fullscreenEnabled]]); },\r\n        set fullscreenEnabled(val) { },\r\n        get fullscreenElement() { return document[vendor[key.fullscreenElement]]; },\r\n        set fullscreenElement(val) { },\r\n        get onfullscreenchange() { return document[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()]; },\r\n        set onfullscreenchange(handler) { return document[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()] = handler; },\r\n        get onfullscreenerror() { return document[\"on\" + vendor[key.fullscreenerror].toLowerCase()]; },\r\n        set onfullscreenerror(handler) { return document[\"on\" + vendor[key.fullscreenerror].toLowerCase()] = handler; }\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n\r\n        result.then(function () {\r\n            const btn = self.div.querySelector('.' + self.CLASS + '-btn');\r\n\r\n            if (self.fscreen.fullscreenEnabled) {\r\n\r\n                const doFullscreenChange = () => {\r\n                    btn.classList.toggle(TC.Consts.classes.ACTIVE, self.fscreen.inFullscreen);\r\n                    btn.setAttribute('title', self.fscreen.inFullscreen ? self.getLocaleString(\"fscreen.tip.return\") : self.getLocaleString(\"fscreen.tip\"));\r\n                };\r\n\r\n                self.fscreen.addEventListener('fullscreenchange', () => {\r\n                    self.fscreen.inFullscreen = self.fscreen.fullscreenElement !== null;\r\n                    doFullscreenChange();\r\n                }, false);\r\n\r\n                btn.addEventListener('click', function () {\r\n                    self.byBtn = true;\r\n                    if (!self.fscreen.inFullscreen) {\r\n                        self.fscreen.requestFullscreen(document.body);\r\n                    } else {\r\n                        self.fscreen.exitFullscreen();\r\n                    }\r\n                }, false);\r\n\r\n                if (!TC.Util.detectMobile()) {\r\n                    window.addEventListener('resize', () => {\r\n                        if (self.byBtn) {\r\n                            self.byBtn = false;\r\n                            return;\r\n                        }\r\n\r\n                        const windowWidth = window.innerWidth * window.devicePixelRatio;\r\n                        const windowHeight = window.innerHeight * window.devicePixelRatio;\r\n                        const screenWidth = window.screen.width;\r\n                        const screenHeight = window.screen.height;\r\n\r\n                        if (((windowWidth / screenWidth) >= 0.95) && ((windowHeight / screenHeight) >= 0.95)) {\r\n                            self.fscreen.inFullscreen = true;\r\n                        } else {\r\n                            self.fscreen.inFullscreen = false;\r\n                        }\r\n\r\n                        doFullscreenChange();\r\n\r\n                        let header = document.body.getElementsByTagName('header');\r\n                        if (self.fscreen.inFullscreen) {\r\n                            btn.setAttribute('disabled', 'disabled');\r\n\r\n                            if (header.length > 0) {\r\n                                header[0].classList.add(\"tc-ctl-fscreenToHeader\");\r\n                            }\r\n\r\n                            self.map.div.classList.add(\"tc-ctl-fscreenToMap\");\r\n                            if (self.map.view3D) {\r\n                                self.map.view3D.container.classList.add(\"tc-ctl-fscreenToMap\");\r\n                            }\r\n\r\n                        } else {\r\n                            btn.removeAttribute('disabled');\r\n\r\n                            if (header.length > 0) {\r\n                                header[0].classList.remove(\"tc-ctl-fscreenToHeader\");\r\n                            }\r\n\r\n                            self.map.div.classList.remove(\"tc-ctl-fscreenToMap\");\r\n                            if (self.map.view3D) {\r\n                                self.map.view3D.container.classList.remove(\"tc-ctl-fscreenToMap\");\r\n                            }\r\n                        }\r\n\r\n                        btn.setAttribute('title', self.fscreen.inFullscreen ? self.getLocaleString('fscreen.tip.keyboard') : self.getLocaleString(\"fscreen.tip\"));\r\n\r\n                        const resizeEvent = document.createEvent('HTMLEvents');\r\n                        resizeEvent.initEvent('resize', false, false);\r\n                        self.map.div.dispatchEvent(resizeEvent); // Para evitar que el mapa quede estirado o achatado después de gestionar la cabecera.\r\n                    });\r\n                }\r\n            } else {\r\n                // GLS: 19/02/2019 en lugar de ocultar el botón, deshabilitamos el control para que no quede espacio de más entre los botones\r\n                self.disable();\r\n            }\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n})();\r\n"]}