{"version":3,"sources":["control/ProjectionSelector.js"],"names":["TC","control","MapContents","syncLoadJS","apiLocation","ProjectionSelector","self","this","Control","apply","arguments","_cssClasses","LOAD_CRS_BUTTON","CLASS","CRS_DIALOG","CRS_LIST","CURRENT_CRS_NAME","CURRENT_CRS_CODE","CHANGE","NO_CHANGE","_dialogDiv","Util","getDiv","options","dialogDiv","window","$","_$dialogDiv","document","body","appendChild","addEventListener","Consts","event","CLICK","EventTarget","listenerBySelector","e","crs","target","dataset","crsCode","setProjection","allowFallbackLayer","passive","loadFallbackProjections","inherit","ctlProto","prototype","render","callback","result","call","getRenderedHtml","html","innerHTML","getAvailableCRS","map","getCompatibleCRS","extend","includeFallbacks","showProjectionChangeDialog","dialog","querySelector","classList","add","classes","LOADING","ul","blFirstOption","baseLayer","firstOption","blFallback","isRaster","getFallbackLayer","loadProjs","crsList","blCRSList","baseLayers","filter","layer","normalized","includeFallback","reduce","prev","current","index","array","concat","l","indexOf","crsLists","workLayers","every","elm","loadProjections","orderBy","then","projList","hasFallbackCRS","currentCRSName","currentCRSCode","forEach","projObj","CRSCodesEqual","code","textContent","name","button","createElement","li","length","HIDDEN","WARNING","getLocaleString","querySelectorAll","visibleLi","style","display","remove","getCapabilitiesPromise","showModal","loadProjDef","lis","p"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.control.MapContents) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\n(function () {\r\n\r\n    TC.control.ProjectionSelector = function () {\r\n        const self = this;\r\n\r\n        TC.Control.apply(self, arguments);\r\n\r\n        self._cssClasses = {\r\n            LOAD_CRS_BUTTON: self.CLASS + '-crs-btn-load',\r\n            CRS_DIALOG: self.CLASS + '-crs-dialog',\r\n            CRS_LIST: self.CLASS + '-crs-list',\r\n            CURRENT_CRS_NAME: self.CLASS + '-cur-crs-name',\r\n            CURRENT_CRS_CODE: self.CLASS + '-cur-crs-code',\r\n            CHANGE: self.CLASS + '-change',\r\n            NO_CHANGE: self.CLASS + '-no-change'\r\n        };\r\n\r\n        self._dialogDiv = TC.Util.getDiv(self.options.dialogDiv);\r\n        if (window.$) {\r\n            self._$dialogDiv = $(self._dialogDiv);\r\n        }\r\n        if (!self.options.dialogDiv) {\r\n            document.body.appendChild(self._dialogDiv);\r\n        }\r\n\r\n        self._dialogDiv.addEventListener(TC.Consts.event.CLICK, TC.EventTarget.listenerBySelector('button:not(.' + self._cssClasses.LOAD_CRS_BUTTON + ')', function (e) {\r\n            const crs = e.target.dataset.crsCode;\r\n            if (crs) {\r\n                self.setProjection({\r\n                    crs: crs,\r\n                    allowFallbackLayer: true\r\n                });\r\n            }\r\n        }), { passive: true });\r\n\r\n        self._dialogDiv.addEventListener(TC.Consts.event.CLICK, TC.EventTarget.listenerBySelector('button.' + self._cssClasses.LOAD_CRS_BUTTON, function (e) {\r\n            self.loadFallbackProjections();\r\n        }), { passive: true });\r\n    };\r\n\r\n    TC.inherit(TC.control.ProjectionSelector, TC.Control);\r\n\r\n    const ctlProto = TC.control.ProjectionSelector.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-projs';\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        const result = TC.Control.prototype.render.call(self, callback);\r\n\r\n        self.getRenderedHtml(self.CLASS + '-dialog', null, function (html) {\r\n            self._dialogDiv.innerHTML = html;\r\n        });\r\n        return result;\r\n    };\r\n\r\n    ctlProto.getAvailableCRS = function (options) {\r\n        return this.map.getCompatibleCRS(TC.Util.extend(options || {}, { includeFallbacks: true }))\r\n    };\r\n\r\n    ctlProto.showProjectionChangeDialog = function (options) {\r\n        const self = this;\r\n\r\n        const dialog = self._dialogDiv.querySelector('.' + self._cssClasses.CRS_DIALOG);\r\n        const body = dialog.querySelector('.tc-modal-body');\r\n        body.classList.add(TC.Consts.classes.LOADING);\r\n        const ul = body.querySelector('ul.' + self._cssClasses.CRS_LIST);\r\n        ul.innerHTML = '';\r\n        const blFirstOption = self.map.baseLayer.firstOption || self.map.baseLayer;\r\n        const blFallback = blFirstOption.isRaster() ? blFirstOption.getFallbackLayer() : null;\r\n\r\n        const loadProjs = function () {\r\n            var crsList = [];\r\n            var blCRSList = [];\r\n\r\n            options = options || {};\r\n            \r\n            if (blFirstOption.isRaster()) {\r\n                blCRSList = blFirstOption.getCompatibleCRS();\r\n                crsList = self.getAvailableCRS(TC.Util.extend(options, {}));\r\n            } else {\r\n                blCRSList = self.map.baseLayers\r\n                    .filter((layer) => {\r\n                        return layer.isRaster();\r\n                    })\r\n                    .map((layer) => {\r\n                        return layer.getCompatibleCRS({ normalized: true, includeFallback: true });\r\n                    })\r\n                    .reduce((prev, current, index, array) => {\r\n                        return prev.concat(current.filter((l) => { return prev.indexOf(l) < 0 }));\r\n                    });\r\n\r\n                const crsLists = (options.layer ? self.map.workLayers.concat(options.layer) : self.map.workLayers)\r\n                    .filter(function (layer) {\r\n                        return layer.isRaster();\r\n                    })\r\n                    .map(function (layer) {\r\n                        return layer.getCompatibleCRS({ normalized: true, includeFallback: true });\r\n                    });\r\n\r\n                crsList = blCRSList.filter((crs) => {\r\n                    return crsLists.every((elm) => {\r\n                        return elm.indexOf(crs) > -1;\r\n                    });\r\n                });\r\n            }\r\n\r\n            self.map.loadProjections({\r\n                crsList: crsList,\r\n                orderBy: 'name'\r\n            }).then(function (projList) {\r\n                var hasFallbackCRS = false;\r\n                var currentCRSName = dialog.querySelector('.' + self._cssClasses.CURRENT_CRS_NAME);\r\n                var currentCRSCode = dialog.querySelector('.' + self._cssClasses.CURRENT_CRS_CODE);\r\n                projList\r\n                    .forEach(function (projObj) {\r\n                        if (currentCRSName && currentCRSCode && TC.Util.CRSCodesEqual(self.map.crs, projObj.code)) {\r\n                            currentCRSName.textContent = projObj.name;\r\n                            currentCRSCode.textContent = projObj.code;\r\n                        }\r\n                        else {\r\n                            const button = document.createElement('button');\r\n                            button.textContent = projObj.name + ' (' + projObj.code + ')';\r\n                            button.dataset.crsCode = projObj.code;\r\n                            const li = document.createElement('li');\r\n                            li.appendChild(button);\r\n                            if (blCRSList.filter(function (crs) {\r\n                                return TC.Util.CRSCodesEqual(crs, projObj.code)\r\n                            }).length === 0) {\r\n                                // Es un CRS del fallback\r\n                                hasFallbackCRS = true;\r\n                                li.classList.add(TC.Consts.classes.HIDDEN);\r\n                                button.classList.add(TC.Consts.classes.WARNING);\r\n                            }\r\n                            ul.appendChild(li);\r\n                        }\r\n                    });\r\n                if (hasFallbackCRS) {\r\n                    const li = document.createElement('li');\r\n                    const button = document.createElement('button');\r\n                    button.classList.add(self._cssClasses.LOAD_CRS_BUTTON);\r\n                    button.innerHTML = self.getLocaleString('showOnTheFlyProjections');\r\n                    li.appendChild(button);\r\n                    ul.appendChild(li);\r\n                }\r\n\r\n                // Mostramos un aviso si no hay CRS compatibles\r\n                if (ul.querySelectorAll('li').length === 0) {\r\n                    const li = document.createElement('li');\r\n                    li.innerHTML = self.getLocaleString('thereAreNoCompatibleCRS');\r\n                    ul.appendChild(li);\r\n                }\r\n                const visibleLi = ul.querySelectorAll('li:not(.' + TC.Consts.classes.HIDDEN + ')');\r\n                dialog.querySelectorAll('.' + self._cssClasses.CHANGE).forEach(function (elm) {\r\n                    elm.style.display = visibleLi.length > 1 ? '' : 'none';\r\n                });\r\n                dialog.querySelectorAll('.' + self._cssClasses.NO_CHANGE).forEach(function (elm) {\r\n                    elm.style.display = visibleLi.length > 1 ? 'none' : '';\r\n                });\r\n                dialog.querySelector('ul.' + self._cssClasses.CRS_LIST).style.display = visibleLi.length > 0 || hasFallbackCRS ? '' : 'none';\r\n                body.classList.remove(TC.Consts.classes.LOADING);\r\n            });\r\n        };\r\n\r\n        if (blFallback) {\r\n            blFallback.getCapabilitiesPromise().then(loadProjs);\r\n        }\r\n        else {\r\n            loadProjs();\r\n        }\r\n        TC.Util.showModal(dialog, options);\r\n    };\r\n\r\n    ctlProto.setProjection = function (options) {\r\n        const self = this;\r\n        options = options || {};\r\n\r\n        TC.loadProjDef({\r\n            crs: options.crs,\r\n            callback: function () {\r\n                self.map.setProjection(options);\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto.loadFallbackProjections = function () {\r\n        const self = this;\r\n        const lis = self._dialogDiv\r\n            .querySelector('.' + self._cssClasses.CRS_DIALOG)\r\n            .querySelectorAll('ul.' + self._cssClasses.CRS_LIST + ' li');\r\n        lis.forEach(function (li) {\r\n            li.classList.remove(TC.Consts.classes.HIDDEN);\r\n            if (li.querySelector('button.' + self._cssClasses.LOAD_CRS_BUTTON)) {\r\n                li.classList.add(TC.Consts.classes.HIDDEN);\r\n            }\r\n        });\r\n        self._dialogDiv.querySelectorAll('p.' + TC.Consts.classes.WARNING).forEach(function (p) {\r\n            p.classList.remove(TC.Consts.classes.HIDDEN);\r\n        })\r\n        self._dialogDiv.querySelectorAll('.' + self._cssClasses.CHANGE).forEach(function (elm) {\r\n            elm.style.display = lis.length > 1 ? '' : 'none';\r\n        });\r\n        self._dialogDiv.querySelectorAll('.' + self._cssClasses.NO_CHANGE).forEach(function (elm) {\r\n            elm.style.display = lis.length > 1 ? 'none' : '';\r\n        });\r\n    };\r\n\r\n})();\r\n"]}