{"version":3,"sources":["control/Measure.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","Measure","self","this","apply","arguments","drawControls","persistentDrawControls","NOMEASURE","exportsState","renderPromise","then","measureMode","options","mode","history","historyIndex","reset","wrap","_len","div","querySelector","_area","_peri","setMode","units","m","peso","abbr","dam","precision","hm","ha","km","inherit","ctlProto","prototype","CLASS","template","compiler","main","container","depth0","helpers","partials","data","alias1","nullContext","alias2","escapeExpression","alias3","lambda","lookupProperty","parent","propertyName","Object","hasOwnProperty","call","name","hash","loc","start","line","column","end","useData","render","callback","_set1stRenderPromise","renderData","controlId","id","loadJS","Draw","classList","add","Consts","classes","HIDDEN","querySelectorAll","forEach","span","addEventListener","event","CLICK","e","label","tagName","parentElement","checkbox","newMode","value","checked","passive","Util","isFunction","register","map","Promise","resolve","reject","on","VIEWCHANGE","view","PRINTING","trigger","DRAWEND","layerId","getUID","drawLinesId","drawPolygonsId","layerPromise","addLayer","title","getLocaleString","owner","stealth","type","layerType","VECTOR","styles","point","polygon","all","objects","layer","putLayerOnTop","_lineDrawControlPromise","addControl","geom","POLYLINE","measure","persistent","styleTools","_polygonDrawControlPromise","POLYGON","controls","lineDrawControl","polygonDrawControl","ctl","containerControl","push","MEASURE","MEASUREPARTIAL","showMeasures","DRAWCANCEL","setTimeout","cancel","catch","displayMode","modes","elm","_activeMode","filter","matches","undefined","hiddenModes","radio","remove","COLLAPSED","activate","CONTROLACTIVATE","isActive","CONTROLDEACTIVATE","resetValues","locale","Cfg","area","Array","split","unit","index","array","difPeso","trim","length","Math","pow","innerHTML","formatNumber","toFixed","perimeter","textContent","getDrawLines","exportState","importState","state"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.Measure = function () {\r\n    var self = this;\r\n\r\n    TC.Control.apply(self, arguments);\r\n\r\n    self.drawControls = [];\r\n    self.persistentDrawControls = false;\r\n    self.NOMEASURE = '-';\r\n\r\n    self.exportsState = true;\r\n\r\n    this.renderPromise().then(function () {\r\n        self.measureMode = self.options.mode;\r\n\r\n        self.history = [];\r\n        self.historyIndex = 0;\r\n        self.reset = true;\r\n\r\n        self.wrap = new TC.wrap.control.Measure(self);\r\n\r\n        self._len = self.div.querySelector('.tc-ctl-meas-val-len');\r\n        self._area = self.div.querySelector('.tc-ctl-meas-val-area');\r\n        self._peri = self.div.querySelector('.tc-ctl-meas-val-peri');\r\n\r\n        self.setMode(self.options.mode);\r\n    });\r\n};\r\nTC.control.Measure.units = {\r\n    \"m\": { peso: 0, abbr: \"m&sup2;\" },\r\n    \"dam\": { peso: 1, abbr: \"dam&sup2;\", precision: 2 },\r\n    \"hm\": { peso: 2, abbr: \"hm&sup2;\", precision: 2 },\r\n    \"ha\": { peso: 2, abbr: \"ha\", precision: 3 },\r\n    \"km\": { peso: 3, abbr: \"km&sup2;\", precision: 3 }\r\n}\r\n\r\nTC.inherit(TC.control.Measure, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.Measure.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-meas';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/tc-ctl-meas.hbs\";\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        return self._set1stRenderPromise(TC.Control.prototype.renderData.call(self, { controlId: self.id }, function () {\r\n            TC.loadJS(\r\n                !TC.control.Draw,\r\n                TC.apiLocation + 'TC/control/Draw',\r\n                function () {\r\n                    if (self.options.mode) {\r\n                        self.div.querySelector('.tc-ctl-meas-select').classList.add(TC.Consts.classes.HIDDEN);\r\n                    }\r\n\r\n                    self.div.querySelectorAll(`.${TC.control.Measure.prototype.CLASS}-select span`).forEach(function (span) {\r\n                        span.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                            var label = this;\r\n                            while (label && label.tagName !== 'LABEL') {\r\n                                label = label.parentElement;\r\n                            }\r\n                            var checkbox = label.querySelector(`input[type=radio][name=\"${self.id}-mode\"]`);\r\n                            var newMode = checkbox.value;\r\n\r\n                            checkbox.checked = true;\r\n                            self.setMode(newMode, true);\r\n                        }, { passive: true });\r\n                    });\r\n\r\n                    if (TC.Util.isFunction(callback)) {\r\n                        callback();\r\n                    }\r\n                });\r\n        }));\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            TC.Control.prototype.register.call(self, map).then(function () {\r\n                self.map.on(TC.Consts.event.VIEWCHANGE, function () {\r\n                    if (self.map.view === TC.Consts.view.PRINTING) {\r\n                        self.trigger(TC.Consts.event.DRAWEND);\r\n                    }\r\n                });\r\n\r\n                const layerId = self.getUID();\r\n                const drawLinesId = self.getUID();\r\n                const drawPolygonsId = self.getUID();\r\n\r\n                self.units = self.options.units ? self.options.units : [\"m\", \"km\"];\r\n\r\n                self.layerPromise = map.addLayer({\r\n                    id: layerId,\r\n                    title: self.getLocaleString('measure'),\r\n                    owner: self,\r\n                    stealth: true,\r\n                    type: TC.Consts.layerType.VECTOR,\r\n                    styles: {\r\n                        point: map.options.styles.point,\r\n                        line: map.options.styles.line,\r\n                        polygon: map.options.styles.polygon\r\n                    }\r\n                });\r\n\r\n                Promise.all([self.layerPromise, self.renderPromise()]).then(function (objects) {\r\n                    const layer = objects[0];\r\n                    self.layer = layer;\r\n                    self.layer.map.putLayerOnTop(self.layer);\r\n\r\n                    self._lineDrawControlPromise = map.addControl('draw', {\r\n                        id: drawLinesId,\r\n                        div: self.div.querySelector('.tc-ctl-meas-line'),\r\n                        mode: TC.Consts.geom.POLYLINE,\r\n                        measure: true,\r\n                        persistent: self.persistentDrawControls,\r\n                        styleTools: self.persistentDrawControls,\r\n                        layer: self.layer\r\n                    });\r\n                    self._polygonDrawControlPromise = map.addControl('draw', {\r\n                        id: drawPolygonsId,\r\n                        div: self.div.querySelector('.tc-ctl-meas-polygon'),\r\n                        mode: TC.Consts.geom.POLYGON,\r\n                        measure: true,\r\n                        persistent: self.persistentDrawControls,\r\n                        styleTools: self.persistentDrawControls,\r\n                        layer: self.layer\r\n                    });\r\n\r\n                    Promise.all([self._lineDrawControlPromise, self._polygonDrawControlPromise]).then(function (controls) {\r\n                        self.lineDrawControl = controls[0];\r\n                        self.polygonDrawControl = controls[1];\r\n                        controls.forEach(function (ctl) {\r\n                            ctl.containerControl = self;\r\n                            self.drawControls.push(ctl);\r\n                            ctl\r\n                                .on(TC.Consts.event.MEASURE + ' ' + TC.Consts.event.MEASUREPARTIAL, function (e) {\r\n                                    self.showMeasures(e);\r\n                                })\r\n                                .on(TC.Consts.event.DRAWCANCEL, function (e) {\r\n                                    // Alerta de condición de carrera si no ponemos un timeout:\r\n                                    // 1- Se llama a cancel de un control Draw.\r\n                                    // 2- Se llama a deactivate (como es mediante cancel, no se se corta la cadena de activación controles).\r\n                                    // 3- Si el control activo anterior era otro de los modos de dibujo de Measure, se activa.\r\n                                    // 4- Se llama a cancel desde aquí.\r\n                                    // 5- Se llama a deactivate del control que acabamos de activar en 3.\r\n                                    // El activate de 3 y el deactivate de 5 sobre el mismo control entran en condición de carrera al crear/destruir la interaction\r\n                                    // por tanto se puede quedar en un estado inconsistente. Para evitar eso, separamos 3 de 5 por el siguiente timeout.\r\n                                    setTimeout(function () {\r\n                                        self.cancel();\r\n                                    }, 100);\r\n                                });\r\n                            // Desactivamos el método exportState que ya se encarga el control padre de ello\r\n                            ctl.exportsState = false;\r\n                        });\r\n\r\n                        resolve(self);\r\n                        self.setMode(self.options.mode);\r\n                    }).catch(reject);\r\n                }).catch(reject);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.displayMode = function (mode) {\r\n        const self = this;\r\n\r\n        const modes = [];\r\n        self.div.querySelectorAll('.tc-ctl-meas-mode').forEach(function (elm) {\r\n            modes.push(elm);\r\n        });\r\n        var event;\r\n        switch (mode) {\r\n            case TC.Consts.geom.POLYLINE:\r\n                self._activeMode = modes.filter(function (elm) {\r\n                    return elm.matches('.tc-ctl-meas-len');\r\n                })[0];\r\n                break;\r\n            case TC.Consts.geom.POLYGON:\r\n                self._activeMode = modes.filter(function (elm) {\r\n                    return elm.matches('.tc-ctl-meas-area');\r\n                })[0];\r\n                break;\r\n            case null:\r\n            case undefined:\r\n                self._activeMode = null;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const hiddenModes = modes.filter(function (elm) {\r\n            return elm !== self._activeMode;\r\n        });\r\n\r\n        if (mode) {\r\n            const radio = self.div.querySelector(`input[type=radio][name=\"${self.id}-mode\"][value=\"${mode}\"]`);\r\n            radio.checked = true;\r\n        }\r\n        else {\r\n            self.div.querySelectorAll(`input[type=radio][name=\"${self.id}-mode\"]`).forEach(function (radio) {\r\n                radio.checked = false;\r\n            });\r\n        }\r\n        if (self._activeMode) {\r\n            self._activeMode.classList.remove(TC.Consts.classes.HIDDEN);\r\n            self._activeMode.querySelector('.tc-ctl').classList.remove(TC.Consts.classes.COLLAPSED);\r\n        }\r\n        hiddenModes.forEach(function (elm) {\r\n            elm.classList.add(TC.Consts.classes.HIDDEN);\r\n        });\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setMode = function (mode) {\r\n        const self = this;\r\n\r\n        self.mode = mode;\r\n        self.displayMode(mode);\r\n\r\n        var event;\r\n        switch (mode) {\r\n            case TC.Consts.geom.POLYLINE:\r\n                self.lineDrawControl.activate();\r\n                event = TC.Consts.event.CONTROLACTIVATE;\r\n                break;\r\n            case TC.Consts.geom.POLYGON:\r\n                self.polygonDrawControl.activate();\r\n                event = TC.Consts.event.CONTROLACTIVATE;\r\n                break;\r\n            case null:\r\n            case undefined:\r\n                self.drawControls.forEach(function (ctl) {\r\n                    if (ctl.isActive) {\r\n                        ctl.cancel();\r\n                    }\r\n                });\r\n                event = TC.Consts.event.CONTROLDEACTIVATE;\r\n                break;\r\n            default:\r\n                event = TC.Consts.event.CONTROLACTIVATE;\r\n                break;\r\n        }\r\n\r\n        self.resetValues();\r\n\r\n        if (event && self.map) {\r\n            self.map.trigger(event, { control: self });\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.cancel = function () {\r\n        this.setMode(null, false);\r\n        return this;\r\n    }\r\n\r\n    ctlProto.showMeasures = function (options) {\r\n        const self = this;\r\n        options = options || {};\r\n        var units = options.units;\r\n        var precision;\r\n        const locale = self.map.options.locale || TC.Cfg.locale\r\n        if (options.area) {\r\n            var area = options.area;\r\n            (self.units instanceof Array ? self.units : self.units.split(\",\")).forEach(function (unit, index, array) {\r\n                const difPeso = TC.control.Measure.units[unit.trim()].peso - TC.control.Measure.units[\"m\"].peso;\r\n                let precision = TC.control.Measure.units[unit.trim()].precision ? TC.control.Measure.units[unit.trim()].precision : 0;\r\n                if (array.length === 1 || area >= Math.pow(100, difPeso) / Math.pow(10, precision ? precision - 1 : precision)) {\r\n                    self._area.innerHTML = TC.Util.formatNumber((area / Math.pow(100, (difPeso))).toFixed(precision), locale) + ' ' + TC.control.Measure.units[unit].abbr;\r\n                }\r\n            });\r\n        }\r\n        if (options.perimeter) {\r\n            var perimeter = options.perimeter;\r\n            if (perimeter > 1000) {\r\n                perimeter = perimeter / 1000;\r\n                units = 'km';\r\n            }\r\n            precision = units === 'm' ? 0 : 3;\r\n            self._peri.innerHTML = TC.Util.formatNumber(perimeter.toFixed(precision), locale) + ' ' + units;\r\n        }\r\n        if (options.length) {\r\n            var length = options.length;\r\n            if (length > 1000) {\r\n                length = length / 1000;\r\n                units = 'km';\r\n            }\r\n            precision = units === 'm' ? 0 : 3;\r\n            self._len.innerHTML = TC.Util.formatNumber(length.toFixed(precision), locale) + ' ' + units;\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.resetValues = function () {\r\n        const self = this;\r\n        if (self._len) {\r\n            self._len.textContent = self.NOMEASURE;\r\n            self._area.textContent = self.NOMEASURE;\r\n            self._peri.textContent = self.NOMEASURE;\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.getDrawLines = function () {\r\n\r\n    };\r\n\r\n    ctlProto.exportState = function () {\r\n        const self = this;\r\n        if (self.exportsState && self.layer) {\r\n            return {\r\n                id: self.id,\r\n                layer: self.layer.exportState()\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n\r\n    ctlProto.importState = function (state) {\r\n        const self = this;\r\n        self.layerPromise.then(function (layer) {\r\n            layer.importState(state.layer);\r\n        });\r\n    };\r\n\r\n})();"]}