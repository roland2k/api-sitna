{"version":3,"sources":["control/MultiFeatureInfo.js"],"names":["TC","control","FeatureInfoCommons","syncLoadJS","apiLocation","MultiFeatureInfo","Control","apply","this","arguments","modes","options","Consts","geom","POINT","POLYGON","featureInfoControl","lineFeatureInfoControl","polygonFeatureInfoControl","featureInfoControls","lastCtrlActive","popup","exportsState","inherit","ctlProto","prototype","CLASS","template","1","container","depth0","helpers","partials","data","alias1","nullContext","alias2","escapeExpression","alias3","lambda","lookupProperty","parent","propertyName","Object","hasOwnProperty","call","name","hash","loc","start","line","column","end","3","5","compiler","main","stack1","fn","program","inverse","noop","useData","mergeOptions","opt1","opt2","Util","extend","register","map","self","div","querySelectorAll","forEach","input","checked","Promise","resolve","reject","ctlPromises","styles","pointMode","polylineMode","POLYLINE","polygonMode","push","addControl","id","getUID","displayMode","persistentHighlights","share","then","active","style","filterStyle","polygon","on","event","LAYERADD","LAYERREMOVE","LAYERVISIBILITY","e","updateUI","CONTROLACTIVATE","CONTROLDEACTIVATE","all","activate","render","callback","renderData","controlId","pointSelectValue","lineSelectValue","polygonSelectValue","_set1stRenderPromise","changeEvent","value","addEventListener","querySelector","CLICK","ctl","resultsLayer","features","slice","f","downplayFeature","filterLayer","layer","removeFeature","passive","async","downloadDialog","getDownloadDialog","title","getLocaleString","fileName","_getFileName","elevation","displayElevation","assign","open","Array","concat","FEATUREREMOVE","some","FEATUREADD","FEATURESADD","isFunction","deactivate","renderPromise","enabled","workLayers","l","type","layerType","WMS","getVisibility","disabled","isActive","c","featuresUnavailable","every","length","delFeaturesBtn","classList","toggle","classes","HIDDEN","dlFeaturesBtn","displayValue","display","removeProperty"],"mappings":"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","sourcesContent":["\r\n/**\r\n  * Opciones de control de obtención de información de entidades de mapa en el que el método de selección es dibujar una \r\n  * geometría en el mapa. El control ofrece como resultados todas las entidades que se intersecan con esa geometría.\r\n  * Las geometrías de selección pueden ser puntos, líneas o polígonos.\r\n  * \r\n  * Este control utiliza las funcionalidades de los servicios OGC para realizar su cometido. En concreto, la selección por punto \r\n  * hace uso de la petición `GetFeatureInfo` de los servicios WMS. Por otro lado, las selecciones por línea y polígono emplean la petición\r\n  * `GetFeature` de los servicios WFS. Esto implica que en este caso debe existir un servicio WFS asociado al servicio WMS que ofrezca \r\n  * los mismos datos que este. Servidores de mapas como GeoServer tienen este comportamiento por defecto. El control intenta inferir \r\n  * la URL del servicio WFS a partir de la URL del servicio WMS de la capa del mapa.\r\n  * @typedef MultiFeatureInfoOptions\r\n  * @ignore\r\n  * @extends FeatureInfoOptions\r\n  * @see MapControlOptions\r\n  * @property {boolean} [active] - Si se establece a `true`, el control asociado está activo, es decir, responde a las pulsaciones hechas en el mapa desde el que se carga.\r\n  * Como máximo puede haber solamente un control activo en el mapa en cada momento.\r\n  * @property {HTMLElement|string} [div] - Elemento del DOM en el que crear el control o valor de atributo id de dicho elemento.\r\n  * @property {MultiFeatureInfoModeOptions} [modes] - Colección de modos disponibles de selección.\r\n  * @property {boolean} [persistentHighlights] - Cuando el control muestra los resultados de la consulta, si el servicio lo soporta, mostrará resaltadas sobre el mapa las geometrías\r\n  * de las entidades geográficas de la respuesta. Si el valor de esta propiedad es `true`, dichas geometrías se quedan resaltadas en el mapa indefinidamente. \r\n  * En caso contrario, las geometrías resaltadas se borran en el momento en que se cierra el bocadillo de resultados o se hace una nueva consulta.\r\n  * @example <caption>[Ver en vivo](../examples/cfg.MultiFeatureInfoOptions.html)</caption> {@lang html} \r\n  * <div id=\"mapa\"></div>\r\n  * <script>\r\n  *     // Establecemos un layout simplificado apto para hacer demostraciones de controles.\r\n  *     SITNA.Cfg.layout = \"layout/ctl-container\";\r\n  *     // Añadimos el control multiFeatureInfo.\r\n  *     SITNA.Cfg.controls.multiFeatureInfo = {\r\n  *         div: \"slot1\",\r\n  *         modes: {\r\n  *             point: true,\r\n  *             polyline: {\r\n  *                 filterStyle: {\r\n  *                     strokeColor: \"#00cccc\",\r\n  *                     strokeWidth: 4\r\n  *                 }\r\n  *             },\r\n  *             polygon: {\r\n  *                 filterStyle: {\r\n  *                     strokeColor: \"#6633cc\",\r\n  *                     strokeWidth: 3,\r\n  *                     fillColor: \"#6633cc\",\r\n  *                     fillOpacity: 0.5\r\n  *                 }\r\n  *             }\r\n  *         },\r\n  *         persistentHighlights: true\r\n  *     };\r\n  *     // Añadimos una capa WMS sobre la que hacer las consultas.\r\n  *     // El servicio WMS de IDENA tiene un servicio WFS asociado (imprescindible para consultas por línea o recinto).\r\n  *     SITNA.Cfg.workLayers = [\r\n  *         {\r\n  *             id: \"cp\",\r\n  *             type: SITNA.Consts.layerType.WMS,\r\n  *             url: \"https://idena.navarra.es/ogc/wms\",\r\n  *             layerNames: [\"IDENA:DIRECC_Pol_CodPostal\"]\r\n  *         }\r\n  *     ];\r\n  *     var map = new SITNA.Map(\"mapa\");\r\n  * </script> \r\n  */\r\n\r\n/**\r\n  * Opciones de control de obtención de información de entidades de mapa por click, por línea o por recinto.\r\n  * @typedef MultiFeatureInfoModeOptions\r\n  * @ignore\r\n  * @see MultiFeatureInfoOptions\r\n  * @property {boolean|FeatureInfoOptions} [point=true] - Si se establece a un valor verdadero, el control permite la selección de entidades por punto.\r\n  * @property {boolean|GeometryFeatureInfoOptions} [polyline] - Si se establece a un valor verdadero, el control permite la selección de entidades por línea.\r\n  * @property {boolean|GeometryFeatureInfoOptions} [polygon=true] - Si se establece a un valor verdadero, el control permite la selección de entidades por polígono.\r\n  */\r\n\r\nTC.control = TC.control || {};\r\n\r\nif (!TC.control.FeatureInfoCommons) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/FeatureInfoCommons');\r\n}\r\n(function () {\r\n    TC.control.MultiFeatureInfo = function () {\r\n        var self = this;\r\n        TC.Control.apply(self, arguments);\r\n        self.modes = self.options.modes || {};\r\n        if (typeof self.modes[TC.Consts.geom.POINT] === 'undefined') {\r\n            self.modes[TC.Consts.geom.POINT] = true;\r\n        }\r\n        if (typeof self.modes[TC.Consts.geom.POLYGON] === 'undefined') {\r\n            self.modes[TC.Consts.geom.POLYGON] = true;\r\n        }\r\n        self.featureInfoControl = null;\r\n        self.lineFeatureInfoControl = null;\r\n        self.polygonFeatureInfoControl = null;\r\n        self.featureInfoControls = [];\r\n        self.lastCtrlActive = null;\r\n        self.popup = null;\r\n        self.exportsState = false; // Los controles que exportan estado son los hijos\r\n    };\r\n\r\n    TC.inherit(TC.control.MultiFeatureInfo, TC.control.FeatureInfoCommons);\r\n\r\n    var ctlProto = TC.control.MultiFeatureInfo.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-m-finfo';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/tc-ctl-m-finfo.hbs\";\r\n\r\n    const mergeOptions = function (opt1, opt2) {\r\n        if (opt1) {\r\n            if (opt1 === true) {\r\n                opt1 = {};\r\n            }\r\n            return TC.Util.extend(true, opt1, opt2);\r\n        }\r\n        return opt1;\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        self.div.querySelectorAll('input[type=radio]').forEach(function (input) {\r\n            input.checked = false;\r\n        });\r\n\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            const ctlPromises = [TC.Control.prototype.register.call(self, map)]\r\n            const styles = self.options.styles || {};\r\n            const pointMode = self.modes[TC.Consts.geom.POINT];\r\n            const polylineMode = self.modes[TC.Consts.geom.POLYLINE];\r\n            const polygonMode = self.modes[TC.Consts.geom.POLYGON];\r\n            if (pointMode) {\r\n                ctlPromises.push(map.addControl(\"featureInfo\", mergeOptions(self.modes[TC.Consts.geom.POINT],\r\n                    {\r\n                        id: self.getUID(),\r\n                        displayMode: self.options.displayMode,\r\n                        persistentHighlights: self.options.persistentHighlights,\r\n                        share: self.options.share\r\n                    })).then(function (control) {\r\n                        self.featureInfoControl = control;\r\n                        self.featureInfoControls.push(control);\r\n                        return control;\r\n                    }));\r\n            }\r\n            if (self.modes[TC.Consts.geom.POLYLINE]) {\r\n                ctlPromises.push(map.addControl(\"lineFeatureInfo\", mergeOptions(self.modes[TC.Consts.geom.POLYLINE],\r\n                    {\r\n                        id: self.getUID(),\r\n                        active: polylineMode.active,\r\n                        displayMode: self.options.displayMode,\r\n                        persistentHighlights: self.options.persistentHighlights,\r\n                        share: self.options.share,\r\n                        style: polylineMode.filterStyle || styles.line\r\n                    })).then(function (control) {\r\n                        self.lineFeatureInfoControl = control;\r\n                        self.featureInfoControls.push(control);\r\n                        return control;\r\n                    }));\r\n            }\r\n            if (self.modes[TC.Consts.geom.POLYGON]) {\r\n                ctlPromises.push(map.addControl(\"polygonFeatureInfo\", mergeOptions(self.modes[TC.Consts.geom.POLYGON],\r\n                    {\r\n                        id: self.getUID(),\r\n                        active: polygonMode.active,\r\n                        displayMode: self.options.displayMode,\r\n                        persistentHighlights: self.options.persistentHighlights,\r\n                        share: self.options.share,\r\n                        style: polygonMode.filterStyle || styles.polygon\r\n                    })).then(function (control) {\r\n                        self.polygonFeatureInfoControl = control;\r\n                        self.featureInfoControls.push(control);\r\n                        return control;\r\n                    }));\r\n            }\r\n\r\n            map.on(`${TC.Consts.event.LAYERADD} ${TC.Consts.event.LAYERREMOVE} ${TC.Consts.event.LAYERVISIBILITY}`, function (e) {\r\n                self.updateUI();\r\n            });\r\n\r\n            map.on(`${TC.Consts.event.CONTROLACTIVATE} ${TC.Consts.event.CONTROLDEACTIVATE}`, function (e) {\r\n                if (e.control === self.featureInfoControl || e.control === self.lineFeatureInfoControl || e.control === self.polygonFeatureInfoControl) {\r\n                    self.updateUI();\r\n                }\r\n            });\r\n\r\n            Promise.all(ctlPromises).then(function () {\r\n                if (self.featureInfoControl) {\r\n                    self.featureInfoControl.activate();\r\n                    self.lastCtrlActive = self.featureInfoControl;\r\n                }\r\n                self.updateUI();\r\n                resolve(self);\r\n            });\r\n        });\r\n\r\n    };\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        var renderData = { controlId: self.id };\r\n        if (self.modes[TC.Consts.geom.POINT]) {\r\n            renderData.pointSelectValue = TC.Consts.geom.POINT;\r\n        }\r\n        if (self.modes[TC.Consts.geom.POLYLINE]) {\r\n            renderData.lineSelectValue = TC.Consts.geom.POLYLINE;\r\n        }\r\n        if (self.modes[TC.Consts.geom.POLYGON]) {\r\n            renderData.polygonSelectValue = TC.Consts.geom.POLYGON;\r\n        }\r\n        return self._set1stRenderPromise(self.renderData(renderData,\r\n            function () {\r\n                var changeEvent = function () {\r\n                    switch (this.value) {\r\n                        case TC.Consts.geom.POLYLINE:\r\n                            //modo línea\r\n                            self.lineFeatureInfoControl.activate();\r\n                            self.lastCtrlActive = self.lineFeatureInfoControl;\r\n                            break;\r\n                        case TC.Consts.geom.POLYGON:\r\n                            //modo poligono\r\n                            self.polygonFeatureInfoControl.activate();\r\n                            self.lastCtrlActive = self.polygonFeatureInfoControl;\r\n                            break;\r\n                        default:\r\n                            //modo point\r\n                            self.featureInfoControl.activate();\r\n                            self.lastCtrlActive = self.featureInfoControl;\r\n                            break;\r\n                    }\r\n                };\r\n                self.div.querySelectorAll('input[type=radio]').forEach(function (input) {\r\n                    input.addEventListener('change', changeEvent);\r\n                });\r\n\r\n                //URI bind del click del boton de borrar seleccionadas\r\n                const delFeaturesBtn = self.div.querySelector(`.${self.CLASS}-btn-remove`);\r\n                delFeaturesBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                    self.featureInfoControls.forEach(ctl => {\r\n                        ctl.resultsLayer.features.slice().forEach(f => ctl.downplayFeature(f));\r\n                        ctl.filterLayer.features.slice().forEach(f => f.layer.removeFeature(f));\r\n                    });\r\n                }, { passive: true });\r\n\r\n                self.div.querySelector(`.${self.CLASS}-btn-dl`).addEventListener(TC.Consts.event.CLICK, async function (e) {\r\n                    const downloadDialog = await self.getDownloadDialog();\r\n                    let options = {\r\n                        title: self.getLocaleString(\"featureInfo\") + \" - \" + self.getLocaleString(\"download\"),\r\n                        fileName: self._getFileName()\r\n                    };\r\n\r\n                    if (self.map.elevation || self.options.displayElevation) {\r\n                        options = Object.assign({}, options, {\r\n                            elevation: Object.assign({}, self.map.elevation && self.map.elevation.options, self.options.displayElevation)\r\n                        });\r\n                    }\r\n                    downloadDialog.open(Array.prototype.concat.apply([], self.featureInfoControls.map(ctl => ctl.resultsLayer.features)), options);\r\n                }, { passive: true });\r\n\r\n                self.map\r\n                    //.on(TC.Consts.event.FEATUREINFO, function () {\r\n                    //    delFeaturesBtn.disabled = false;\r\n                    //})\r\n                    //.on(TC.Consts.event.NOFEATUREINFO, function (e) {\r\n                    //    if (e.control && e.control.filterFeature) {\r\n                    //        delFeaturesBtn.disabled = false;\r\n                    //    }\r\n                    //})\r\n                    .on(TC.Consts.event.FEATUREREMOVE, function (e) {\r\n                        if (self.featureInfoControls.some(ctl => ctl.resultsLayer === e.layer || ctl.filterLayer === e.layer)) {\r\n                            self.updateUI();\r\n                        }\r\n                    })\r\n                    .on(TC.Consts.event.FEATUREADD + ' ' + TC.Consts.event.FEATURESADD, function (e) {\r\n                        if (self.featureInfoControls.some(ctl => ctl.resultsLayer === e.layer || ctl.filterLayer === e.layer)) {\r\n                            self.updateUI();\r\n                        }\r\n                    });\r\n\r\n                if (TC.Util.isFunction(callback)) {\r\n                    callback();\r\n                }\r\n            }));\r\n    };\r\n\r\n    ctlProto.activate = function () {\r\n        var self = this;\r\n        if (self.lastCtrlActive)\r\n            self.lastCtrlActive.activate();\r\n    };\r\n\r\n    ctlProto.deactivate = function () {\r\n        var self = this;\r\n        self.lastCtrlActive.deactivate(false);\r\n    };\r\n\r\n    ctlProto.updateUI = function () {\r\n        const self = this;\r\n        self.renderPromise().then(function () {\r\n            const enabled = self.map.workLayers.some(l => l.type === TC.Consts.layerType.WMS && l.getVisibility());\r\n            self.div.querySelectorAll('input').forEach(function (input) {\r\n                input.disabled = !enabled;\r\n            });\r\n            if (self.featureInfoControl) {\r\n                const input = self.div.querySelector(`input[value=${TC.Consts.geom.POINT}]`);\r\n                if (input) {\r\n                    input.checked = self.featureInfoControl.isActive;\r\n                }\r\n            }\r\n            if (self.lineFeatureInfoControl) {\r\n                const input = self.div.querySelector(`input[value=${TC.Consts.geom.POLYLINE}]`);\r\n                if (input) {\r\n                    input.checked = self.lineFeatureInfoControl.isActive;\r\n                }\r\n            }\r\n            if (self.polygonFeatureInfoControl) {\r\n                const input = self.div.querySelector(`input[value=${TC.Consts.geom.POLYGON}]`);\r\n                if (input) {\r\n                    input.checked = self.polygonFeatureInfoControl.isActive;\r\n                }\r\n            }\r\n\r\n            const persistentHighlights = self.featureInfoControls.some(c => c.options.persistentHighlights);\r\n            const featuresUnavailable = self.featureInfoControls.every(ctl => ctl.resultsLayer && ctl.resultsLayer.features.length === 0 && ctl.filterLayer && ctl.filterLayer.features.length === 0);\r\n            const delFeaturesBtn = self.div.querySelector(`.${self.CLASS}-btn-remove`);\r\n            delFeaturesBtn.classList.toggle(TC.Consts.classes.HIDDEN, !persistentHighlights);\r\n            delFeaturesBtn.disabled = featuresUnavailable;\r\n            const dlFeaturesBtn = self.div.querySelector(`.${self.CLASS}-btn-dl`);\r\n            dlFeaturesBtn.classList.toggle(TC.Consts.classes.HIDDEN, !persistentHighlights);\r\n            dlFeaturesBtn.disabled = featuresUnavailable;\r\n\r\n            // Hack para compensar bug de Edge: no se actualiza el estilo al cambiar el estado del radio.\r\n            const displayValue = self.div.style.display;\r\n            self.div.style.display = 'none';\r\n            if (displayValue) {\r\n                self.div.style.display = displayValue;\r\n            }\r\n            else {\r\n                self.div.style.removeProperty('display');\r\n            }\r\n        });\r\n    };\r\n\r\n})();"]}