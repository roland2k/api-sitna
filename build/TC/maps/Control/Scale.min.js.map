{"version":3,"sources":["control/Scale.js"],"names":["TC","control","Consts","SCREEN_SIZE_KEY","Control","syncLoadJS","apiLocation","Scale","apply","this","arguments","inherit","ctlProto","prototype","CLASS","template","compiler","main","container","depth0","helpers","partials","data","alias1","nullContext","alias2","escapeExpression","lookupProperty","parent","propertyName","Object","hasOwnProperty","call","name","hash","loc","start","line","column","end","lambda","useData","render","callback","self","_set1stRenderPromise","renderData","scale","getScale","screenSize","Cfg","span","div","querySelector","textContent","format","substr","addEventListener","event","CLICK","setScreenSize","passive","Util","isFunction","register","map","result","storage","getLocalValue","on","ZOOM","metersPerDegree","update","prompt","getLocaleString","value","parseFloat","setLocalValue","resolution","res","wrap","getResolution","getDpi","window","devicePixelRatio","isGeo","extent","getExtent","getMetersPerDegree","dpi","Math","sqrt","screen","width","height","number","n","Number","toFixed","a","length","l","unshift","join"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\nTC.Consts = TC.Consts || {};\r\nTC.Consts.SCREEN_SIZE_KEY = 'TC.Map.screenSize';\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.Scale = function () {\r\n    TC.Control.apply(this, arguments);\r\n};\r\n\r\nTC.inherit(TC.control.Scale, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.Scale.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-scl';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/tc-ctl-scl.hbs\";\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        return self._set1stRenderPromise(self.renderData({ scale: self.getScale(), screenSize: TC.Cfg.screenSize }, function () {\r\n\r\n            const span = self.div.querySelector('span');\r\n            span.textContent = '1:' + self.format(span.textContent.substr(2));\r\n\r\n            self.div.querySelector('input[type=\"button\"]').addEventListener(TC.Consts.event.CLICK, function () {\r\n                self.setScreenSize();\r\n            }, { passive: true });\r\n\r\n            if (TC.Util.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        }));\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n        var screenSize = TC.Util.storage.getLocalValue(TC.Consts.SCREEN_SIZE_KEY);\r\n        if (screenSize) {\r\n            TC.Cfg.screenSize = screenSize;\r\n        }\r\n        self.render(function () {\r\n            map.on(TC.Consts.event.ZOOM, function () {\r\n                delete self.metersPerDegree;\r\n                self.update();\r\n            });\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.update = function () {\r\n        this.render();\r\n    };\r\n\r\n    /*\r\n     *  setScreenSize: Prompts for screen size in inches, updates and stores value\r\n     */\r\n    ctlProto.setScreenSize = function () {\r\n        var self = this;\r\n        TC.prompt(self.getLocaleString('selectScreenSize'), TC.Cfg.screenSize, function (value) {\r\n            if (value) {\r\n                TC.Cfg.screenSize = parseFloat(value);\r\n                TC.Util.storage.setLocalValue(TC.Consts.SCREEN_SIZE_KEY, TC.Cfg.screenSize);\r\n                self.update();\r\n            }\r\n        });\r\n    };\r\n\r\n    /*\r\n     *  getScale: Gets scale denominator with a resolution or current map resolution and estimated screen DPI\r\n     *  Parameters: number (optional), the resolution to get scale from. If no parameter is given, current map resolution is used\r\n     *  Returns: number\r\n     */\r\n    ctlProto.getScale = function (resolution) {\r\n        var self = this;\r\n        var result = 0;\r\n        var res = (!resolution && self.map) ? self.map.wrap.getResolution() : resolution;\r\n        if (res) {\r\n            result = res * self.getDpi(TC.Cfg.screenSize) / .0254;\r\n            if (window.devicePixelRatio) {\r\n                result = result * window.devicePixelRatio;\r\n            }\r\n        }\r\n        if (self.map && self.map.wrap.isGeo()) {\r\n            if (!self.metersPerDegree) {\r\n                var extent = self.map.getExtent();\r\n                if (extent) {\r\n                    self.metersPerDegree = TC.Util.getMetersPerDegree(extent);\r\n                }\r\n            }\r\n            if (self.metersPerDegree) {\r\n                result = result * self.metersPerDegree;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /*\r\n     *  getDpi: Gets estimated DPI based on screen resolution and screenSize value\r\n     *  Returns: number\r\n     */\r\n    ctlProto.getDpi = function (screenSize) {\r\n        var self = this;\r\n        self.dpi = Math.sqrt(screen.width * screen.width + screen.height * screen.height) / screenSize;\r\n        return self.dpi;\r\n    };\r\n\r\n\r\n    ctlProto.format = function (number) {\r\n        var n = (new Number(number)).toFixed(0);\r\n        var a = [];\r\n        while (n.length > 3) {\r\n            var l = n.length - 3;\r\n            a.unshift(n.substr(l));\r\n            n = n.substr(0, l);\r\n        }\r\n        if (n) {\r\n            a.unshift(n);\r\n        }\r\n        return a.join('.');\r\n    };\r\n\r\n})();"]}