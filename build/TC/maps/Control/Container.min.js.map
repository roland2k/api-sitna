{"version":3,"sources":["control/Container.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","Container","apply","this","arguments","controlOptions","options","controls","ctlCount","Array","length","Object","keys","defaultSelection","inherit","ctlProto","prototype","register","map","self","ctlRegister","call","uids","forEach","elm","idx","arr","getUID","Promise","resolve","reject","all","renderPromise","then","onRender","ctl","render","callback","getControl","promise","_ctlPromises","Error"],"mappings":"AAAAA,GAAGC,QAAUD,GAAGC,SAAW,GAEtBD,GAAGE,SACJF,GAAGG,WAAWH,GAAGI,YAAc,cAGnCJ,GAAGC,QAAQI,UAAY,WAGnBL,GAAGE,QAAQI,MAFAC,KAEYC,WAFZD,KAINE,eAJMF,KAIgBG,QAAQC,UAAY,GAJpCJ,KAMNK,SANML,KAMUE,0BAA0BI,MANpCN,KAMiDE,eAAeK,OAASC,OAAOC,KANhFT,KAM0FE,gBAAgBK,OAN1GP,KAONU,iBAPMV,KAOkBG,QAAQO,kBAGzCjB,GAAGkB,QAAQlB,GAAGC,QAAQI,UAAWL,GAAGE,UAEpC,WACI,IAAIiB,EAAWnB,GAAGC,QAAQI,UAAUe,UAEpCD,EAASE,SAAW,SAAUC,GAC1B,MAAMC,EAAOhB,KACPiB,EAAcxB,GAAGE,QAAQkB,UAAUC,SAASI,KAAKF,EAAMD,GAE7DC,EAAKG,KAAO,IAAIb,MAAMU,EAAKX,UAC3BW,EAAKG,KAAKC,QAAQ,SAAUC,EAAKC,EAAKC,GAClCA,EAAID,GAAON,EAAKQ,WAGpB,OAAO,IAAIC,QAAQ,SAAUC,EAASC,GAClCF,QAAQG,IAAI,CAACX,EAAaD,EAAKa,kBAAkBC,KAAK,WAClDd,EAAKe,WAAWD,KAAKE,GAAON,EAAQM,SAKhDpB,EAASmB,SAAW,WAChB,OAAON,QAAQC,QAAQ1B,OAG3BY,EAASqB,OAAS,SAAUC,KAE5BtB,EAASuB,WAAa,SAAUb,GAC5B,IAAIc,EAAUpC,KAAKqC,aAAaf,GAChC,OAAKc,GACMX,QAAQE,OAAOW,MAAM,sBA5BxC","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.Container = function () {\r\n    var self = this;\r\n\r\n    TC.Control.apply(self, arguments);    \r\n\r\n    self.controlOptions = self.options.controls || [];\r\n\r\n    self.ctlCount = self.controlOptions instanceof Array ? self.controlOptions.length : Object.keys(self.controlOptions).length;    \r\n    self.defaultSelection = self.options.defaultSelection;\r\n};\r\n\r\nTC.inherit(TC.control.Container, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.Container.prototype;\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        const ctlRegister = TC.Control.prototype.register.call(self, map);\r\n\r\n        self.uids = new Array(self.ctlCount);\r\n        self.uids.forEach(function (elm, idx, arr) {\r\n            arr[idx] = self.getUID();\r\n        });\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            Promise.all([ctlRegister, self.renderPromise()]).then(function () {\r\n                self.onRender().then(ctl => resolve(ctl));\r\n            });\r\n        });        \r\n    };\r\n\r\n    ctlProto.onRender = function () {\r\n        return Promise.resolve(this);\r\n    };\r\n\r\n    ctlProto.render = function (callback) { };\r\n\r\n    ctlProto.getControl = function (idx) {\r\n        var promise = this._ctlPromises[idx];\r\n        if (!promise) {\r\n            return Promise.reject(Error('No control found'));            \r\n        }\r\n\r\n        return promise;\r\n    };\r\n\r\n})();\r\n"]}