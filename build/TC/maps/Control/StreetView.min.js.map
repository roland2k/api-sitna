{"version":3,"sources":["control/StreetView.js"],"names":["TC","Control","syncLoadJS","apiLocation","Consts","url","GOOGLEMAPS","gMapsUrl","Cfg","proxyExceptions","push","control","StreetView","this","_sv","_mapActiveControl","apply","arguments","viewDiv","_startLonLat","inherit","ctlProto","prototype","CLASS","template","compiler","main","container","depth0","helpers","partials","data","lookupProperty","parent","propertyName","Object","hasOwnProperty","call","escapeExpression","nullContext","name","hash","loc","start","line","column","end","useData","dispatchCanvasResize","event","document","createEvent","initEvent","map","div","querySelector","dispatchEvent","reset","ctl","view","onTransitionend","removeEventListener","addEventListener","setTimeout","layer","clearFeatures","classList","remove","classes","CHECKED","HIDDEN","register","self","Util","getDiv","options","add","insertAdjacentElement","result","googleMapsKey","layerId","getUID","i","workLayers","length","type","layerType","VECTOR","id","loaded","addLayer","owner","stealth","then","renderPromise","loadJS","window","Draggabilly","DRAGGABILLY","drag","containment","on","e","preset","btn","btnRect","getBoundingClientRect","dragRect","top","bottom","left","right","extent","getExtent","xy","addMarker","cssClass","width","height","anchor","mapRect","xpos","devicePixelRatio","ypos","coords","wrap","getCoordinateFromPixel","callback","resolve","setPosition","CLICK","stopPropagation","closeView","passive","a","b","c","error","render","_set1stRenderPromise","Promise","reject","renderData","getRenderedHtml","out","innerHTML","catch","err","waitId","ondrop","feature","bounds","getBounds","lonLat","reproject","crs","lng","lat","ondrag","li","getLoadingIndicator","addWait","mapDiv","setMarker","sv","center","heading","latLon","getPosition","getPov","Math","round","showsPopup","all","_markerPromises","setDraggable","setCenter","contains","COLLAPSED","google","maps","mapsLonLat","LatLng","StreetViewService","getPanorama","location","preference","StreetViewPreference","BEST","svPanoramaData","svStatus","StreetViewStatus","OK","removeWait","alert","ZERO_RESULTS","getLocaleString","_transitioning","resizeEvent","svOptions","position","pov","pitch","zoom","fullscreenControl","zoomControlOptions","ControlPosition","LEFT_TOP","panControlOptions","imageDateControl","setOptions","setVisible","StreetViewPanorama","addListener","VISIBLE","features","pegmanMarker","setStyle","getStatus","style","header","body","display","activeControl","_previousActiveControl","deactivate","endProcess","removeProperty","activate"],"mappings":"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","sourcesContent":["\r\n/**\r\n  * Opciones de control de StreetView.\r\n  * @typedef StreetViewOptions\r\n  * @extends ControlOptions\r\n  * @see MapControlOptions\r\n  * @property {HTMLElement|string} [div] - Elemento del DOM en el que crear el control o valor de atributo id de dicho elemento.\r\n  * @property {string} [googleMapsKey] - El control de StreetView hace uso de la API de Google Maps para funcionar. \r\n  * Esta propiedad establece la clave de uso asociada al sitio donde está alojada la aplicación que usa la API SITNA. \r\n  * No es necesaria para hacer funcionar el control pero es recomendable obtener una para garantizar el servicio por parte de Google.\r\n  * \r\n  * Puede obtener más información en el [sitio para desarrolladores de Google](https://developers.google.com/maps/documentation/javascript/get-api-key).\r\n  * @property {HTMLElement|string} [viewDiv] - Elemento del DOM en el que mostrar la vista de StreetView o valor de atributo id de dicho elemento.\r\n  * @example <caption>[Ver en vivo](../examples/cfg.StreetViewOptions.html)</caption> {@lang html}\r\n  * <div id=\"mapa\"/>\r\n  * <div id=\"sv\"/>\r\n  * <script>\r\n  *     // Creamos un mapa con el control de StreetView.\r\n  *     // La vista de StreetView se debe dibujar en el elemento con identificador \"sv\".\r\n  *     // Se utilizará la clave de Google Maps para el SITNA.\r\n  *     // (Solamente es válida en el sitio web del SITNA, está aquí a título de ejemplo).\r\n  *     var map = new SITNA.Map(\"mapa\", {\r\n  *         controls: {\r\n  *             streetView: {\r\n  *                 viewDiv: \"sv\",\r\n  *                 googleMapsKey: \"AIzaSyDyXgqllcajbMjx8yQxEX28VgA9nQOhtCM\"\r\n  *             }\r\n  *         }\r\n  *     });\r\n  * </script>\r\n  */\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\n(function () {\r\n    TC.Consts.url.GOOGLEMAPS = '//maps.googleapis.com/maps/api/js?v=3';\r\n    var gMapsUrl = TC.Consts.url.GOOGLEMAPS;\r\n    TC.Cfg.proxyExceptions = TC.Cfg.proxyExceptions || [];\r\n    TC.Cfg.proxyExceptions.push(TC.Consts.url.GOOGLEMAPS);\r\n\r\n    TC.control.StreetView = function () {\r\n        var self = this;\r\n        self._sv = null;\r\n        self._mapActiveControl = null;\r\n\r\n        TC.Control.apply(self, arguments);\r\n\r\n        self.viewDiv = null;\r\n        self._startLonLat = null;\r\n    };\r\n\r\n    TC.inherit(TC.control.StreetView, TC.Control);\r\n\r\n    var ctlProto = TC.control.StreetView.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-sv';\r\n\r\n    ctlProto.template = {};\r\n    ctlProto.template[ctlProto.CLASS] = TC.apiLocation + \"TC/templates/tc-ctl-sv.hbs\";\r\n    ctlProto.template[ctlProto.CLASS + '-view'] = TC.apiLocation + \"TC/templates/tc-ctl-sv-view.hbs\";\r\n\r\n    const dispatchCanvasResize = function () {\r\n        var event = document.createEvent('HTMLEvents');\r\n        event.initEvent('resize', true, false);\r\n        this.map.div.querySelector('canvas').dispatchEvent(event);\r\n    };\r\n\r\n    var preset = function (ctl) {\r\n        ctl.div.querySelector('.' + ctl.CLASS + '-btn').classList.add(TC.Consts.classes.CHECKED);\r\n        ctl.map.div.classList.add(ctl.CLASS + '-active');\r\n    };\r\n\r\n    var reset = function (ctl) {\r\n        const view = ctl.viewDiv;\r\n        const onTransitionend = function () {\r\n            view.removeEventListener('transitionend', onTransitionend);\r\n            dispatchCanvasResize.call(ctl);\r\n        };\r\n\r\n        view.addEventListener('transitionend', onTransitionend);\r\n\r\n        // Por si no salta transitionend\r\n        setTimeout(function () {\r\n            dispatchCanvasResize.call(ctl);\r\n        }, 1000);\r\n\r\n\r\n        ctl.layer.clearFeatures();\r\n        ctl.div.querySelector('.' + ctl.CLASS + '-btn').classList.remove(TC.Consts.classes.CHECKED);\r\n        ctl.div.querySelector('.' + ctl.CLASS + '-drag').classList.remove(TC.Consts.classes.HIDDEN);\r\n        ctl.map.div.classList.remove(ctl.CLASS + '-active');\r\n        ctl._startLonLat = null;\r\n    };\r\n\r\n    var resolve = function (ctl) {\r\n        var result = false;\r\n        const btn = ctl.div.querySelector('.' + ctl.CLASS + '-btn');\r\n        const drag = ctl.div.querySelector('.' + ctl.CLASS + '-drag');\r\n\r\n        var btnRect = btn.getBoundingClientRect();\r\n        var dragRect = drag.getBoundingClientRect();\r\n        drag.classList.add(TC.Consts.classes.HIDDEN);\r\n        if (dragRect.top < btnRect.top || dragRect.top > btnRect.bottom ||\r\n            dragRect.left < btnRect.left || dragRect.left > btnRect.right) {\r\n            // Hemos soltado fuera del botón: activar StreetView\r\n            result = true;\r\n            // Precarga de marcadores\r\n            var extent = ctl.map.getExtent();\r\n            var xy = [extent[2], extent[3]];\r\n            for (var i = 0; i < 16; i++) {\r\n                ctl.layer.addMarker(xy, {\r\n                    cssClass: 'tc-marker-sv-' + i,\r\n                    width: 48,\r\n                    height: 48,\r\n                    anchor: [0, 1]\r\n                });\r\n            }\r\n            /////////////////////\r\n            // Activamos StreetView\r\n            var mapRect = ctl.map.div.getBoundingClientRect();\r\n            var xpos = (((dragRect.left * window.devicePixelRatio) + (dragRect.right * window.devicePixelRatio)) / 2) - (mapRect.left * window.devicePixelRatio);\r\n            var ypos = (dragRect.bottom * window.devicePixelRatio) - (mapRect.top * window.devicePixelRatio);\r\n            var coords = ctl.map.wrap.getCoordinateFromPixel([xpos, ypos]);\r\n            ctl.callback(coords);\r\n        }\r\n        else {\r\n            reset(ctl);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        if (!self.viewDiv) {\r\n            self.viewDiv = TC.Util.getDiv(self.options.viewDiv);\r\n            self.viewDiv.classList.add(self.CLASS + '-view', TC.Consts.classes.HIDDEN);\r\n            if (!self.options.viewDiv) {\r\n                map.div.insertAdjacentElement('beforebegin', self.viewDiv);\r\n            }\r\n        }\r\n\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n\r\n        const googleMapsKey = self.options.googleMapsKey || map.options.googleMapsKey;\r\n        if (googleMapsKey) {\r\n            gMapsUrl += '&key=' + googleMapsKey;\r\n        }\r\n\r\n        self.layer = null;\r\n        var layerId = self.getUID();\r\n        for (var i = 0; i < map.workLayers.length; i++) {\r\n            var layer = map.workLayers[i];\r\n            if (layer.type === TC.Consts.layerType.VECTOR && layer.id === layerId) {\r\n                self.layer = layer;\r\n                break;\r\n            }\r\n        }\r\n        if (!self.layer) {\r\n            map.loaded(function () {\r\n                map.addLayer({\r\n                    id: layerId,\r\n                    owner: self,\r\n                    stealth: true,\r\n                    type: TC.Consts.layerType.VECTOR\r\n                }).then(function (layer) {\r\n                    self.layer = layer;\r\n                });\r\n            });\r\n        }\r\n\r\n        self.renderPromise().then(function () {\r\n            TC.loadJS(\r\n                !window.Draggabilly,\r\n                [TC.apiLocation + TC.Consts.url.DRAGGABILLY],\r\n                function () {\r\n                    const drag = new Draggabilly(self.div.querySelector('.' + self.CLASS + '-drag'), {\r\n                        containment: self.map.div\r\n                    });\r\n                    drag.on('dragStart', function (e) {\r\n                        preset(self);\r\n                    });\r\n                    drag.on('dragEnd', function (e) {\r\n                        resolve(self);\r\n                        drag.setPosition(0, 0);\r\n                    });\r\n                }\r\n            );\r\n\r\n            const view = self.viewDiv;\r\n            view.querySelector('.' + self.CLASS + '-btn-close').addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                e.stopPropagation();\r\n                self.closeView();\r\n            }, { passive: true });\r\n        }\r\n            , function (a, b, c) {\r\n                TC.error(\"Error de renderizado StreetView\");\r\n            });\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n\r\n    ctlProto.render = function () {\r\n        const self = this;\r\n\r\n        return self._set1stRenderPromise(new Promise(function (resolve, reject) {\r\n            self.renderData(null, function () {\r\n                self.getRenderedHtml(self.CLASS + '-view', null).then(function (out) {\r\n                    //lo normal sería hacer el resolve después de volcar out en viewDiv\r\n                    //pero a veces fallaba\r\n                    //no se detonaba, sin dar error alguno\r\n                    //así que lo arreglo como a mí me gusta:\r\n                    setTimeout(function () {\r\n                        self.viewDiv.innerHTML = out;\r\n                        resolve(self);\r\n                    }\r\n                        , 300);\r\n\r\n\r\n                    //console.log(\"Casi resuelto... \" + out.length);\r\n                    //self._$viewDiv.html(out);\r\n                    //if (err)\r\n                    //{\r\n                    //    TC.error(err);\r\n                    //}\r\n                    //resolve(self);\r\n                    //console.log(\"Resuelto!\");\r\n\r\n                })\r\n                    .catch(function (err) {\r\n                        TC.error(err);\r\n                    });\r\n            });\r\n        }));\r\n    };\r\n\r\n    var waitId = 0;\r\n\r\n    ctlProto.callback = function (coords) {\r\n        var self = this;\r\n        var geogCrs = 'EPSG:4326';\r\n\r\n        var ondrop = function (feature) {\r\n            if (self._sv) {\r\n                var bounds = feature.getBounds();                \r\n                lonLat = TC.Util.reproject([(bounds[0] + bounds[2]) / 2, (bounds[1] + bounds[3]) / 2], self.map.crs, geogCrs);                \r\n                self._sv.setPosition({ lng: lonLat[0], lat: lonLat[1] });\r\n            }\r\n        }\r\n\r\n        var ondrag = function (feature) {\r\n            if (self._sv) {\r\n                var bounds = feature.getBounds();\r\n                self._startLonLat = TC.Util.reproject([(bounds[0] + bounds[2]) / 2, (bounds[1] + bounds[3]) / 2], self.map.crs, geogCrs);\r\n            }\r\n        }\r\n\r\n        var li = self.map.getLoadingIndicator();\r\n        if (li) {\r\n            waitId = li.addWait(waitId);\r\n        }\r\n\r\n        const mapDiv = self.map.div;\r\n\r\n        var setMarker = function (sv, center) {\r\n            self.layer.clearFeatures();\r\n\r\n            var xy;\r\n            var heading;\r\n            if (sv) {\r\n                var latLon = sv.getPosition();\r\n                xy = TC.Util.reproject([latLon.lng(), latLon.lat()], geogCrs, self.map.crs);\r\n                heading = sv.getPov().heading;\r\n            }\r\n            else {\r\n                xy = coords;\r\n                heading = 0;\r\n            }\r\n            self.map.addMarker(xy, {\r\n                cssClass: 'tc-marker-sv-' + (Math.round(16.0 * heading / 360) + 16) % 16,\r\n                width: 48,\r\n                height: 48,\r\n                anchor: [0.4791666666666667, 0.7083333333333333],\r\n                layer: self.layer,\r\n                showsPopup: false\r\n            });\r\n            Promise.all(self.map._markerPromises).then(function () {\r\n                // Para poder arrastrar a pegman                \r\n                self.layer.wrap.setDraggable(true, ondrop, ondrag);\r\n            });\r\n\r\n            if (center) {\r\n                var setCenter = function () {\r\n                    self.map.setCenter(xy);\r\n                };\r\n                // Esperamos a que el mapa esté colapsado para centrarnos: ahorramos ancho de banda\r\n                if (mapDiv.classList.contains(TC.Consts.classes.COLLAPSED)) {\r\n                    setCenter();\r\n                }\r\n                else {\r\n                    setTimeout(setCenter, 1200);\r\n                }\r\n            }\r\n        };\r\n\r\n        TC.loadJS(\r\n            !window.google || !google.maps,\r\n            gMapsUrl,\r\n            function () {\r\n\r\n                if (window.google) {\r\n\r\n                    setMarker();\r\n\r\n                    const view = self.viewDiv;\r\n                    const lonLat = TC.Util.reproject(coords, self.map.crs, geogCrs);\r\n                    const mapsLonLat = new google.maps.LatLng(lonLat[1], lonLat[0]);\r\n\r\n                    // Comprobamos si hay datos de SV en el sitio elegido.\r\n                    const svService = new google.maps.StreetViewService();\r\n                    svService.getPanorama({\r\n                        location: mapsLonLat,\r\n                        preference: google.maps.StreetViewPreference.BEST\r\n                    }, function (svPanoramaData, svStatus) {\r\n                        if (svStatus !== google.maps.StreetViewStatus.OK) {\r\n                            if (li) {\r\n                                li.removeWait(waitId);\r\n                            }\r\n                            setTimeout(function () { // Timeout para dar tiempo a ocultarse a LoadingIndicator\r\n                                TC.alert(svStatus === google.maps.StreetViewStatus.ZERO_RESULTS ? self.getLocaleString('noStreetView') : self.getLocaleString('streetViewUnknownError'));\r\n                                self.layer.wrap.setDraggable(false);\r\n                                reset(self);\r\n                            }, 100);\r\n                        }\r\n                        else {\r\n                            const onTransitionend = function (e) {\r\n                                if (!self._transitioning) {\r\n                                    return;\r\n                                }\r\n\r\n                                if (e.propertyName === 'width' || e.propertyName === 'height') {\r\n\r\n                                    self._transitioning = false;\r\n\r\n                                    if (li) {\r\n                                        li.removeWait(waitId);\r\n                                    }\r\n\r\n                                    const resizeEvent = document.createEvent('HTMLEvents');\r\n                                    resizeEvent.initEvent('resize', false, false);\r\n                                    mapDiv.dispatchEvent(resizeEvent);\r\n\r\n                                    dispatchCanvasResize.call(self);\r\n                                    view.removeEventListener('transitionend', onTransitionend);\r\n\r\n                                    var svOptions = {\r\n                                        position: mapsLonLat,\r\n                                        pov: {\r\n                                            heading: 0,\r\n                                            pitch: 0\r\n                                        },\r\n                                        zoom: 1,\r\n                                        fullscreenControl: false,\r\n                                        zoomControlOptions: {\r\n                                            position: google.maps.ControlPosition.LEFT_TOP\r\n                                        },\r\n                                        panControlOptions: {\r\n                                            position: google.maps.ControlPosition.LEFT_TOP\r\n                                        },\r\n                                        imageDateControl: true\r\n                                    };\r\n\r\n                                    if (!self._sv) {\r\n                                        self._sv = new google.maps.StreetViewPanorama(view, svOptions);\r\n                                        google.maps.event.addListener(self._sv, 'position_changed', function () {\r\n                                            setMarker(self._sv, view.classList.contains(TC.Consts.classes.VISIBLE));\r\n                                        });\r\n                                        google.maps.event.addListener(self._sv, 'pov_changed', function () {\r\n                                            if (self.layer.features && self.layer.features.length > 0) {\r\n                                                var pegmanMarker = self.layer.features[0];\r\n\r\n                                                delete pegmanMarker.options.url;\r\n                                                pegmanMarker.options.cssClass = 'tc-marker-sv-' + ((Math.round(16.0 * self._sv.getPov().heading / 360) + 16) % 16);\r\n                                                pegmanMarker.setStyle(pegmanMarker.options);\r\n                                            }\r\n                                        });\r\n                                        google.maps.event.addListener(self._sv, 'status_changed', function () {\r\n                                            var svStatus = self._sv.getStatus();\r\n\r\n                                            if (svStatus !== google.maps.StreetViewStatus.OK) {\r\n                                                self._sv.setVisible(false);\r\n                                                TC.alert(svStatus === google.maps.StreetViewStatus.ZERO_RESULTS ? self.getLocaleString('noStreetView') : self.getLocaleString('streetViewUnknownError'));\r\n                                                if (self._startLonLat) {\r\n                                                    self._sv.setVisible(true);\r\n                                                    self._sv.setPosition({ lng: self._startLonLat[0], lat: self._startLonLat[1] });\r\n                                                }\r\n                                                else {\r\n                                                    self.layer.wrap.setDraggable(false);\r\n                                                    self.closeView();\r\n                                                }\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        self._sv.setOptions(svOptions);\r\n                                        self._sv.setVisible(true);\r\n                                    }\r\n                                }\r\n                            };\r\n\r\n                            self._transitioning = true;\r\n                            view.addEventListener('transitionend', onTransitionend);\r\n\r\n                            if (!self.options.viewDiv) {\r\n                                // No había definida una vista. Para hacer el control compatible con mapas incrustados,\r\n                                // en este caso a la vista nueva le asignamos el tamaño del mapa.\r\n                                const mapRect = mapDiv.getBoundingClientRect();\r\n                                self.viewDiv.style.height = mapRect.height + 'px';\r\n                                self.viewDiv.style.width = mapRect.width + 'px';\r\n                            }\r\n                            mapDiv.classList.add(TC.Consts.classes.COLLAPSED);\r\n                            view.style.left = '';\r\n                            view.style.top = '';\r\n                            view.classList.remove(TC.Consts.classes.HIDDEN);\r\n                            view.classList.add(TC.Consts.classes.VISIBLE);\r\n\r\n\r\n                            // Por si no salta transitionend\r\n                            setTimeout(function () {\r\n                                onTransitionend({ propertyName: 'width' });\r\n                            }, 1000);\r\n\r\n                            const header = document.body.querySelector('header');\r\n                            if (header) {\r\n                                header.style.display = 'none';\r\n                            }\r\n\r\n                            //apagar lo que sea que esté encendido (probablemente featInfo)\r\n                            //al cerrar con el aspa, volverá a detonarse StreetView.deactivate()\r\n                            //que, a su vez, restaurará el control anterior (FeatureInfo)\r\n                            if (self.map.activeControl) {\r\n                                self._previousActiveControl = self.map.activeControl;\r\n                                self.map.activeControl.deactivate(true);\r\n                            }\r\n\r\n                            setMarker(self._sv);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    reset(self);\r\n                }\r\n            }, false, true);\r\n    };\r\n\r\n    ctlProto.closeView = function () {\r\n        const self = this;\r\n        const mapDiv = self.map.div;\r\n        const view = self.viewDiv;\r\n\r\n        const endProcess = function () {\r\n            mapDiv.classList.remove(TC.Consts.classes.COLLAPSED);\r\n            const resizeEvent = document.createEvent('HTMLEvents');\r\n            resizeEvent.initEvent('resize', false, false);\r\n            mapDiv.dispatchEvent(resizeEvent); // Para evitar que salga borroso el mapa tras cerrar SV.\r\n        };\r\n        const transitionend = 'transitionend';\r\n        const onTransitionend = function (e) {\r\n            if (e.propertyName === 'width' || e.propertyName === 'height') {\r\n                view.removeEventListener(transitionend, onTransitionend);\r\n                endProcess();\r\n            }\r\n        };\r\n        view.removeEventListener(transitionend, onTransitionend);\r\n        view.addEventListener(transitionend, onTransitionend);\r\n        setTimeout(endProcess, 1000); // backup por si falla la transición.\r\n\r\n        if (!self.options.viewDiv) {\r\n            // No había definida una vista. Para hacer el control compatible con mapas incrustados,\r\n            // en este caso a la vista nueva le habíamos asignado el tamaño del mapa.\r\n            self.viewDiv.style.removeProperty('height');\r\n            self.viewDiv.style.removeProperty('width');\r\n        }\r\n        view.classList.add(TC.Consts.classes.HIDDEN);\r\n        view.classList.remove(TC.Consts.classes.VISIBLE);\r\n        self.div.querySelector('.' + self.CLASS + '-drag').classList.remove(TC.Consts.classes.HIDDEN);\r\n        self.layer.wrap.setDraggable(false);\r\n        reset(self);\r\n        self._sv.setVisible(false);\r\n        const header = document.body.querySelector('header');\r\n        if (header) {\r\n            header.style.display = '';\r\n        }\r\n\r\n        if (self._previousActiveControl) {\r\n            self._previousActiveControl.activate();\r\n        }\r\n    };\r\n})();"]}