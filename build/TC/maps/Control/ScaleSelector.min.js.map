{"version":3,"sources":["control/ScaleSelector.js"],"names":["TC","control","Scale","syncLoadJS","apiLocation","ScaleSelector","apply","this","arguments","scales","inherit","ctlProto","prototype","CLASS","template","1","container","depth0","helpers","partials","data","stack1","alias1","escapeExpression","alias2","nullContext","lookupProperty","parent","propertyName","Object","hasOwnProperty","call","lambda","name","hash","loc","start","line","column","end","fn","program","inverse","noop","2","compiler","main","useData","render","callback","self","_set1stRenderPromise","Promise","resolve","reject","map","options","resolutions","getScale","wrap","getResolutions","renderData","scale","screenSize","Cfg","div","querySelectorAll","forEach","option","textContent","format","substr","querySelector","addEventListener","Consts","event","CLICK","setScreenSize","passive","setScale","value","Util","isFunction","catch","err","Error","getMap","then","result","getDpi","window","devicePixelRatio","metersPerDegree","setResolution"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.control.Scale) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/Scale');\r\n}\r\n\r\nTC.control.ScaleSelector = function () {\r\n    var self = this;\r\n\r\n    TC.control.Scale.apply(self, arguments);\r\n\r\n    self.scales = null;\r\n};\r\n\r\nTC.inherit(TC.control.ScaleSelector, TC.control.Scale);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.ScaleSelector.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-ss';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/tc-ctl-ss.hbs\";\r\n\r\n    ctlProto.render = function (callback) {\r\n        var self = this;\r\n        return self._set1stRenderPromise(new Promise(function (resolve, reject) {\r\n            if (self.map) {\r\n                if (!self.scales && self.map.options.resolutions) {\r\n                    self.scales = self.map.options.resolutions.map(self.getScale, self);\r\n                }\r\n                var render = function () {\r\n                    self.scales = self.map.wrap.getResolutions().map(self.getScale, self);\r\n                    self.renderData({ scale: self.getScale(), screenSize: TC.Cfg.screenSize, scales: self.scales }, function () {\r\n\r\n                        self.div.querySelectorAll('option').forEach(function (option) {\r\n                            option.textContent = '1:' + self.format(option.textContent.substr(2));\r\n                        });\r\n\r\n                        self.div.querySelector('input[type=\"button\"]').addEventListener(TC.Consts.event.CLICK, function () {\r\n                            self.setScreenSize();\r\n                        }, { passive: true });\r\n\r\n                        self.div.querySelector('select').addEventListener('change', function () {\r\n                            self.setScale(this.value);\r\n                        });\r\n                        if (TC.Util.isFunction(callback)) {\r\n                            callback();\r\n                        }\r\n                        resolve();\r\n                    }).catch(function (err) {\r\n                        reject(err instanceof Error ? err : Error(err));\r\n                    });\r\n                };\r\n                if (self.scales) {\r\n                    render();\r\n                }\r\n                else {\r\n                    self.map.wrap.getMap().then(render);\r\n                }\r\n            }\r\n            else {\r\n                reject(Error('ScaleSelector no registrado'));\r\n            }\r\n        }));\r\n    };\r\n\r\n    /*\r\n    *  setScale: Sets the resolution of the map from a scale denominator and estimated screen DPI\r\n    *  Parameters: number, the scale denominator\r\n    *  Returns: number, the resolution\r\n    */\r\n    ctlProto.setScale = function (scale) {\r\n        var self = this;\r\n        var result = scale * .0254 / self.getDpi(TC.Cfg.screenSize);\r\n        if (window.devicePixelRatio) {\r\n            result = result / window.devicePixelRatio;\r\n        }\r\n        if (self.metersPerDegree) {\r\n            result = result / self.metersPerDegree;\r\n        }\r\n        self.map.wrap.setResolution(result);\r\n        return result;\r\n    };\r\n\r\n})();"]}