{"version":3,"sources":["control/DrawMeasureModify.js"],"names":["TC","control","Measure","syncLoadJS","apiLocation","DrawMeasureModify","self","this","apply","arguments","_dialogDiv","Util","getDiv","options","dialogDiv","window","$","_$dialogDiv","document","body","appendChild","cs","_classSelector","CLASS","_selectors","ELEVATION_CHECKBOX","persistentDrawControls","renderPromise","then","_1stCoordText","div","querySelector","_2ndCoordText","_1stCoordValue","_2ndCoordValue","_elevationText","_elevationValue","inherit","ctlProto","prototype","Consts","event","RESULTSPANELCLOSE","FEATURESSELECT","template","compiler","main","container","depth0","helpers","partials","data","alias1","nullContext","alias2","escapeExpression","alias3","lambda","lookupProperty","parent","propertyName","Object","hasOwnProperty","call","name","hash","loc","start","line","column","end","useData","render","callback","_set1stRenderPromise","_clearBtn","addEventListener","CLICK","e","confirm","getLocaleString","clear","passive","_downloadBtn","showSketchDownloadDialog","_elevProfileBtn","elevationProfileActive","deactivateElevationProfile","activateElevationProfile","displayElevation","style","display","isFunction","register","map","Promise","resolve","reject","pointDrawControlId","getUID","modifyId","all","layerPromise","getElevationTool","objects","layer","title","_modifyPromise","addControl","id","modify","on","getElevationControl","ctl","resultsPanel","features","some","feature","currentFeature","setCurrentFeature","length","showMeasurements","getFeatureMeasureData","_originalStyle","getStyle","Polygon","displayMode","geom","POLYGON","polygonDrawControl","setStrokeColorWatch","strokeColor","setStrokeWidthWatch","strokeWidth","Polyline","POLYLINE","lineDrawControl","displayElevationProfile","Point","POINT","pointDrawControl","setFontColorWatch","fontColor","setFontSizeWatch","fontSize","FEATURESUNSELECT","getSelectedFeatures","resetDrawWatches","resetElevationProfile","close","FEATUREMODIFY","setMeasures","measureData","setFeatureMeasureData","tool","setGeometry","crs","getControlsByClass","forEach","pu","isVisible","hide","CONTROLDEACTIVATE","POPUP","indexOf","isMinimized","maximize","PROJECTIONCHANGE","elevationChartData","coords","reproject","oldCrs","newCrs","_lineDrawControlPromise","DRAWSTART","resetValues","DRAWUNDO","DRAWREDO","historyIndex","history","slice","closeElevationProfile","DRAWEND","lastCoord","point","push","STYLECHANGE","onStyleChange","_polygonDrawControlPromise","_pointDrawControlPromise","mode","persistent","styling","containerControl","drawControls","updateChanges","feat","geometry","units","wrap","isGeo","DRAWCANCEL","setTimeout","cancel","exportsState","_elevationControlPromise","setMode","FEATUREADD","displayLabelText","label","disabled","FEATUREREMOVE","FEATURESCLEAR","catch","error","_activeMode","classList","remove","classes","COLLAPSED","activate","firstCoordText","innerHTML","secondCoordText","elevationText","textContent","trim","CRS","substr","parseFloat","dataset","value","setData","_len","NOMEASURE","_area","_peri","result","measureOptions","utmCrs","area","getArea","perimeter","getLength","locale","Cfg","precision","coord1","coord2","METER_PRECISION","DEGREE_PRECISION","factor","Math","pow","round","val","formatNumber","toFixed","elevation","toLowerCase","clearFeatures","isActive","deactivate","getDownloadDialog","fileName","replace","getFormattedDate","Date","toString","assign","open","featureCtor","target","styleOptions","property","setStyle","async","add","ACTIVE","setAttribute","profileDrawn","elevationControl","getActiveFeatures","filter","show","resultsPanelChart","x","ele","upHill","downHill","openChart"],"mappings":"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","sourcesContent":["\r\n/**\r\n  * Opciones del control de dibujo, medida y modificación de geometrías en el mapa.\r\n  * @typedef DrawMeasureModifyOptions\r\n  * @ignore\r\n  * @extends ControlOptions\r\n  * @see MapControlOptions\r\n  * @property {HTMLElement|string} [div] - Elemento del DOM en el que crear el control o valor de atributo id de dicho elemento.\r\n  * @property {boolean|ElevationOptions} [displayElevation=false] - Si se establece a un valor verdadero, los puntos dibujados mostrarán la elevación del mapa en las \r\n  * coordenadas del punto, y las líneas dibujadas mostrarán un gráfico con su perfil de elevación.\r\n  * @property {string} [mode] - Modo de dibujo, es decir, qué tipo de geometría se va a dibujar.\r\n  * \r\n  * Para establecer el modo hay que darle un valor de {@link SITNA.Consts.geom}. Este control tiene tres modos: \r\n  * punto, línea y polígono, correspondientes con los valores {@link SITNA.Consts.geom.POINT}, \r\n  * {@link SITNA.Consts.geom.POLYLINE} y {@link SITNA.Consts.geom.POLYGON}.\r\n  * \r\n  * Si esta opción no se especifica, se mostrarán los tres modos en tres pestañas de la interfaz de usuario del control.\r\n  * @example <caption>[Ver en vivo](../examples/cfg.DrawMeasureModifyOptions.html)</caption> {@lang html}\r\n  * <div id=\"mapa\"/>\r\n  * <script>\r\n  *     // Establecemos un layout simplificado apto para hacer demostraciones de controles.\r\n  *     SITNA.Cfg.layout = \"layout/ctl-container\";\r\n  *     // Añadimos el control de dibujo, medida y modificación de geometrías en el primer contenedor.\r\n  *     SITNA.Cfg.controls.drawMeasureModify = {\r\n  *         div: \"slot1\",\r\n  *         displayElevation: { // Se mostrarán elevaciones en los resultados de medida\r\n  *             resolution: 10 // se mostrará un punto en el perfil cada 10 metros\r\n  *         }\r\n  *     };\r\n  *     var map = new SITNA.Map(\"mapa\");\r\n  * </script>\r\n  */\r\n\r\nTC.control = TC.control || {};\r\n\r\nif (!TC.control.Measure) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/Measure');\r\n}\r\n\r\nTC.control.DrawMeasureModify = function () {\r\n    var self = this;\r\n\r\n    TC.control.Measure.apply(self, arguments);\r\n\r\n    self._dialogDiv = TC.Util.getDiv(self.options.dialogDiv);\r\n    if (window.$) {\r\n        self._$dialogDiv = $(self._dialogDiv);\r\n    }\r\n    if (!self.options.dialogDiv) {\r\n        document.body.appendChild(self._dialogDiv);\r\n    }\r\n\r\n    const cs = self._classSelector = '.' + self.CLASS;\r\n    self._selectors = {\r\n        ELEVATION_CHECKBOX: cs + '-dialog-elev input[type=checkbox]'\r\n    };\r\n\r\n    self.persistentDrawControls = true;\r\n\r\n    self.renderPromise().then(function () {\r\n        self._1stCoordText = self.div.querySelector('.tc-ctl-meas-val-coord-1-t');\r\n        self._2ndCoordText = self.div.querySelector('.tc-ctl-meas-val-coord-2-t');\r\n        self._1stCoordValue = self.div.querySelector('.tc-ctl-meas-val-coord-1-v');\r\n        self._2ndCoordValue = self.div.querySelector('.tc-ctl-meas-val-coord-2-v');\r\n        self._elevationText = self.div.querySelector('.tc-ctl-meas-val-coord-ele-t');\r\n        self._elevationValue = self.div.querySelector('.tc-ctl-meas-val-coord-ele-v');\r\n    });\r\n\r\n};\r\n\r\nTC.inherit(TC.control.DrawMeasureModify, TC.control.Measure);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.DrawMeasureModify.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-dmm';\r\n\r\n    TC.Consts.event.RESULTSPANELCLOSE = TC.Consts.event.RESULTSPANELCLOSE || 'resultspanelclose.tc';\r\n    TC.Consts.event.FEATURESSELECT = TC.Consts.event.FEATURESSELECT || \"featuresselect.tc\";\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/tc-ctl-dmm.hbs\";        \r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        const promise = self._set1stRenderPromise(TC.control.Measure.prototype.render.call(self, function () {\r\n            self._clearBtn = self.div.querySelector('.tc-ctl-dmm-cmd button.tc-ctl-dmm-btn-clr');\r\n            self._clearBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                TC.confirm(self.getLocaleString('deleteAll.confirm'), function () {\r\n                    self.clear();\r\n                });\r\n            }, { passive: true });\r\n            self._downloadBtn = self.div.querySelector('.tc-ctl-dmm-cmd button.tc-ctl-dmm-btn-dl');\r\n            self._downloadBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                self.showSketchDownloadDialog();\r\n            }, { passive: true });\r\n\r\n            self._elevProfileBtn = self.div.querySelector('.tc-ctl-meas-prof-btn');\r\n            self._elevProfileBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                self.elevationProfileActive ? self.deactivateElevationProfile() : self.activateElevationProfile();\r\n            }, { passive: true });\r\n\r\n            if (!self.options.displayElevation) {\r\n                self._elevProfileBtn.style.display = 'none';\r\n            }\r\n\r\n            if (TC.Util.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        }));\r\n        \r\n        return promise;\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            TC.control.Measure.prototype.register.call(self, map).then(function () {\r\n                const pointDrawControlId = self.getUID();\r\n                const modifyId = self.getUID();\r\n\r\n                Promise.all([self.layerPromise, self.renderPromise(), self.getElevationTool()]).then(function (objects) {\r\n                    const layer = objects[0];\r\n                    self.elevationProfileActive = !!objects[2];\r\n                    layer.title = self.getLocaleString('sketch');\r\n\r\n                    self._modifyPromise = map.addControl('modify', {\r\n                        id: modifyId,\r\n                        div: self.div.querySelector('.' + self.CLASS + '-mod'),\r\n                        layer: layer\r\n                    });\r\n\r\n                    self._modifyPromise.then(function (modify) {\r\n\r\n                        self.modify = modify;\r\n                        modify\r\n                            .on(TC.Consts.event.FEATURESSELECT, function (e) {\r\n                                self.getElevationControl().then(function (ctl) {\r\n                                    if (ctl.resultsPanel && !e.features.some(function (feature) {\r\n                                        return ctl.resultsPanel.currentFeature === feature;\r\n                                    })) {\r\n                                        ctl.resultsPanel.setCurrentFeature(null);\r\n                                    }\r\n                                    const feature = e.features[e.features.length - 1];\r\n                                    if (feature) {\r\n                                        self.showMeasurements(self.getFeatureMeasureData(feature));\r\n                                        const style = feature._originalStyle || feature.getStyle();\r\n                                        switch (true) {\r\n                                            case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                                                self.displayMode(TC.Consts.geom.POLYGON);\r\n                                                self.polygonDrawControl\r\n                                                    .setStrokeColorWatch(style.strokeColor)\r\n                                                    .setStrokeWidthWatch(style.strokeWidth);\r\n                                                break;\r\n                                            case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                                                self.displayMode(TC.Consts.geom.POLYLINE);\r\n                                                self.lineDrawControl\r\n                                                    .setStrokeColorWatch(style.strokeColor)\r\n                                                    .setStrokeWidthWatch(style.strokeWidth);\r\n                                                if (self.elevationProfileActive) {\r\n                                                    ctl.displayElevationProfile(feature);\r\n                                                }\r\n                                                break;\r\n                                            case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                                                self.displayMode(TC.Consts.geom.POINT);\r\n                                                self.pointDrawControl\r\n                                                    .setStrokeColorWatch(style.strokeColor)\r\n                                                    .setStrokeWidthWatch(style.strokeWidth);\r\n                                                break;\r\n                                            default:\r\n                                                break;\r\n                                        }\r\n                                        self.modify\r\n                                            .setFontColorWatch(style.fontColor)\r\n                                            .setFontSizeWatch(style.fontSize);\r\n                                    }\r\n                                });\r\n                            })\r\n                            .on(TC.Consts.event.FEATURESUNSELECT, function (e) {\r\n                                const features = self.modify.getSelectedFeatures();\r\n                                if (!features.length) {\r\n                                    self.resetDrawWatches();\r\n                                }\r\n                                self.getElevationControl().then(function (ctl) {\r\n                                    ctl.resetElevationProfile();\r\n                                    if (ctl.resultsPanel) {\r\n                                        ctl.resultsPanel.close();\r\n                                    }\r\n                                });\r\n                            })\r\n                            .on(TC.Consts.event.FEATUREMODIFY, function (e) {\r\n                                if (e.layer === self.layer) {\r\n                                    const setMeasures = function (feature) {\r\n                                        const measureData = self.getFeatureMeasureData(feature);\r\n                                        self.showMeasurements(measureData);\r\n                                        self.setFeatureMeasureData(feature);\r\n                                    };\r\n                                    setMeasures(e.feature);\r\n\r\n                                    // Si es un punto metemos la elevación en la geometría (porque la mostramos en las medidas)\r\n                                    if (TC.feature.Point && e.feature instanceof TC.feature.Point) {\r\n                                        self.getElevationTool().then(function (tool) {\r\n                                            if (tool) {\r\n                                                tool.setGeometry({\r\n                                                    features: [e.feature],\r\n                                                    crs: self.map.crs\r\n                                                }).then(function (features) {\r\n                                                    setMeasures(features[0]);\r\n                                                });\r\n                                            }\r\n                                        });\r\n                                    }\r\n\r\n                                    const popups = self.map.getControlsByClass('TC.control.Popup');\r\n                                    popups.forEach(function (pu) {\r\n                                        if (pu.currentFeature === e.feature && pu.isVisible()) {\r\n                                            pu.hide();\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n\r\n                        map\r\n                            .on(TC.Consts.event.CONTROLDEACTIVATE, function (e) {\r\n                                const control = e.control;\r\n                                if (control === self.modify || control === self.lineDrawControl) {\r\n                                    self.resetDrawWatches();\r\n                                    self.getElevationControl().then(function (ctl) {\r\n                                        ctl.resetElevationProfile();\r\n                                        if (ctl.resultsPanel) {\r\n                                            if (control === self.modify) {\r\n                                                ctl.resultsPanel.setCurrentFeature(null);\r\n                                            }\r\n                                            ctl.resultsPanel.close();\r\n                                        }\r\n                                    });\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.POPUP, function (e) {\r\n                                // En líneas queremos mostrar el perfil en vez del popup\r\n                                const feature = e.control.currentFeature;\r\n                                if (TC.feature.Polyline && feature instanceof TC.feature.Polyline && self.layer.features.indexOf(feature) >= 0) {\r\n                                    if (self.elevationProfileActive) {\r\n                                        e.control.hide();\r\n                                        self.getElevationControl().then(function (ctl) {\r\n                                            if (ctl.resultsPanel) {\r\n                                                ctl.resultsPanel.setCurrentFeature(feature);\r\n                                                if (ctl.resultsPanel.isMinimized()) {\r\n                                                    ctl.resultsPanel.maximize();\r\n                                                }\r\n                                            }\r\n                                            ctl.displayElevationProfile(feature);\r\n                                        });\r\n                                    }\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.PROJECTIONCHANGE, function (e) {\r\n                                if (self.elevationChartData) {\r\n                                    self.elevationChartData.coords = TC.Util.reproject(self.elevationChartData.coords, e.oldCrs, e.newCrs);\r\n                                }\r\n                            });\r\n\r\n                    });\r\n\r\n                    self._lineDrawControlPromise.then(function (lineDrawControl) {\r\n                        lineDrawControl\r\n                            .on(TC.Consts.event.DRAWSTART, function () {\r\n                                //self.resetElevationProfile();\r\n                                self.getElevationControl().then(function (ctl) {\r\n                                    if (ctl.resultsPanel && ctl.resultsPanel.currentFeature) {\r\n                                        ctl.resultsPanel.setCurrentFeature(null);\r\n                                    }\r\n                                    self.resetValues();\r\n                                });\r\n                            })\r\n                            .on(TC.Consts.event.DRAWUNDO + ' ' + TC.Consts.event.DRAWREDO, function () {\r\n                                const lineDrawControl = this;\r\n                                self.getElevationControl().then(function (ctl) {\r\n                                    if (self.elevationProfileActive) {\r\n                                        if (lineDrawControl.historyIndex) {\r\n                                            ctl.displayElevationProfile(lineDrawControl.history.slice(0, lineDrawControl.historyIndex));\r\n                                        }\r\n                                        else {\r\n                                            ctl.closeElevationProfile();\r\n                                        }\r\n                                    }\r\n                                });\r\n                            })\r\n                            .on(TC.Consts.event.DRAWEND, function (e) {\r\n                                self.getElevationControl().then(function (ctl) {\r\n                                    if (ctl.resultsPanel) {\r\n                                        ctl.resultsPanel.currentFeature = e.feature;\r\n                                    }\r\n                                });\r\n                            })\r\n                            .on(TC.Consts.event.POINT, function (e) {\r\n                                const lineDrawControl = this;\r\n                                const coords = lineDrawControl.history.slice(0, lineDrawControl.historyIndex);\r\n                                const lastCoord = coords[coords.length - 1];\r\n                                if (lastCoord[0] !== e.point[0] || lastCoord[1] !== e.point[1]) {\r\n                                    coords.push(e.point);\r\n                                }\r\n                                self.getElevationControl().then(function (ctl) {\r\n                                    if (self.elevationProfileActive) {\r\n                                        ctl.displayElevationProfile(coords);\r\n                                    }\r\n                                });\r\n                            })\r\n                            .on(TC.Consts.event.STYLECHANGE, function (e) {\r\n                                self.onStyleChange(e);\r\n                            });\r\n                    });\r\n\r\n                    self._polygonDrawControlPromise.then(function (polygonDrawControl) {\r\n                        polygonDrawControl\r\n                            .on(TC.Consts.event.DRAWSTART, function () {\r\n                                self.resetValues();\r\n                            })\r\n                            //.on(TC.Consts.event.DRAWEND, function (e) {\r\n                            //    self.getElevationTool().then(function (tool) {\r\n                            //        if (tool) {\r\n                            //            tool.setGeometry({\r\n                            //                features: [e.feature],\r\n                            //                crs: self.map.crs\r\n                            //            });\r\n                            //        }\r\n                            //    }\r\n                            //})\r\n                            .on(TC.Consts.event.STYLECHANGE, function (e) {\r\n                                self.onStyleChange(e);\r\n                            });\r\n                    });  \r\n                    self._pointDrawControlPromise = map.addControl('draw', {\r\n                        id: pointDrawControlId,\r\n                        div: self.div.querySelector('.' + TC.control.Measure.prototype.CLASS + '-point'),\r\n                        mode: TC.Consts.geom.POINT,\r\n                        persistent: self.persistentDrawControls,\r\n                        styling: true,\r\n                        layer: self.layer\r\n                    });\r\n\r\n                    self._pointDrawControlPromise.then(function (pointDrawControl) {\r\n\r\n                        pointDrawControl.containerControl = self;\r\n                        self.drawControls.push(pointDrawControl);\r\n                        self.pointDrawControl = pointDrawControl;\r\n\r\n                        self.resetValues();\r\n\r\n                        pointDrawControl\r\n                            .on(TC.Consts.event.DRAWEND, function (e) {\r\n                                const updateChanges = function (feat) {\r\n                                    self.showMeasurements({ coords: feat.geometry, units: map.wrap.isGeo() ? 'degrees' : 'm' });\r\n                                    self.setFeatureMeasureData(feat);\r\n                                };\r\n                                updateChanges(e.feature);\r\n                                self.getElevationTool().then(function (tool) {\r\n                                    if (tool) {\r\n                                        tool.setGeometry({\r\n                                            features: [e.feature],\r\n                                            crs: self.map.crs\r\n                                        }).then(function (features) {\r\n                                            updateChanges(features[0]);\r\n                                        })\r\n                                    }\r\n                                })\r\n                            })\r\n                            .on(TC.Consts.event.DRAWCANCEL, function (e) {\r\n                                // Alerta de condición de carrera si no ponemos un timeout:\r\n                                // 1- Se llama a cancel de un control Draw.\r\n                                // 2- Se llama a deactivate (como es mediante cancel, no se se corta la cadena de activación controles).\r\n                                // 3- Si el control activo anterior era otro de los modos de dibujo de Measure, se activa.\r\n                                // 4- Se llama a cancel desde aquí.\r\n                                // 5- Se llama a deactivate del control que acabamos de activar en 3.\r\n                                // El activate de 3 y el deactivate de 5 sobre el mismo control entran en condición de carrera al crear/destruir la interaction\r\n                                // por tanto se puede quedar en un estado inconsistente. Para evitar eso, separamos 3 de 5 por el siguiente timeout.\r\n                                setTimeout(function () {\r\n                                    self.cancel();\r\n                                }, 100);\r\n                            })\r\n                            .on(TC.Consts.event.STYLECHANGE, function (e) {\r\n                                self.onStyleChange(e);\r\n                            });\r\n                        // Desactivamos el método exportState que ya se encarga el control padre de ello\r\n                        pointDrawControl.exportsState = false;\r\n                    });\r\n\r\n                    self._elevationControlPromise = map.addControl('elevation', self.options.displayElevation);\r\n\r\n                    self.setMode(self.options.mode);\r\n\r\n                    map\r\n                        .on(TC.Consts.event.FEATUREADD, function (e) {\r\n                            const layer = e.layer;\r\n                            const feature = e.feature;\r\n                            if (layer === self.layer) {\r\n                                self.setFeatureMeasureData(feature);\r\n                                \r\n                                self._modifyPromise.then(function (modify) {\r\n                                    modify.displayLabelText(feature.getStyle().label);\r\n                                });\r\n                                self._clearBtn.disabled = false;\r\n                                self._downloadBtn.disabled = false;\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.FEATUREREMOVE + ' ' + TC.Consts.event.FEATURESCLEAR, function (e) {\r\n                            const layer = e.layer;\r\n                            if (layer === self.layer) {\r\n                                if (self.layer.features.length === 0) {\r\n                                    self._clearBtn.disabled = true;\r\n                                    self._downloadBtn.disabled = true;\r\n                                    self.resetValues();\r\n                                }\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.RESULTSPANELCLOSE, function (e) {\r\n                            self.getElevationControl().then(function (ctl) {\r\n                                if (ctl === e.control) {\r\n                                    ctl.setCurrentFeature(null);\r\n                                }\r\n                            })\r\n                        });\r\n\r\n                    resolve(self);\r\n                });\r\n\r\n            }).catch(function (error) {\r\n                reject(error);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.displayMode = function (mode) {\r\n        const self = this;\r\n        if (mode === TC.Consts.geom.POINT) {\r\n            self._activeMode = self.div.querySelector('.tc-ctl-meas-pt');\r\n        }\r\n        if (self.modify) {\r\n            self.modify.div.classList.remove(TC.Consts.classes.COLLAPSED);\r\n        }\r\n        return TC.control.Measure.prototype.displayMode.call(self, mode);\r\n    };\r\n\r\n    ctlProto.setMode = function (mode) {\r\n        const self = this;\r\n        if (mode === TC.Consts.geom.POINT) {\r\n            self._pointDrawControlPromise.then(function (ctl) {\r\n                ctl.activate();\r\n                TC.control.Measure.prototype.setMode.call(self, mode);\r\n            });\r\n        }\r\n        else {\r\n            TC.control.Measure.prototype.setMode.call(self, mode);\r\n        }\r\n    };\r\n\r\n    ctlProto.setFeatureMeasureData = function (feature) {\r\n        const self = this;\r\n        const data = {};\r\n        switch (true) {\r\n            case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                const firstCoordText = self._1stCoordText.innerHTML;\r\n                const secondCoordText = self._2ndCoordText.innerHTML;\r\n                const elevationText = self._elevationText.innerHTML;\r\n                if (self._1stCoordValue.textContent.trim().length > 0 && self._2ndCoordValue.textContent.trim().length > 0) {\r\n                    data.CRS = self.map.crs;\r\n                    data[firstCoordText.substr(0, firstCoordText.indexOf(':'))] = parseFloat(self._1stCoordValue.dataset.value);\r\n                    data[secondCoordText.substr(0, secondCoordText.indexOf(':'))] = parseFloat(self._2ndCoordValue.dataset.value);\r\n                    if (elevationText) {\r\n                        data[self.getLocaleString('ele')] = parseFloat(self._elevationValue.dataset.value);\r\n                    }\r\n                    feature.setData(data);\r\n                }\r\n                break;\r\n            case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                if (self._len.innerHTML.trim() !== self.NOMEASURE) {\r\n                    data[self.getLocaleString('2dLength')] = self._len.innerHTML;\r\n                    feature.setData(data);\r\n                }\r\n                break;\r\n            case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                if (self._area.innerHTML.trim() !== self.NOMEASURE && self._peri.innerHTML.trim() !== self.NOMEASURE) {\r\n                    data[self.getLocaleString('area')] = self._area.innerHTML;\r\n                    data[self.getLocaleString('2dPerimeter')] = self._peri.innerHTML;\r\n                    feature.setData(data);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.getFeatureMeasureData = function (feature) {\r\n        const self = this;\r\n        const result = {\r\n            units: 'm'\r\n        };\r\n        const measureOptions = {\r\n            crs: self.map.options.utmCrs\r\n        };\r\n        switch (true) {\r\n            case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                result.area = feature.getArea(measureOptions);\r\n                result.perimeter = feature.getLength(measureOptions);\r\n                break;\r\n            case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                result.length = feature.getLength(measureOptions);\r\n                self.getElevationControl().then(ctl => {\r\n                    if (self.elevationProfileActive) {\r\n                        ctl.displayElevationProfile(feature);\r\n                    }\r\n                });\r\n                break;\r\n            case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                result.coords = feature.geometry;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    ctlProto.showMeasurements = function (options) {\r\n        const self = this;\r\n        TC.control.Measure.prototype.showMeasurements.call(self, options);\r\n        options = options || {};\r\n        const locale = self.map.options.locale || TC.Cfg.locale\r\n        if (options.coords) {\r\n            var precision;\r\n            var coord1, coord2;\r\n            if (options.units === 'm') {\r\n                precision = TC.Consts.METER_PRECISION;\r\n                coord1 = options.coords[0];\r\n                coord2 = options.coords[1];\r\n                self._1stCoordText.innerHTML = 'x: ';\r\n                self._2ndCoordText.innerHTML = 'y: ';\r\n            }\r\n            else {\r\n                precision = TC.Consts.DEGREE_PRECISION;\r\n                coord1 = options.coords[1];\r\n                coord2 = options.coords[0];\r\n                self._1stCoordText.innerHTML = 'lat: ';\r\n                self._2ndCoordText.innerHTML = 'lon: ';\r\n            }\r\n            const factor = Math.pow(10, precision);\r\n            const round = function (val) {\r\n                return Math.round(val * factor) / factor;\r\n            }\r\n            self._1stCoordValue.innerHTML = TC.Util.formatNumber(coord1.toFixed(precision), locale);\r\n            self._1stCoordValue.dataset.value = round(coord1);\r\n            self._2ndCoordValue.innerHTML = TC.Util.formatNumber(coord2.toFixed(precision), locale);\r\n            self._2ndCoordValue.dataset.value = round(coord2);\r\n            if (options.coords.length > 2) {\r\n                const elevation = Math.round(options.coords[2]);\r\n                self._elevationText.innerHTML = self.getLocaleString('ele').toLowerCase() + ': ';\r\n                self._elevationValue.innerHTML = TC.Util.formatNumber(elevation.toFixed(TC.Consts.METER_PRECISION), locale) + ' m';\r\n                self._elevationValue.dataset.value = elevation;\r\n            }\r\n            else {\r\n                self._elevationText.innerHTML = '';\r\n                self._elevationValue.innerHTML = '';\r\n                self._elevationValue.dataset.value = '';\r\n            }\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.resetValues = function () {\r\n        const self = this;\r\n        TC.control.Measure.prototype.resetValues.call(self);\r\n\r\n        if (self._1stCoordText) {\r\n            self._1stCoordText.innerHTML = self.NOMEASURE;\r\n            self._2ndCoordText.innerHTML = '';\r\n            self._1stCoordValue.innerHTML = '';\r\n            self._1stCoordValue.dataset.value = '';\r\n            self._2ndCoordValue.innerHTML = '';\r\n            self._2ndCoordValue.dataset.value = '';\r\n            self._elevationText.innerHTML = '';\r\n            self._elevationValue.innerHTML = '';\r\n            self._elevationValue.dataset.value = '';\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.resetDrawWatches = function () {\r\n        const self = this;\r\n        self.drawControls.forEach(function (ctl) {\r\n            ctl\r\n                .setStrokeColorWatch()\r\n                .setStrokeWidthWatch();\r\n        });\r\n    };\r\n\r\n    ctlProto.clear = function () {\r\n        const self = this;\r\n        self.resetValues();\r\n        self.layer.clearFeatures();\r\n        if (self.modify.isActive) {\r\n            self.modify.deactivate();\r\n        }\r\n        if (self.options.displayElevation) {\r\n            self.getElevationControl().then(function (ctl) {\r\n                ctl.resetElevationProfile();\r\n                if (ctl.resultsPanel) {\r\n                    ctl.resultsPanel.close();\r\n                }\r\n            });\r\n        }\r\n        self._clearBtn.disabled = true;\r\n        self._downloadBtn.disabled = true;\r\n        return self;\r\n    };\r\n\r\n    ctlProto.showSketchDownloadDialog = function (options) {\r\n        const self = this;\r\n\r\n        self.getDownloadDialog().then(function (control) {\r\n            var options = {\r\n                title: self.getLocaleString(\"downloadSketch\"),\r\n                fileName: self.getLocaleString('sketch').toLowerCase().replace(' ', '_') + '_' + TC.Util.getFormattedDate(new Date().toString(), true)\r\n            };\r\n            //si el control tiene su propia configuración de elevacion la pasamos para que sobrescriba a la del mapa\r\n            if (self.map.elevation || self.options.displayElevation) {\r\n                options = Object.assign({}, options, {\r\n                    elevation: Object.assign({}, self.map.elevation && self.map.elevation.options, self.options.displayElevation)\r\n                });\r\n            }\r\n            control.open(self.layer.features, options);\r\n            \r\n        });\r\n        return self;\r\n        \r\n    };\r\n\r\n    ctlProto.onStyleChange = function (e) {\r\n        const self = this;\r\n        var featureCtor;\r\n        switch (e.target.mode) {\r\n            case TC.Consts.geom.POLYGON:\r\n                featureCtor = TC.feature.Polygon;\r\n                break;\r\n            case TC.Consts.geom.POLYLINE:\r\n                featureCtor = TC.feature.Polyline;\r\n                break;\r\n            case TC.Consts.geom.POINT:\r\n                featureCtor = TC.feature.Point;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (featureCtor) {\r\n            self.modify.getSelectedFeatures().forEach(function (feature) {\r\n                if (feature instanceof featureCtor) {\r\n                    const styleOptions = {};\r\n                    styleOptions[e.property] = e.value;\r\n                    //feature._originalStyle[e.property] = e.value;\r\n                    feature.setStyle(styleOptions);\r\n                    //clearTimeout(feature._selectionStyleTimeout);\r\n                    //feature._selectionStyleTimeout = setTimeout(function () {\r\n                    //    feature.setStyle(self.modify.styleFunction(feature));\r\n                    //}, self.options.styleChangeDisplayTimeout || 1000);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ctlProto.activateElevationProfile = async function () {\r\n        const self = this;\r\n        self.elevationProfileActive = true;\r\n        self._elevProfileBtn.classList.add(TC.Consts.classes.ACTIVE);\r\n        self._elevProfileBtn.setAttribute('title', self.getLocaleString('deactivateElevationProfile'));\r\n        var profileDrawn = false;\r\n        const elevationControl = await self.getElevationControl();\r\n        if (self.lineDrawControl.historyIndex > 1) {\r\n            elevationControl.displayElevationProfile(self.lineDrawControl.history.slice(0, self.lineDrawControl.historyIndex));\r\n            profileDrawn = true;\r\n        }\r\n        else {\r\n            const features = self.modify.getActiveFeatures().filter(function (feat) {\r\n                return TC.feature.Polyline && feat instanceof TC.feature.Polyline;\r\n            });\r\n            if (features.length) {\r\n                const feature = features[features.length - 1];\r\n                elevationControl.displayElevationProfile(feature.geometry);\r\n                profileDrawn = true;\r\n            }\r\n        }\r\n        if (!profileDrawn) {\r\n            elevationControl.resetElevationProfile();\r\n        }\r\n        if (elevationControl.resultsPanel) {\r\n            elevationControl.resultsPanel.show();\r\n        }\r\n    };\r\n\r\n    ctlProto.deactivateElevationProfile = async function () {\r\n        const self = this;\r\n        self.elevationProfileActive = false;\r\n        self._elevProfileBtn.classList.remove(TC.Consts.classes.ACTIVE);\r\n        self._elevProfileBtn.setAttribute('title', self.getLocaleString('activateElevationProfile'));\r\n        const elevationControl = await self.getElevationControl();\r\n        elevationControl.resetElevationProfile();\r\n        if (elevationControl.resultsPanel) {\r\n            elevationControl.resultsPanel.close();\r\n        }\r\n    };\r\n\r\n    ctlProto.resetElevationProfile = function () {\r\n        const self = this;\r\n        if (self.options.displayElevation && self.resultsPanelChart) {\r\n            self.elevationChartData = {\r\n                x: [0],\r\n                ele: [0],\r\n                coords: [0, 0, 0],\r\n                upHill: 0,\r\n                downHill: 0\r\n            };\r\n            self.resultsPanelChart.openChart(self.elevationChartData);\r\n        }\r\n    };\r\n\r\n    ctlProto.getElevationControl = function () {\r\n        return this._elevationControlPromise;\r\n    };\r\n\r\n})();"]}