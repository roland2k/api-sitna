{"version":3,"sources":["layout/responsive/script.js"],"names":["document","querySelectorAll","forEach","elm","map","TC","Map","get","_layoutDone","Cfg","applyChanges","configArray","changes","Array","item","elem","apply","clickedElems","elements","querySelector","div","addEventListener","event","EventTarget","listenerBySelector","join","window","matchMedia","screenCondition","matches","change","targets","isArray","classes","cls","classList","add","defaultInfoContainer","Consts","infoContainer","RESULTS_PANEL","ready","ovPanel","ovmap","h1","CLICK","e","preventDefault","stopPropagation","panel","target","parentElement","isCollapsed","toggle","disable","setTimeout","enable","tab","tagName","ctlDiv","layout","accordion","contains","COLLAPSED","this","h2","loaded","getControlsByClass","toc","mfi","CLASS","insertAdjacentElement","containerControl","TOOLSCLOSE","TOOLSOPEN","on","remove","CONTROLACTIVATE","control","filter","ctl","length","toolsPanel","getComputedStyle","height","browserFeatures","touch","addSwipe","direction","selector","className","options","noSwipe","Util","swipe"],"mappings":"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","sourcesContent":["\r\ndocument.querySelectorAll('.tc-map').forEach(function (elm) {\r\n    const map = TC.Map.get(elm);\r\n\r\n    if (map && !map._layoutDone) {\r\n\r\n        /**\r\n             * Array de condiciones para distintas resoluciones de pantalla. La estructura del array que recibe como parámetro es es:\r\n             *  - screenCondition (string): media query que debe evaluarse a true para que se apliquen los cambios.\r\n             *  - apply:\r\n             *      - event (string): evento que debe producirse para que se lleve a cabo la acción.\r\n             *      - elements (array o string): selectores CSS de los elementos sobre los que se debe producir el evento anterior.\r\n             *      - changes:\r\n             *          - targets (array o string): selectores CSS de los elementos a los que se aplicarán las clases CSS siguientes\r\n             *          - classes (array o string): clases CSS a aplicar\r\n             */\r\n        TC.Cfg.applyChanges = function (configArray) {\r\n            var changes = configArray instanceof Array ? configArray : [configArray];\r\n\r\n            if (changes) {\r\n                var map;\r\n                changes.forEach(function (item) {\r\n                    var elem = item.apply;\r\n                    var clickedElems = elem.elements instanceof Array ? elem.elements : [elem.elements];\r\n                    map = item.map || map || TC.Map.get(document.querySelector('.tc-map'));\r\n                    map.div.addEventListener(elem.event, TC.EventTarget.listenerBySelector(clickedElems.join(), function () {\r\n                        if (window.matchMedia(item.screenCondition).matches) { // si es una pantalla estrecha\r\n                            elem.changes.forEach(function (change) {\r\n                                var targets = Array.isArray(change.targets) ? change.targets : [change.targets];\r\n                                var classes = Array.isArray(change.classes) ? change.classes : [change.classes];\r\n\r\n                                map.div.querySelectorAll(targets.join()).forEach(function (elm) {\r\n                                    classes.forEach(function (cls) {\r\n                                        elm.classList.add(cls);\r\n                                    });\r\n                                });\r\n                            });\r\n                        }\r\n                    }));\r\n                });\r\n            }\r\n        };\r\n\r\n        // En pantalla estrecha cambiamos el método de mostrar GFI.\r\n        if (window.matchMedia('screen and (max-width: 42em), screen and (max-height: 40em)').matches) {\r\n            map.defaultInfoContainer = TC.Consts.infoContainer.RESULTS_PANEL;\r\n        }\r\n\r\n        map.ready(function () {\r\n\r\n            const ovPanel = map.div.querySelector('.ovmap-panel');\r\n            const rcollapsedClass = 'right-collapsed';\r\n            const lcollapsedClass = 'left-collapsed';\r\n            var ovmap;\r\n\r\n            map.div.querySelectorAll('.right-panel > h1').forEach(function (h1) {\r\n                h1.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    const tab = e.target;\r\n                    const panel = tab.parentElement;\r\n                    const isCollapsed = panel.classList.toggle(rcollapsedClass);\r\n                    if (map && panel === ovPanel) {\r\n                        if (ovmap) {\r\n                            if (isCollapsed) {\r\n                                ovmap.disable();\r\n                            }\r\n                            else {\r\n                                setTimeout(function () {\r\n                                    ovmap.enable();\r\n                                }, 250);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            map.div.querySelectorAll('.left-panel > h1').forEach(function (h1) {\r\n                h1.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    const panel = e.target.parentElement;\r\n                    panel.classList.toggle(lcollapsedClass);\r\n                });\r\n            });\r\n\r\n            map.div.querySelector('.tools-panel').addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                const tab = e.target;\r\n                if (tab.tagName === ('H2')) {\r\n                    const ctlDiv = tab.parentElement;\r\n                    if (map && map.layout && map.layout.accordion) {\r\n                        if (ctlDiv.classList.contains(TC.Consts.classes.COLLAPSED)) {\r\n                            this.querySelectorAll('h2').forEach(function (h2) {\r\n                                const div = h2.parentElement;\r\n                                if (div !== ctlDiv && !div.matches('.tc-ctl-search')) {\r\n                                    div.classList.add(TC.Consts.classes.COLLAPSED);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    ctlDiv.classList.toggle(TC.Consts.classes.COLLAPSED);\r\n                }\r\n            });          \r\n\r\n\r\n            map.loaded(function () {\r\n\r\n                ovmap = map.getControlsByClass('TC.control.OverviewMap')[0];\r\n                if (ovmap) {\r\n                    ovmap.loaded(function () {\r\n                        ovmap.disable();\r\n                    });\r\n                }\r\n                //mover el Multifeature info dentro del TOC\r\n                const toc = map.getControlsByClass('TC.control.WorkLayerManager')[0];\r\n                const mfi = map.getControlsByClass('TC.control.MultiFeatureInfo')[0];\r\n                if (toc && mfi) {\r\n                    toc.div.querySelector('.' + toc.CLASS + '-content').insertAdjacentElement('afterend', mfi.div);\r\n                    mfi.containerControl = toc;\r\n                }\r\n\r\n                //Aplicar clases CSS cuando se haga click en elementos definidos por configuración\r\n                TC.Cfg.applyChanges([\r\n                    {\r\n                        \"map\": map,\r\n                        \"screenCondition\": \"(max-width: 42em)\",\r\n                        \"apply\": {\r\n                            \"event\": \"click\",\r\n                            \"elements\": [\".tc-ctl-bms-node > label\"],\r\n                            \"changes\": [\r\n                                {\r\n                                    \"targets\": \"#tools-panel\",\r\n                                    \"classes\": \"right-collapsed\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                ]);\r\n            });\r\n\r\n            TC.Consts.event.TOOLSCLOSE = TC.Consts.event.TOOLSCLOSE || 'toolsclose.tc';\r\n            TC.Consts.event.TOOLSOPEN = TC.Consts.event.TOOLSOPEN || 'toolsopen.tc';\r\n\r\n            map.on(TC.Consts.event.TOOLSOPEN, function (e) {\r\n                map.div.querySelector('.tools-panel').classList.remove(rcollapsedClass);\r\n            });\r\n\r\n            map.on(TC.Consts.event.TOOLSCLOSE, function (e) {\r\n                map.div.querySelector('.tools-panel').classList.add(rcollapsedClass);\r\n            });\r\n\r\n            // En pantalla estrecha colapsar panel de herramientas al activar una\r\n            map.on(TC.Consts.event.CONTROLACTIVATE, function (e) {\r\n                const control = e.control;\r\n                if (map.getControlsByClass('TC.control.Draw').filter(ctl => ctl === control).length) {\r\n                    const toolsPanel = document.querySelector('.tools-panel');\r\n                    if (getComputedStyle(map.div).height === getComputedStyle(toolsPanel).height) {\r\n                        toolsPanel.classList.add(rcollapsedClass);\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (TC.browserFeatures.touch()) {\r\n                const addSwipe = function (direction) {\r\n                    const selector = '.' + direction + '-panel';\r\n                    const className = direction + '-collapsed';\r\n                    const options = { noSwipe: 'li,a' };\r\n                    options[direction] = function () {\r\n                        this.classList.add(className);\r\n                    };\r\n                    map.div.querySelectorAll(selector).forEach(function (panel) {\r\n                        TC.Util.swipe(panel, options);\r\n                    });\r\n                };\r\n                addSwipe('right');\r\n                addSwipe('left');\r\n            }\r\n        });\r\n    }\r\n    map._layoutDone = true;\r\n});\r\n\r\n"]}