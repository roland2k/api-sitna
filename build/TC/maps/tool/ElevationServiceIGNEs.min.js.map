{"version":3,"sources":["tool/ElevationServiceIGNEs.js"],"names":["TC","tool","ElevationService","syncLoadJS","apiLocation","ElevationServiceIGNEs","options","apply","this","arguments","url","minimumElevation","nativeCRS","inherit","toolProto","prototype","proxificationTool","request","self","coordinates","length","point","crs","Util","reproject","coverageName","coverageResolution","halfRes1","halfRes2","bbox","requestUrl","encodeURIComponent","Promise","resolve","reject","endFn","fetch","then","r","responseText","catch","err","Error","loadJS","Proxification","proxify","parseResponse","response","lines","split","nColsLine","filter","line","indexOf","nCols","parseInt","substr","lastIndexOf","nRowsLine","nRows","xllCornerLine","x","parseFloat","yllCornerLine","y","isNaN","cellSizeIndex","findIndex","elevation","Math","round","trim","slice","call"],"mappings":"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","sourcesContent":["TC.tool = TC.tool || {};\r\n\r\nif (!TC.tool.ElevationService) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/tool/ElevationService');\r\n}\r\n\r\nTC.tool.ElevationServiceIGNEs = function (options) {\r\n    const self = this;\r\n    TC.tool.ElevationService.apply(self, arguments);\r\n    self.url = self.options.url || '//servicios.idee.es/wcs-inspire/mdt';\r\n    self.minimumElevation = self.options.minimumElevation || -9998;\r\n    self.nativeCRS = 'EPSG:25830';\r\n};\r\n\r\nTC.inherit(TC.tool.ElevationServiceIGNEs, TC.tool.ElevationService);\r\n\r\n(function () {\r\n    const toolProto = TC.tool.ElevationServiceIGNEs.prototype;\r\n    let proxificationTool;\r\n\r\n    toolProto.request = function (options) {\r\n        const self = this;\r\n        options = options || {};\r\n        if (options.coordinates.length === 1) {\r\n            let point = options.coordinates[0];\r\n\r\n            if (options.crs && options.crs !== self.nativeCRS) {\r\n                point = TC.Util.reproject(point, options.crs, self.nativeCRS);\r\n            }\r\n\r\n            let coverageName = 'Elevacion25830_5';\r\n            let coverageResolution = 3;\r\n            const halfRes1 = coverageResolution / 2;\r\n            const halfRes2 = coverageResolution - halfRes1;\r\n\r\n            const bbox = [\r\n                point[0] - halfRes1,\r\n                point[1] - halfRes1,\r\n                point[0] + halfRes2,\r\n                point[1] + halfRes2\r\n            ];\r\n            const requestUrl = self.url + '?SERVICE=WCS&REQUEST=GetCoverage&VERSION=2.0.1' +\r\n                '&SUBSET=' + encodeURIComponent('x,' + self.nativeCRS + '(' + bbox[0] + ',' + bbox[2] + ')') + \r\n                '&SUBSET=' + encodeURIComponent('y,' + self.nativeCRS + '(' + bbox[1] + ',' + bbox[3] + ')') + \r\n                '&COVERAGEID=' + encodeURIComponent(coverageName) +\r\n                '&RESOLUTION=x(1)' + \r\n                '&RESOLUTION=y(1)' + \r\n                '&FORMAT=' + encodeURIComponent('application/asc') +\r\n                '&EXCEPTIONS=XML';\r\n            return new Promise(function (resolve, reject) {\r\n                const endFn = function () {\r\n                    proxificationTool\r\n                        .fetch(requestUrl)\r\n                        .then(r => resolve(r.responseText))\r\n                        .catch(err => reject(Error(err)));\r\n                };\r\n                if (proxificationTool) {\r\n                    endFn();\r\n                }\r\n                else {\r\n                    TC.loadJS(\r\n                        !TC.tool || !TC.tool.Proxification,\r\n                        [TC.apiLocation + 'TC/tool/Proxification'],\r\n                        function () {\r\n                            proxificationTool = new TC.tool.Proxification(TC.proxify);\r\n                            endFn();\r\n                        }\r\n                    )\r\n                }\r\n            });\r\n        }\r\n\r\n        return Promise.reject(new Error('ign.es elevation service supports only points'));\r\n    };\r\n\r\n    toolProto.parseResponse = function (response, options) {\r\n        const self = this;\r\n        const lines = response.split('\\n');\r\n        const nColsLine = lines.filter(line => line.indexOf('ncols') === 0)[0];\r\n        const nCols = parseInt(nColsLine && nColsLine.substr(nColsLine.lastIndexOf(' ')));\r\n        const nRowsLine = lines.filter(line => line.indexOf('nrows') === 0)[0];\r\n        const nRows = parseInt(nColsLine && nRowsLine.substr(nRowsLine.lastIndexOf(' ')));\r\n        if (nCols && nRows) {\r\n            const xllCornerLine = lines.filter(line => line.indexOf('xllcorner') === 0)[0];\r\n            const x = parseFloat(xllCornerLine && xllCornerLine.substr(xllCornerLine.lastIndexOf(' ')));\r\n            const yllCornerLine = lines.filter(line => line.indexOf('yllcorner') === 0)[0];\r\n            const y = parseFloat(yllCornerLine && yllCornerLine.substr(yllCornerLine.lastIndexOf(' ')));\r\n            if (!isNaN(x) && !isNaN(y)) {\r\n                const cellSizeIndex = lines.findIndex(line => line.indexOf('cellsize') === 0);\r\n                let elevation = parseFloat(lines[cellSizeIndex + Math.round(nRows / 2)].trim().split(' ')[Math.round(nCols / 2) - 1]);\r\n                if (isNaN(elevation)) {\r\n                    elevation = null;\r\n                }\r\n                let point = options.coordinates[0].slice();\r\n                point[2] = elevation;\r\n                if (options.crs && options.crs !== self.nativeCRS) {\r\n                    point = TC.Util.reproject(point, self.nativeCRS, options.crs);\r\n                }\r\n                return TC.tool.ElevationService.prototype.parseResponse.call(self, { coordinates: [point] }, options);\r\n            }\r\n        }\r\n        return [];\r\n    };\r\n})();"]}