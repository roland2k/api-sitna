{"version":3,"sources":["tool/ElevationServiceGoogle.js"],"names":["TC","tool","ElevationService","syncLoadJS","apiLocation","ElevationServiceGoogle","options","self","this","apply","arguments","url","intIdx","lastIndexOf","length","googleMapsKey","minimumElevation","nativeCRS","maxCoordinateCountPerRequest","minRetryInterval","maxRetries","Number","isInteger","inherit","toolProto","prototype","googleElevator","currentRequestIds","Set","request","requestId","id","add","cancelledResponse","status","geomType","coordinateList","coordinates","Consts","geom","POINT","POLYLINE","allowedGeometryTypes","includes","Promise","reject","Error","resolve","chunks","i","ii","push","slice","retries","subrequests","map","subrequest","chunk","requestOptions","Util","extend","res","rej","has","then","result","setTimeout","r","catch","e","all","responses","results","Array","concat","filter","elevations","delete","crs","reproject","googleMapsIsLoaded","window","google","maps","Cfg","proxyExceptions","loadJS","coords","p","lat","lng","getElevationForLocations","locations","parseResponse","response","location","elevation","cancelRequest"],"mappings":"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","sourcesContent":["// https://developers.google.com/maps/documentation/javascript/elevation?hl=es\r\n\r\nTC.tool = TC.tool || {};\r\n\r\nif (!TC.tool.ElevationService) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/tool/ElevationService');\r\n}\r\n\r\nTC.tool.ElevationServiceGoogle = function (options) {\r\n    const self = this;\r\n    TC.tool.ElevationService.apply(self, arguments);\r\n    self.url = self.options.url || '//maps.googleapis.com/maps/api/js?v=3';\r\n    const intIdx = self.url.lastIndexOf('?');\r\n    if (intIdx < 0) {\r\n        self.url += '?';\r\n    }\r\n    else if (intIdx < self.url.length - 1) {\r\n        self.url += '&';\r\n    }\r\n    self.url += 'key=' + self.options.googleMapsKey;\r\n    self.minimumElevation = self.options.minimumElevation || -9998;\r\n    self.nativeCRS = 'EPSG:4326';\r\n    self.maxCoordinateCountPerRequest = 512;\r\n    self.minRetryInterval = 5100;\r\n    self.maxRetries = Number.isInteger(self.options.maxRetries) ? self.options.maxRetries : 0;\r\n};\r\n\r\nTC.inherit(TC.tool.ElevationServiceGoogle, TC.tool.ElevationService);\r\n\r\n(function () {\r\n    const toolProto = TC.tool.ElevationServiceGoogle.prototype;\r\n\r\n    let googleElevator;\r\n    const currentRequestIds = new Set();\r\n\r\n    toolProto.request = function (options) {\r\n        const self = this;\r\n        options = options || {};\r\n        //if (self.serviceIsDisabled) {\r\n        //    return Promise.reject(Error('Google elevation service is disabled'));\r\n        //}\r\n        let requestId = options.id;\r\n        if (requestId) {\r\n            currentRequestIds.add(requestId);\r\n        }\r\n        const cancelledResponse = { status: 'CANCELLED' };\r\n        let geomType;\r\n        let coordinateList = options.coordinates;\r\n        if (coordinateList.length === 1) {\r\n            geomType = TC.Consts.geom.POINT;\r\n        }\r\n        else {\r\n            geomType = TC.Consts.geom.POLYLINE;\r\n        }\r\n\r\n        if (self.options.allowedGeometryTypes && !self.options.allowedGeometryTypes.includes(geomType)) {\r\n            return Promise.reject(Error(geomType + ' geometry type not allowed by configuration'));\r\n        }\r\n\r\n        if (coordinateList.length > self.maxCoordinateCountPerRequest) {\r\n            // Google no soporta tantos puntos por petición, dividimos la petición en varias\r\n            return new Promise(function (resolve, reject) {\r\n                const chunks = [];\r\n                for (i = 0, ii = coordinateList.length; i < ii; i += self.maxCoordinateCountPerRequest) {\r\n                    chunks.push(coordinateList.slice(i, i + self.maxCoordinateCountPerRequest));\r\n                }\r\n                let retries = 0;\r\n                const subrequests = chunks.map(function subrequest(chunk) {\r\n                    const requestOptions = TC.Util.extend({}, options, { coordinates: chunk, id: 0 });\r\n                    return new Promise(function (res, rej) {\r\n                        if (!currentRequestIds.has(requestId)) {\r\n                            res(cancelledResponse);\r\n                        }\r\n                        else {\r\n                            self.request(requestOptions)\r\n                                .then(function (result) {\r\n                                    if (result.status === 'OVER_QUERY_LIMIT') {\r\n                                        if (!currentRequestIds.has(requestId)) {\r\n                                            res(cancelledResponse);\r\n                                        }\r\n                                        else {\r\n                                            // Peticiones demasiado seguidas: esperamos y volvemos a pedir\r\n                                            if (!self.maxRetries || retries < self.maxRetries) {\r\n                                                retries = retries + 1;\r\n                                                setTimeout(function () {\r\n                                                    subrequest(chunk)\r\n                                                        .then(r => res(r))\r\n                                                        .catch(e => rej(e));\r\n                                                }, self.minRetryInterval);\r\n                                            }\r\n                                            else {\r\n                                                res(result);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        res(result);\r\n                                    }\r\n                                })\r\n                                .catch(e => rej(e));\r\n                        }\r\n                    });\r\n                });\r\n                Promise.all(subrequests).then(function mergeResponses(responses) {\r\n                    const results = Array.prototype.concat.apply([], responses\r\n                        .filter(r => r.status === 'OK')\r\n                        .map(r => r.elevations));\r\n                    currentRequestIds.delete(requestId);\r\n                    resolve({\r\n                        status: 'OK',\r\n                        elevations: results\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n        if (options.crs && options.crs !== self.nativeCRS) {\r\n            coordinateList = TC.Util.reproject(coordinateList, options.crs, self.nativeCRS);\r\n        }\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            const googleMapsIsLoaded = window.google && window.google.maps;\r\n            if (!googleMapsIsLoaded) {\r\n                TC.Cfg.proxyExceptions = TC.Cfg.proxyExceptions || [];\r\n                TC.Cfg.proxyExceptions.push(self.url);\r\n            }\r\n            TC.loadJS(\r\n                !googleMapsIsLoaded,\r\n                self.url,\r\n                function () {\r\n                    googleElevator = googleElevator || new google.maps.ElevationService();\r\n                    const coords = coordinateList.map(p => ({ lat: p[1], lng: p[0] }));\r\n                    googleElevator.getElevationForLocations({\r\n                        locations: coords\r\n                    }, function (elevations, status) {\r\n                        if (requestId) {\r\n                            currentRequestIds.delete(requestId);\r\n                        }\r\n                        resolve({\r\n                            elevations: elevations,\r\n                            status: status\r\n                        });\r\n                    })\r\n                },\r\n                false,\r\n                true\r\n            );\r\n        });\r\n    };\r\n\r\n    toolProto.parseResponse = function (response, options) {\r\n        const self = this;\r\n        switch (response.status) {\r\n            case 'OK':\r\n                return response.elevations.map(function (r) {\r\n                    if (options.crs && options.crs !== self.nativeCRS) {\r\n                        return TC.Util.reproject([r.location.lng(), r.location.lat()], self.nativeCRS, options.crs).concat(r.elevation);\r\n                    }\r\n                    else {\r\n                        return [r.location.lng(), r.location.lat(), r.elevation];\r\n                    }\r\n                });\r\n            //case 'OVER_DAILY_LIMIT':\r\n            //case 'OVER_QUERY_LIMIT':\r\n            //case 'REQUEST_DENIED':\r\n            //    self.serviceIsDisabled = true;\r\n            default:\r\n                return [];\r\n        }\r\n    };\r\n\r\n    toolProto.cancelRequest = function (id) {\r\n        currentRequestIds.delete(id);\r\n    };\r\n})();"]}