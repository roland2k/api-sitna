{"version":3,"sources":["tool/ElevationService.js"],"names":["TC","tool","ElevationService","options","self","this","url","process","minimumElevation","Util","isFunction","request","parseResponse","toolProto","prototype","getElevation","undefined","resolution","sampleNumber","Promise","resolve","reject","loadJS","Geometry","apiLocation","then","response","responseCallback","call","catch","error","Error","dataInputs","body","format","WPS","data","responseType","Consts","mimeType","JSON","version","serviceVersion","output","contentType","XML","ajax","method","buildExecuteQuery","coordinates","forEach","coord","cancelRequest","id"],"mappings":"AAAAA,GAAGC,KAAOD,GAAGC,MAAQ,GAErBD,GAAGC,KAAKC,iBAAmB,SAAUC,GACjC,MAAMC,EAAOC,KACbD,EAAKD,QAAUA,GAAW,GAC1BC,EAAKE,IAAMF,EAAKD,QAAQG,IACxBF,EAAKG,QAAUH,EAAKD,QAAQI,QAC5BH,EAAKI,iBAAmBJ,EAAKD,QAAQK,iBACjCR,GAAGS,KAAKC,WAAWN,EAAKD,QAAQQ,WAChCP,EAAKO,QAAUP,EAAKD,QAAQQ,SAE5BX,GAAGS,KAAKC,WAAWN,EAAKD,QAAQS,iBAChCR,EAAKQ,cAAgBR,EAAKD,QAAQS,iBAI1C,WACI,MAAMC,EAAYb,GAAGC,KAAKC,iBAAiBY,UAE3CD,EAAUE,aAAe,SAAUZ,GAC/B,MAAMC,EAAOC,UAEcW,KAD3Bb,EAAUA,GAAW,IACTc,aACRd,EAAQc,WAAab,EAAKD,QAAQc,iBAETD,IAAzBb,EAAQe,eACRf,EAAQe,aAAed,EAAKD,QAAQe,cAExC,OAAO,IAAIC,QAAQ,SAAUC,EAASC,GAClCrB,GAAGsB,QACEtB,GAAGuB,SACJvB,GAAGwB,YAAc,cACjB,WACIpB,EACKO,QAAQR,GACRsB,KAAK,SAAUC,GACZN,GAASjB,EAAQwB,kBAAoBvB,EAAKQ,eAAegB,KAAKxB,EAAMsB,EAAUvB,MAEjF0B,MAAM,SAAUC,GACbT,EAAOS,aAAiBC,MAAQD,EAAQC,MAAMD,WAOtEjB,EAAUF,QAAU,SAAUR,GAC1B,MAAMC,EAAOC,KACbF,EAAUA,GAAW,GACrB,OAAO,IAAIgB,QAAQ,SAAUC,EAASC,GAC9BlB,EAAQ6B,YAAc7B,EAAQ8B,KAC9BjC,GAAGsB,QACEtB,GAAGkC,SAAWlC,GAAGkC,OAAOC,IACzBnC,GAAGwB,YAAc,gBACjB,WACI,MAAMY,EAAO,CACT7B,QAASJ,EAAQI,SAAWH,EAAKG,QACjCyB,WAAY7B,EAAQ6B,WACpBK,aAAcrC,GAAGsC,OAAOC,SAASC,KACjCC,QAAStC,EAAQuC,gBAAkBtC,EAAKsC,gBAAkB,QAC1DC,OAAQxC,EAAQwC,QAEdC,EAA6C,kBAAxBzC,EAAQyC,YAA4BzC,EAAQyC,YAAczC,EAAQyC,aAAe5C,GAAGsC,OAAOC,SAASM,IAC/H7C,GAAG8C,KAAK,CACJxC,IAAKF,EAAKE,IACVyC,OAAQ,OACRH,YAAaA,EACbP,aAAcrC,GAAGsC,OAAOC,SAASC,KACjCJ,KAAMjC,EAAQ8B,MAAQjC,GAAGkC,OAAOC,IAAIa,kBAAkBZ,KACvDX,KAAK,SAAUC,GACdN,EAAQM,EAASU,OAClB,SAAUN,GACTT,EAAOS,aAAiBC,MAAQD,EAAQC,MAAMD,QAM1DT,EAAOU,MAAM,kDAKzBlB,EAAUD,cAAgB,SAAUc,EAAUvB,GAC1C,IAAIC,EAAOC,KACX,GAAIqB,EAASuB,YAAa,CACPvB,EAASuB,YACjBC,QAAQ,SAAUC,GACjBA,EAAM,GAAK/C,EAAKI,mBAChB2C,EAAM,GAAK,QAIvB,OAAOzB,EAASuB,aAAe,IAGnCpC,EAAUuC,cAAgB,SAAUC,KAhFxC","sourcesContent":["TC.tool = TC.tool || {};\r\n\r\nTC.tool.ElevationService = function (options) {\r\n    const self = this;\r\n    self.options = options || {};\r\n    self.url = self.options.url;\r\n    self.process = self.options.process;\r\n    self.minimumElevation = self.options.minimumElevation;\r\n    if (TC.Util.isFunction(self.options.request)) {\r\n        self.request = self.options.request;\r\n    }\r\n    if (TC.Util.isFunction(self.options.parseResponse)) {\r\n        self.parseResponse = self.options.parseResponse;\r\n    }\r\n};\r\n\r\n(function () {\r\n    const toolProto = TC.tool.ElevationService.prototype;\r\n\r\n    toolProto.getElevation = function (options) {\r\n        const self = this;\r\n        options = options || {};\r\n        if (options.resolution === undefined) {\r\n            options.resolution = self.options.resolution\r\n        }\r\n        if (options.sampleNumber === undefined) {\r\n            options.sampleNumber = self.options.sampleNumber;\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            TC.loadJS(\r\n                !TC.Geometry,\r\n                TC.apiLocation + 'TC/Geometry',\r\n                function () {\r\n                    self\r\n                        .request(options)\r\n                        .then(function (response) {\r\n                            resolve((options.responseCallback || self.parseResponse).call(self, response, options));\r\n                        })\r\n                        .catch(function (error) {\r\n                            reject(error instanceof Error ? error : Error(error));\r\n                        });\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    toolProto.request = function (options) {\r\n        const self = this;\r\n        options = options || {};\r\n        return new Promise(function (resolve, reject) {\r\n            if (options.dataInputs || options.body) {\r\n                TC.loadJS(\r\n                    !TC.format || !TC.format.WPS,\r\n                    TC.apiLocation + 'TC/format/WPS',\r\n                    function () {\r\n                        const data = {\r\n                            process: options.process || self.process,\r\n                            dataInputs: options.dataInputs,\r\n                            responseType: TC.Consts.mimeType.JSON,\r\n                            version: options.serviceVersion || self.serviceVersion || '1.0.0',\r\n                            output: options.output\r\n                        };\r\n                        const contentType = typeof options.contentType === 'boolean' ? options.contentType : options.contentType || TC.Consts.mimeType.XML;\r\n                        TC.ajax({\r\n                            url: self.url,\r\n                            method: 'POST',\r\n                            contentType: contentType,\r\n                            responseType: TC.Consts.mimeType.JSON,\r\n                            data: options.body || TC.format.WPS.buildExecuteQuery(data)\r\n                        }).then(function (response) {\r\n                            resolve(response.data);\r\n                        }, function (error) {\r\n                            reject(error instanceof Error ? error : Error(error));\r\n                        });\r\n                    }\r\n                );\r\n            }\r\n            else {\r\n                reject(Error('Request is not valid for elevation service'));\r\n            }\r\n        });\r\n    };\r\n\r\n    toolProto.parseResponse = function (response, options) {\r\n        var self = this;\r\n        if (response.coordinates) {\r\n            const coords = response.coordinates;\r\n            coords.forEach(function (coord) {\r\n                if (coord[2] < self.minimumElevation) {\r\n                    coord[2] = null;\r\n                }\r\n            });\r\n        }\r\n        return response.coordinates || [];\r\n    };\r\n\r\n    toolProto.cancelRequest = function (id) {\r\n\r\n    };\r\n\r\n})();"]}