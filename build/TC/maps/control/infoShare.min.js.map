{"version":3,"sources":["control/infoShare.js"],"names":["TC","control","infoShare","getDiv","divElement","this","_dialogDiv","getShareDialog","self","dialogDiv","_shareCtl","Promise","resolve","reject","map","addControl","id","getUID","div","querySelector","CLASS","includeControls","then","ctl","caller","extraParams","onShowShareDialog","async","toShare","doZoom","trigger","Consts","event","MAPCHANGE","shareCtl","shareDiv","link","generateLink","input","value","dataset","generateIframe","showShareDialog","shareDialog","Util","showModal","openCallback","DIALOG","action","closeCallback","onCloseShareDialog"],"mappings":"AAAAA,GAAGC,QAAUD,GAAGC,SAAW,GAG3BD,GAAGC,QAAQC,UAAY,CAEnBC,OAAQ,SAAUC,GAEd,OAAOA,GADMC,KACyBC,YAG1CC,eAAgB,SAAUH,GACtB,MAAMI,EAAOH,KACPI,EAAYD,EAAKL,OAAOC,GAC9B,OAAII,EAAKE,UACEC,QAAQC,QAAQJ,EAAKE,WAEzB,IAAIC,QAAQ,SAAUC,EAASC,GAClCL,EAAKM,IAAIC,WAAW,QAAS,CACzBC,GAAIR,EAAKS,SACTC,IAAKT,EAAUU,cAAc,mBAAqBX,EAAKY,MAAQ,qBAC/DC,iBAAiB,IAClBC,KAAKC,IACJf,EAAKE,UAAYa,EACjBf,EAAKE,UAAUc,OAAShB,EACxBA,EAAKE,UAAUe,YAAc,KAC7Bb,EAAQW,QAKpBG,kBAAmBC,iBACFtB,KACRuB,QADQvB,KACOuB,SAAW,GADlBvB,KAERuB,QAAQC,QAAS,EAFTxB,KAIRS,IAAIgB,QAAQ9B,GAAG+B,OAAOC,MAAMC,WACjC,MAAMC,EALO7B,KAKSK,UAChByB,EAAWD,EAAShB,IACpBkB,QAAaF,EAASG,eACtBC,EAAQH,EAAShB,cAAc,4BACrCmB,EAAMC,MAAQH,SACPE,EAAME,QAAgB,cACtBF,EAAME,QAAmB,UAChCL,EAAShB,cAAc,+BAA+BoB,YAAcL,EAASO,eAAeL,IAGhGM,gBAAiB,SAAUtC,GACvB,MAAMI,EAAOH,KAEPsC,EADYnC,EAAKL,OAAOC,GACAe,cAAc,IAAMX,EAAKY,MAAQ,iBAC/DpB,GAAG4C,KAAKC,UAAUF,EAAa,CAC3BG,aAAc,WACVtC,EAAKkB,kBAAkBiB,GAAarB,KAAK,WACrCd,EAAKM,IAAIgB,QAAQ9B,GAAG+B,OAAOC,MAAMe,OAAQ,CAAE9C,QAASO,EAAKE,UAAWsC,OAAQ,aAGpFC,cAAe,WACXzC,EAAK0C,yBAKjBA,mBAAoB,WACH7C,KACRuB,QADQvB,KACOuB,SAAW,GADlBvB,KAERuB,QAAQC,QAAS,EAFTxB,KAIRS,IAAIgB,QAAQ9B,GAAG+B,OAAOC,MAAMC","sourcesContent":["TC.control = TC.control || {};\r\n\r\n// Mixin\r\nTC.control.infoShare = {\r\n\r\n    getDiv: function (divElement) {\r\n        const self = this;\r\n        return divElement ? divElement : self._dialogDiv;\r\n    },\r\n\r\n    getShareDialog: function (divElement) {\r\n        const self = this;\r\n        const dialogDiv = self.getDiv(divElement);\r\n        if (self._shareCtl) {\r\n            return Promise.resolve(self._shareCtl);\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            self.map.addControl('share', {\r\n                id: self.getUID(),\r\n                div: dialogDiv.querySelector('.tc-modal-body .' + self.CLASS + '-share-dialog-ctl'),\r\n                includeControls: false\r\n            }).then(ctl => {\r\n                self._shareCtl = ctl;\r\n                self._shareCtl.caller = self;\r\n                self._shareCtl.extraParams = null;\r\n                resolve(ctl);\r\n            })\r\n        });\r\n    },\r\n\r\n    onShowShareDialog: async function () {\r\n        const self = this;\r\n        self.toShare = self.toShare || {};\r\n        self.toShare.doZoom = true;\r\n        // para gestionar el zoom a la feature al compartir desde el control o el general, ya que la capa que contiene la feature no cambia por lo que no salta.\r\n        self.map.trigger(TC.Consts.event.MAPCHANGE);\r\n        const shareCtl = self._shareCtl;\r\n        const shareDiv = shareCtl.div;\r\n        const link = await shareCtl.generateLink();\r\n        const input = shareDiv.querySelector(\".tc-url input[type=text]\");\r\n        input.value = link;\r\n        delete input.dataset[\"update\"];\r\n        delete input.dataset[\"shortened\"];\r\n        shareDiv.querySelector(\".tc-iframe input[type=text]\").value = await shareCtl.generateIframe(link);\r\n    },\r\n\r\n    showShareDialog: function (divElement) {\r\n        const self = this;\r\n        const dialogDiv = self.getDiv(divElement);\r\n        const shareDialog = dialogDiv.querySelector('.' + self.CLASS + '-share-dialog');\r\n        TC.Util.showModal(shareDialog, {\r\n            openCallback: function () {\r\n                self.onShowShareDialog(shareDialog).then(function () {\r\n                    self.map.trigger(TC.Consts.event.DIALOG, { control: self._shareCtl, action: \"share\" });\r\n                });\r\n            },\r\n            closeCallback: function () {\r\n                self.onCloseShareDialog();\r\n            }\r\n        });\r\n    },\r\n\r\n    onCloseShareDialog: function () {\r\n        const self = this;\r\n        self.toShare = self.toShare || {};\r\n        self.toShare.doZoom = false;\r\n        // para gestionar el zoom a la feature al compartir desde el control o el general, ya que la capa que contiene la feature no cambia por lo que no salta.\r\n        self.map.trigger(TC.Consts.event.MAPCHANGE);\r\n    }\r\n\r\n};"]}