{"version":3,"sources":["control/Elevation.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","Elevation","apply","this","arguments","displayElevation","resultsPanel","inherit","ctlProto","prototype","CLASS","elevationProfileCache","WeakMap","register","map","self","Promise","resolve","reject","call","then","on","Consts","event","FEATUREMODIFY","FEATUREREMOVE","FEATURESCLEAR","e","feature","delete","catch","error","getElevationTool","proxyObj","options","elevation","ctl","displayElevationProfile","featureOrCoords","coords","Polyline","geometry","MultiPolyline","Feature","getProfilePanel","open","renderProfile","profile","renderPromise","renderElevationProfile","setCurrentFeature","get","li","getLoadingIndicator","waitId","addWait","tool","timestamp","Date","now","_depTimestamp","elevationOptions","crs","coordinates","partialCallback","elevCoords","removeWait","distance","maxElevation","Number","NEGATIVE_INFINITY","minElevation","POSITIVE_INFINITY","utmCrs","Util","reproject","point","idx","arr","prev","dx","dy","Math","sqrt","ele","max","min","length","push","elevationData","x","elm","elevationGainOptions","hillDeltaThreshold","extend","getElevationGain","data","set","sampleNumber","resolution","getElevation","resetElevationProfile","createProfilePanel","resultsPanelOptions","id","getUID","content","titles","main","getLocaleString","chart","ctx","onmouseout","removeElevationTooltip","tooltip","getElevationTooltip","addControlPromise","addResultsPanelChart","controlContainer","position","POSITION","RIGHT","addControl","displayOn","getControlsByClass","toUpperCase","substring","div","document","createElement","appendChild","caller","_decorateChartPanel","async","_resultsPanelPromise","elevationProfileChartData","upHill","downHill","openChart","profileData","classList","contains","classes","HIDDEN","isMinimized","show","closeElevationProfile","close","that","currentFeature","toggleSelectedStyle","d","wrap","showElevationMarker","layer","getElevationChartTooltip","hideElevationMarker"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.Elevation = function () {\r\n    const self = this;\r\n\r\n    TC.Control.apply(self, arguments);\r\n\r\n    self.displayElevation = true;\r\n    self.resultsPanel = null;\r\n};\r\n\r\nTC.inherit(TC.control.Elevation, TC.Control);\r\n\r\n(function () {\r\n    const ctlProto = TC.control.Elevation.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-elev';\r\n\r\n    const elevationProfileCache = new WeakMap();\r\n\r\n    const getElevationProfileFromCache = function (feature) {\r\n        return elevationProfileCache.get(feature);\r\n    };\r\n\r\n    const cacheElevationProfile = function (feature, data) {\r\n        elevationProfileCache.set(feature, data);\r\n    };\r\n\r\n    const removeElevationProfileFromCache = function (feature) {\r\n        elevationProfileCache.delete(feature);\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            TC.Control.prototype.register.call(self, map).then(function () {\r\n\r\n                map.on(TC.Consts.event.FEATUREMODIFY + ' ' + TC.Consts.event.FEATUREREMOVE + ' ' + TC.Consts.event.FEATURESCLEAR, function (e) {\r\n                    removeElevationProfileFromCache(e.feature);\r\n                });\r\n\r\n                resolve(self);\r\n\r\n            }).catch(function (error) {\r\n                reject(error);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.getElevationTool = function () {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            const proxyObj = {\r\n                options: {\r\n                    displayElevation: self.options || true\r\n                },\r\n                elevation: self.elevation,\r\n                map: self.map\r\n            };\r\n            TC.Control.prototype.getElevationTool.call(proxyObj).then(ctl => {\r\n                self.elevation = ctl;\r\n                resolve(ctl);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.displayElevationProfile = function (featureOrCoords) {\r\n        const self = this;\r\n        let coords;\r\n        switch (true) {\r\n            case TC.feature.Polyline && featureOrCoords instanceof TC.feature.Polyline:\r\n                coords = featureOrCoords.geometry;\r\n                break;\r\n            case TC.feature.MultiPolyline && featureOrCoords instanceof TC.feature.MultiPolyline:\r\n                coords = featureOrCoords.geometry[0];\r\n                break;\r\n            case featureOrCoords instanceof TC.Feature:\r\n                return;\r\n            default:\r\n                coords = featureOrCoords;\r\n        }\r\n        self.getProfilePanel().then(function (resultsPanel) {\r\n            resultsPanel.open();\r\n        });\r\n        const renderProfile = function (profile) {\r\n            self.getProfilePanel().then(function (resultsPanel) {\r\n                resultsPanel.renderPromise().then(function () {\r\n                    self.renderElevationProfile(profile);\r\n                });\r\n            });\r\n        };\r\n        if (featureOrCoords instanceof TC.Feature) {\r\n            self.getProfilePanel().then(function (resultsPanel) {\r\n                resultsPanel.setCurrentFeature(featureOrCoords);\r\n            });\r\n            const profile = getElevationProfileFromCache(featureOrCoords);\r\n            if (profile) {\r\n                renderProfile(profile);\r\n                return;\r\n            }\r\n        }\r\n        const li = self.map.getLoadingIndicator();\r\n        const waitId = li && li.addWait();\r\n        self.getElevationTool().then(function (tool) {\r\n            const timestamp = Date.now();\r\n            self._depTimestamp = timestamp;\r\n            const elevationOptions = {\r\n                crs: self.map.crs,\r\n                coordinates: coords,\r\n                partialCallback: function (elevCoords) {\r\n                    li && li.removeWait(waitId);\r\n                    if (timestamp === self._depTimestamp) { // Evitamos que una petición anterior machaque una posterior\r\n                        let distance = 0.0;\r\n                        let maxElevation = Number.NEGATIVE_INFINITY;\r\n                        let minElevation = Number.POSITIVE_INFINITY;\r\n                        if (self.map.crs !== self.map.options.utmCrs) {\r\n                            elevCoords = TC.Util.reproject(elevCoords, self.map.crs, self.map.options.utmCrs);\r\n                        }\r\n                        const profile = elevCoords\r\n                            .map(function calculateDistanceAndExtremes(point, idx, arr) {\r\n                                let prev = idx === 0 ? point : arr[idx - 1];\r\n                                const dx = point[0] - prev[0];\r\n                                const dy = point[1] - prev[1];\r\n                                distance += Math.sqrt(dx * dx + dy * dy);\r\n                                var ele = point[2];\r\n                                if (typeof ele === 'number') {\r\n                                    maxElevation = Math.max(ele, maxElevation);\r\n                                    minElevation = Math.min(ele, minElevation);\r\n                                }\r\n                                return [distance, ele];\r\n                            });\r\n                        if (profile.length === 1) {\r\n                            // Espera una línea, duplicamos el punto para que no se rompa el renderizado del gráfico\r\n                            profile.push(profile[0]);\r\n                        }\r\n                        const elevationData = {\r\n                            x: profile.map(function (elm) {\r\n                                return elm[0];\r\n                            }),\r\n                            ele: profile.map(function (elm) {\r\n                                return elm[1];\r\n                            }),\r\n                            coords: elevCoords\r\n                        };\r\n                        const elevationGainOptions = {\r\n                            coords: elevCoords\r\n                        };\r\n                        if (typeof self.options.displayElevation === 'object') {\r\n                            elevationGainOptions.hillDeltaThreshold = self.map.options.elevation.hillDeltaThreshold || self.options.displayElevation.hillDeltaThreshold;\r\n                        }\r\n                        TC.Util.extend(elevationData, TC.tool.Elevation.getElevationGain(elevationGainOptions));\r\n\r\n                        // Cacheamos el perfil\r\n                        if (featureOrCoords instanceof TC.Feature) {\r\n                            cacheElevationProfile(featureOrCoords, elevationData);\r\n                        }\r\n\r\n                        renderProfile(elevationData);\r\n                    }\r\n                }\r\n            };\r\n            if (tool.options.sampleNumber) {\r\n                elevationOptions.resolution = 0;\r\n            }\r\n            tool.getElevation(elevationOptions).catch(function (error) {\r\n                self.resetElevationProfile();\r\n                li && li.removeWait(waitId);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.createProfilePanel = function () {\r\n        const self = this;\r\n\r\n        const resultsPanelOptions = {\r\n            id: self.getUID(),\r\n            content: \"chart\",\r\n            titles: {\r\n                main: self.getLocaleString(\"geo.trk.chart.chpe\"),\r\n                max: self.getLocaleString(\"geo.trk.chart.chpe\")\r\n            },\r\n            chart: {\r\n                ctx: self,\r\n                onmouseout: ctlProto.removeElevationTooltip,\r\n                tooltip: ctlProto.getElevationTooltip\r\n            }\r\n        };\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            var addControlPromise;\r\n            const addResultsPanelChart = function (controlContainer) {\r\n                resultsPanelOptions.position = controlContainer.POSITION.RIGHT;\r\n                addControlPromise = controlContainer.addControl('resultsPanel', resultsPanelOptions);\r\n            };\r\n\r\n            if (self.options.displayOn) {\r\n                var controlContainer = self.map.getControlsByClass('TC.control.' + self.options.displayOn[0].toUpperCase() + self.options.displayOn.substring(1))[0];\r\n                if (!controlContainer) {\r\n                    self.map.addControl(self.options.displayOn).then(addResultsPanelChart);\r\n                } else {\r\n                    addResultsPanelChart(controlContainer);\r\n                }\r\n            } else {\r\n                resultsPanelOptions.div = document.createElement('div');\r\n                self.map.div.appendChild(resultsPanelOptions.div);\r\n                addControlPromise = self.map.addControl('resultsPanel', resultsPanelOptions);\r\n            }\r\n\r\n            addControlPromise.then(function (resultsPanel) {\r\n                resultsPanel.caller = self;\r\n                self.resultsPanel = resultsPanel;\r\n                self._decorateChartPanel();\r\n                resolve(resultsPanel);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.getProfilePanel = async function () {\r\n        const self = this;\r\n        if (!self._resultsPanelPromise) {\r\n            self._resultsPanelPromise = self.createProfilePanel();\r\n        }\r\n        return await self._resultsPanelPromise;\r\n    };\r\n\r\n    ctlProto.resetElevationProfile = function () {\r\n        const self = this;\r\n        if (self.options.displayElevation && self.resultsPanel) {\r\n            self.elevationProfileChartData = {\r\n                x: [0],\r\n                ele: [0],\r\n                coords: [0, 0, 0],\r\n                upHill: 0,\r\n                downHill: 0\r\n            };\r\n            self.resultsPanel.openChart(self.elevationProfileChartData);\r\n        }\r\n    };\r\n\r\n    ctlProto.renderElevationProfile = function (profileData) {\r\n        const self = this;\r\n        self.elevationProfileChartData = profileData || self.elevationProfileChartData;\r\n        self.getProfilePanel().then(function (resultsPanel) {\r\n            if (!resultsPanel.div.classList.contains(TC.Consts.classes.HIDDEN)) {\r\n                resultsPanel.openChart(self.elevationProfileChartData);\r\n                if (!resultsPanel.isMinimized()) {\r\n                    resultsPanel.show();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto.closeElevationProfile = function () {\r\n        const self = this;\r\n        self.getProfilePanel().then(function (resultsPanel) {\r\n            resultsPanel.close();\r\n        });\r\n    };\r\n\r\n    ctlProto._decorateChartPanel = function () {\r\n        const self = this;\r\n        self.resultsPanel.setCurrentFeature = function (feature) {\r\n            const that = this;\r\n            if (that.currentFeature) {\r\n                that.currentFeature.toggleSelectedStyle(false);\r\n            }\r\n            that.currentFeature = feature;\r\n            if (feature) {\r\n                feature.toggleSelectedStyle(true);\r\n            }\r\n        };\r\n    };\r\n\r\n    ctlProto.getElevationTooltip = function (d) {\r\n        const self = this;\r\n        self.resultsPanel.wrap.showElevationMarker({\r\n            data: d,\r\n            layer: self.resultsPanel.currentFeature && self.resultsPanel.currentFeature.layer,\r\n            coords: self.elevationProfileChartData.coords\r\n        });\r\n\r\n        return self.resultsPanel.getElevationChartTooltip(d);\r\n    };\r\n\r\n    ctlProto.removeElevationTooltip = function () {\r\n        const self = this;\r\n        self.resultsPanel.wrap.hideElevationMarker();\r\n    }\r\n\r\n})();"]}