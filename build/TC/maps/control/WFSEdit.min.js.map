{"version":3,"sources":["control/WFSEdit.js"],"names":["TC","control","SWCacheClient","syncLoadJS","apiLocation","WFSEdit","self","this","apply","arguments","serviceWorkerIsRequired","options","_classSelector","CLASS","layer","callback","Util","isFunction","layersEditData","showsOriginalFeatures","showOriginalFeatures","highlightsAdded","highlightsModified","highlightsRemoved","highlightChanges","getBeforeEditLayerStyleFunction","getBeforeEditLayerStyle","styles","point","fillColor","fillOpacity","strokeColor","strokeWidth","strokeOpacity","radius","line","polygon","inherit","newFeatureIdNumber","setSyncState","ctl","layerEditData","getLayerEditData","_saveBtn","disabled","navigator","onLine","checkedOut","isSyncing","setEditState","enabled","div","querySelector","classList","toggle","Consts","classes","HIDDEN","type","layerType","WFS","WMS","wfsLayer","isLayerCropped","filter","Bbox","properties","_recropBtn","setChangesButtonsState","_discardBtn","setChangedState","isChanged","loadJS","window","localforage","url","LOCALFORAGE","storagePrefix","getStoragePrefix","keys","then","i","len","length","indexOf","storeFeature","key","feature","Promise","resolve","reject","obj","geometryType","Polygon","geom","POLYGON","Polyline","POLYLINE","Point","POINT","MultiPolygon","MULTIPOLYGON","MultiPolyline","MULTIPOLYLINE","id","provId","attributes","data","geometry","setItem","catch","error","deleteFeature","removeItem","Error","LOCAL_STORAGE_KEY_PREFIX","featureType","featureNS","getLayerStoreID","getAddedStoragePrefix","LOCAL_STORAGE_ADDED_KEY_PREFIX","getModifiedStoragePrefix","LOCAL_STORAGE_MODIFIED_KEY_PREFIX","getRemovedStoragePrefix","LOCAL_STORAGE_REMOVED_KEY_PREFIX","getLayerTitle","getPath","join","title","ctlProto","prototype","template","1","container","depth0","helpers","partials","alias1","lambda","alias2","escapeExpression","lookupProperty","parent","propertyName","Object","hasOwnProperty","call","3","compiler","main","stack1","nullContext","alias3","name","hash","loc","start","column","end","fn","program","inverse","noop","useData","register","map","addEventListener","_editPromise","addControl","getUID","downloadElevation","snapping","editControl","getAvailableFeaturesToImport","candidates","getPrototypeOf","getLayer","addedFeaturesLayer","modifiedFeaturesLayer","removedFeaturesLayer","beforeEditLayer","importFeatures","features","featuresToImport","newFeatures","constructor","geometryName","on","event","DRAWEND","e","serializable","_storeFeatureAdd","FEATUREMODIFY","feat","fid","storeSuccess","storeFailure","getLocaleString","storedFeature","getFeatureById","setCoords","setData","getData","addFeature","_createAuxFeature","FEATUREADD","FEATUREREMOVE","_storeFeatureRemove","workLayers","forEach","addLayer","LAYERUPDATE","readOnly","getEditableLayer","l","cacheLayer","err","console","log","ZOOM","LAYERADD","LAYERREMOVE","_removingLayer","wmsLayer","setLayer","option","_layerSelect","parentElement","removeChild","LAYERERROR","reason","WFSErrors","MAX_NUM_FEATURES","toast","limit","msgType","WARNING","removeLayer","loaded","wfsLayers","elm","stealth","ready","getControlsByClass","addLayerTool","renderFn","layerId","className","button","text","document","createElement","innerHTML","setAttribute","add","dataset","appendChild","LOADING","getWFSCapabilities","finally","remove","updateEvents","BEFORELAYERUPDATE","CONTROLACTIVATE","CONTROLDEACTIVATE","updateFn","setTimeout","ACTIVE","isRaster","names","actionFn","prevLayer","openEditSession","render","editLayers","wl","push","_set1stRenderPromise","Control","renderData","layers","controlId","_layerDiv","value","viewToolsDiv","_editingWatch","_beforeEditLayerWatch","_addedWatch","_modifiedWatch","_removedWatch","target","checked","highlightAdded","highlightModified","highlightRemoved","colorRegExp","RegExp","onColorClick","input","match","click","onColorChange","prefix","newColor","setStyles","src","getLegendImage","addedColorInputId","CLICK","passive","getElementById","modifiedColorInputId","removedColorInputId","confirm","layerTitle","applyEdits","discardEdits","reload","getExtent","getCRS","refresh","editedFeatures","concat","Geometry","featuresOutside","extent","bbox","ii","intersects","isBase","renderPromise","appendOption","message","selector","mapLayer","setNewLayer","editableLayer","endProcess","_enableEditSerialization","getEditControl","c","setMode","closeEditSession","newFeature","removeFeature","removedStoragePrefix","result","setStyle","setId","getServiceWorker","gfUrl","wrap","getGetFeatureUrl","dftUrl","getDescribeFeatureTypeUrl","createCache","urlList","getFeatureType","li","getLoadingIndicator","waitId","addWait","describeFeatureType","attr","getGeometryType","substr","removeWait","_addAuxLayersToMap","beLayer","afLayer","mfLayer","rfLayer","all","idx","setVisibility","insertLayer","newIdx","getAddedFeaturesLayerStyle","getModifiedFeaturesLayerStyle","getRemovedFeaturesLayerStyle","setComplexGeometry","activate","modes","Edit","mode","MODIFY","OTHER","ADDPOINT","ADDLINE","ADDPOLYGON","constrainModes","VECTOR","deactivate","BLANK_IMAGE","previousLayer","removePromises","notEditableErrorMsg","getCapabilitiesPromise","capabilities","getDisgregatedLayerNames","fullLayerName","colonIdx","shortLayerName","substring","FeatureTypes","Vector","async","wfsLayerOptions","getWFSURL","outputFormat","format","JSON","isLayerEdited","some","optionalLayer","MULTIPOINT","getLegendImageFromStyle","baseTitle","extend","owner","aflIsOld","zIndex","mflIsOld","rflIsOld","featurePromises","removedFeature","f","modifiedFeature","addedFeature","addedStoragePrefix","modifiedStoragePrefix","res","rej","getItem","readFeature","k","clone","addPromise","idNumber","parseInt","lastIndexOf","Math","max","addPoint","addPolyline","addPolygon","addMultiPolyline","addMultiPolygon","newFeat","state","Layer","IDLE","onLayerUpdate","off","modified","unmodifiedFeature","newData","oldValue","newValue","response","transactionSummary","totalInserted","totalUpdated","totalDeleted","deleteCache","INFO","code","msgErrorMode","TOAST","CONSOLE","_joinedFeatureAttributes","clearFeatures","setSelectedFeatures","modifyControl","closeAttributes","show","highlight","getStyleFromFeatureType","getNegativeColor","color","rgba","getRGBA","toString","padStart","dash","lineDash","colorizeLayer","addedCustomColor","modifiedCustomColor","removedCustomColor"],"mappings":"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","sourcesContent":["\r\n/**\r\n  * Opciones del editor de capas WFS.\r\n  * \r\n  * Si se desea que este control pueda funcionar en sesiones sin acceso a Internet, es necesario instalar \r\n  * en el ámbito de la aplicación que contiene el visor el _[Service Worker](https://developer.mozilla.org/es/docs/Web/API/Service_Worker_API)_ \r\n  * creado para el funcionamiento de este control en modo desconectado.\r\n  * Para ello basta con copiar el archivo [tc-cb-service-worker.js](https://raw.githubusercontent.com/sitna/api-sitna/master/TC/workers/tc-cb-service-worker.js) a la carpeta raíz de dicha aplicación.\r\n  * @typedef WFSEditOptions\r\n  * @extends ControlOptions\r\n  * @ignore\r\n  * @see MapControlOptions\r\n  * @property {HTMLElement|string} [div] - Elemento del DOM en el que crear el control o valor de atributo id de dicho elemento.\r\n  * @property {ElevationOptions|boolean} [downloadElevation=false] - Si se establece a un valor verdadero, el control ofrecerá la opción de añadir elevaciones \r\n  * a las geometrías cuando se descarguen las entidades.\r\n  * @property {boolean} [highlightChanges=true] - Si se establece a un valor verdadero, se resaltarán en el mapa con estilo distintivo\r\n  * las entidades modificadas, con un estilo distinto según el tipo de edición (entidad añadida, modificada o eliminada).\r\n  * @property {boolean} [showOriginalFeatures=false] - Si se establece a un valor verdadero, se mostrarán en el mapa las entidades\r\n  * modificadas junto con las mismas entidades antes de ser modificadas, para poder establecer comparaciones.\r\n  * @property {boolean} [snapping=true] - Si se establece a un valor verdadero, la edición de geometrías tendrá un comportamiento \r\n  * en el que los vértices se \"pegarán\" y alinearán con otros vértices y aristas al acercarlos a ellos, a la manera de imanes.\r\n  * @property {StyleOptions} [styles] - Opciones de los estilos de las entidades editadas, por tipo de geometría.\r\n  * @example <caption>[Ver en vivo](../examples/cfg.WFSEditOptions.html)</caption> {@lang html}\r\n  * <div id=\"mapa\"></div>\r\n  * <script>\r\n  *     // Establecemos un layout simplificado apto para hacer demostraciones de controles.\r\n  *     SITNA.Cfg.layout = \"layout/ctl-container\";\r\n  *     // Añadimos el control multiFeatureInfo.\r\n  *     SITNA.Cfg.controls.WFSEdit = {\r\n  *         div: \"slot1\",\r\n  *         downloadElevation: { // Si se desacargan las entidades, se ofrece la opción de añadirles elevaciones\r\n  *             resolution: 20 // Si se interpolan puntos intermedios, por defecto se añadirán cada 20 metros\r\n  *         }\r\n  *     };\r\n  *     // Añadimos una capa WMS sobre la que hacer las consultas.\r\n  *     // El servicio WMS de IDENA tiene un servicio WFS asociado (imprescindible para consultas por línea o recinto).\r\n  *     SITNA.Cfg.workLayers = [\r\n  *         {\r\n  *             id: \"cp\",\r\n  *             type: SITNA.Consts.layerType.WMS,\r\n  *             url: \"https://idena.navarra.es/ogc/wms\",\r\n  *             layerNames: [\"IDENA:PATRIM_Pol_Merindades\"]\r\n  *         }\r\n  *     ];\r\n  *     var map = new SITNA.Map(\"mapa\");\r\n  * </script>\r\n  */\r\n\r\nTC.control = TC.control || {};\r\n\r\nif (!TC.control.SWCacheClient) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/SWCacheClient');\r\n}\r\n\r\nTC.control.WFSEdit = function () {\r\n    const self = this;\r\n\r\n    TC.control.SWCacheClient.apply(this, arguments);\r\n    self.serviceWorkerIsRequired = self.options.serviceWorkerIsRequired || false;\r\n\r\n    self._classSelector = '.' + self.CLASS;\r\n\r\n    self.layer = null;\r\n    //self.feature = self.options.feature ? self.options.feature : null;\r\n    self.callback = TC.Util.isFunction(arguments[2]) ? arguments[2] : (self.options.callback ? self.options.callback : null);\r\n    self.layersEditData = {};\r\n    self.showsOriginalFeatures = (typeof self.options.showOriginalFeatures === 'boolean') ? self.options.showOriginalFeatures : false;\r\n    self.highlightsAdded = self.highlightsModified = self.highlightsRemoved = (typeof self.options.highlightChanges === 'boolean') ? self.options.highlightChanges : true;\r\n    if (!TC.Util.isFunction(self.options.getBeforeEditLayerStyleFunction)) {\r\n        self.getBeforeEditLayerStyleFunction = self.getBeforeEditLayerStyle;\r\n    }\r\n    self.styles = self.options.styles || {\r\n        point: {\r\n            fillColor: \"#0000aa\",\r\n            fillOpacity: 0.1,\r\n            strokeColor: \"#0000aa\",\r\n            strokeWidth: 2,\r\n            strokeOpacity: 1,\r\n            radius: 6\r\n        },\r\n        line: {\r\n            strokeColor: \"#0000aa\",\r\n            strokeWidth: 2,\r\n            strokeOpacity: 1\r\n        },\r\n        polygon: {\r\n            fillColor: \"#0000aa\",\r\n            fillOpacity: 0.1,\r\n            strokeColor: \"#0000aa\",\r\n            strokeWidth: 2,\r\n            strokeOpacity: 1\r\n        }\r\n    }\r\n};\r\n\r\nTC.inherit(TC.control.WFSEdit, TC.control.SWCacheClient);\r\n\r\n(function () {\r\n    var newFeatureIdNumber = 0;\r\n    const getNewFeatureId = function () {\r\n        return \"NewFeature.\" + newFeatureIdNumber++;\r\n    };\r\n\r\n    const setSyncState = function (ctl) {\r\n        const layerEditData = ctl.getLayerEditData();\r\n        ctl._saveBtn.disabled = !(navigator.onLine && layerEditData && layerEditData.checkedOut) || ctl.isSyncing;\r\n    };\r\n\r\n    const setEditState = function (ctl, enabled) {\r\n        ctl.div.querySelector(ctl._classSelector + '-view').classList.toggle(TC.Consts.classes.HIDDEN, !enabled || !ctl.layer || !(ctl.layer.type === TC.Consts.layerType.WFS || ctl.layer.type === TC.Consts.layerType.WMS));\r\n        if (ctl.layer && ctl.layer.wfsLayer) {\r\n            const isLayerCropped = TC.filter && TC.filter.Bbox && ctl.layer.wfsLayer.properties instanceof TC.filter.Bbox;\r\n            ctl._recropBtn.classList.toggle(TC.Consts.classes.HIDDEN, !isLayerCropped);\r\n        }\r\n        ctl.div.querySelector(ctl._classSelector + '-edit').classList.toggle(TC.Consts.classes.HIDDEN, !enabled);\r\n    };\r\n\r\n    const setChangesButtonsState = function (ctl) {\r\n        setSyncState(ctl);\r\n        const layerEditData = ctl.getLayerEditData();\r\n        ctl._discardBtn.disabled = !layerEditData || !layerEditData.checkedOut;\r\n    };\r\n\r\n    const setChangedState = function (ctl, isChanged) {\r\n        if (ctl.layer) {\r\n            const layerEditData = ctl.getLayerEditData();\r\n            if (typeof isChanged !== 'undefined') {\r\n                layerEditData.checkedOut = isChanged;\r\n                setChangesButtonsState(ctl);\r\n            }\r\n            else {\r\n                TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n                    var storagePrefix = getStoragePrefix(ctl);\r\n                    localforage.keys().then(function (keys) {\r\n                        if (keys) {\r\n                            var disabled = true;\r\n                            for (var i = 0, len = keys.length; i < len; i++) {\r\n                                if (keys[i].indexOf(storagePrefix) === 0) {\r\n                                    disabled = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            layerEditData.checkedOut = !disabled;\r\n                            setChangesButtonsState(ctl);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            setChangesButtonsState(ctl);\r\n        }\r\n    };\r\n\r\n    const storeFeature = function (key, feature) {\r\n        return new Promise(function (resolve, reject) {\r\n            TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n                var obj;\r\n                var geometryType;\r\n                switch (true) {\r\n                    case feature instanceof TC.feature.Polygon:\r\n                        geometryType = TC.Consts.geom.POLYGON;\r\n                        break;\r\n                    case feature instanceof TC.feature.Polyline:\r\n                        geometryType = TC.Consts.geom.POLYLINE;\r\n                        break;\r\n                    case feature instanceof TC.feature.Point:\r\n                        geometryType = TC.Consts.geom.POINT;\r\n                        break;\r\n                    case feature instanceof TC.feature.MultiPolygon:\r\n                        geometryType = TC.Consts.geom.MULTIPOLYGON;\r\n                        break;\r\n                    case feature instanceof TC.feature.MultiPolyline:\r\n                        geometryType = TC.Consts.geom.MULTIPOLYLINE;\r\n                        break;\r\n                }\r\n                obj = {\r\n                    id: feature.id || feature.provId,\r\n                    attributes: feature.data,\r\n                    type: geometryType,\r\n                    geometry: feature.geometry,\r\n                }\r\n                localforage.setItem(key, obj)\r\n                    .then(function () {\r\n                        resolve({ feature: feature });\r\n                    })\r\n                    .catch(function (error) {\r\n                        reject({ feature: feature, error: error });\r\n                    });\r\n            });\r\n        });\r\n    };\r\n\r\n\r\n    const deleteFeature = function (key) {\r\n        return new Promise(function (resolve, reject) {\r\n            TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n                localforage.removeItem(key)\r\n                    .then(function () {\r\n                        resolve(key);\r\n                    })\r\n                    .catch(function (error) {\r\n                        reject(Error(error));\r\n                    });\r\n            });\r\n        });\r\n    };\r\n\r\n    const readFeature = function (key) {\r\n        return new Promise(function (resolve, reject) {\r\n            TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n                localforage.getItem(key)\r\n                    .then(function (value) {\r\n                        resolve({\r\n                            key: key,\r\n                            feature: value\r\n                        });\r\n                    })\r\n                    .catch(function (error) {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        });\r\n    };\r\n\r\n    const getLayerStoreID = function (layer) {\r\n        let featureType = layer.options.featureType[0];\r\n        if (featureType.indexOf(':') < 0) {\r\n            featureType = layer.options.featureNS + ':' + featureType;\r\n        }\r\n        return featureType + '@' + layer.options.url;\r\n    };\r\n\r\n    const getStoragePrefix = function (ctl, layer) {\r\n        return ctl.LOCAL_STORAGE_KEY_PREFIX + getLayerStoreID(layer || ctl.layer.wfsLayer || ctl.layer);\r\n    };\r\n\r\n    const getAddedStoragePrefix = function (ctl, layer) {\r\n        return getStoragePrefix(ctl, layer) + ctl.LOCAL_STORAGE_ADDED_KEY_PREFIX;\r\n    };\r\n\r\n    const getModifiedStoragePrefix = function (ctl, layer) {\r\n        return getStoragePrefix(ctl, layer) + ctl.LOCAL_STORAGE_MODIFIED_KEY_PREFIX;\r\n    };\r\n\r\n    const getRemovedStoragePrefix = function (ctl, layer) {\r\n        return getStoragePrefix(ctl, layer) + ctl.LOCAL_STORAGE_REMOVED_KEY_PREFIX;\r\n    };\r\n\r\n    const getLayerTitle = function (layer) {\r\n        return layer.getPath ? layer.getPath().join(' • ') : (layer.title || layer.id)\r\n    };\r\n\r\n    const ctlProto = TC.control.WFSEdit.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-wfsedit';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/tc-ctl-wfsedit.hbs\";\r\n\r\n    ctlProto.LOCAL_STORAGE_KEY_PREFIX = \"TC.offline.edit.\";\r\n    ctlProto.LOCAL_STORAGE_ADDED_KEY_PREFIX = \".added.\";\r\n    ctlProto.LOCAL_STORAGE_MODIFIED_KEY_PREFIX = \".modified.\";\r\n    ctlProto.LOCAL_STORAGE_REMOVED_KEY_PREFIX = \".removed.\";\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            TC.control.SWCacheClient.prototype.register.call(self, map).then(function () {\r\n\r\n                window.addEventListener('online', function () {\r\n                    setSyncState(self);\r\n                });\r\n                window.addEventListener('offline', function () {\r\n                    setSyncState(self);\r\n                });\r\n\r\n                self._editPromise = map.addControl('edit', {\r\n                    id: self.getUID(),\r\n                    div: self.div.querySelector(`.${self.CLASS}-edit`),\r\n                    styles: self.styles,\r\n                    downloadElevation: self.options.downloadElevation,\r\n                    snapping: self.options.snapping\r\n                });\r\n                self._editPromise.then(function (ctl) {\r\n                    self.editControl = ctl;\r\n\r\n                    self.editControl.getAvailableFeaturesToImport = function () {\r\n                        const candidates = Object.getPrototypeOf(self.editControl).getAvailableFeaturesToImport.call(self.editControl);\r\n                        const layerEditData = self.getLayerEditData();\r\n                        return candidates.filter(obj => {\r\n                            const layer = map.getLayer(obj.id);\r\n                            return layer !== layerEditData.addedFeaturesLayer &&\r\n                                layer !== layerEditData.modifiedFeaturesLayer &&\r\n                                layer !== layerEditData.removedFeaturesLayer &&\r\n                                layer !== layerEditData.beforeEditLayer;\r\n                        });\r\n                    };\r\n                    self.editControl.importFeatures = function (features) {\r\n                        const featuresToImport = (features || this.featuresToImport || []);\r\n                        const layerEditData = self.getLayerEditData();\r\n                        const newFeatures = layerEditData.attributes ? featuresToImport.map(function (feature) {\r\n                            const properties = {};\r\n                            for (let key in layerEditData.attributes) {\r\n                                properties[key] = feature.data[key];\r\n                            }\r\n                            return new feature.constructor(feature.geometry, { geometryName: layerEditData.geometryName, data: properties });\r\n                        }) : features;\r\n                        Object.getPrototypeOf(self.editControl).importFeatures.call(self.editControl, newFeatures);\r\n                    };\r\n                    self.editControl\r\n                        .on(TC.Consts.event.DRAWEND, function (e) {\r\n                            if (self.getLayerEditData().serializable) {\r\n                                self._storeFeatureAdd(e.feature);\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.FEATUREMODIFY, function (e) {\r\n                            const feat = e.feature;\r\n                            const fid = feat.provId || feat.id;\r\n                            const storeSuccess = function () {\r\n                                setChangedState(self, true);\r\n                            };\r\n                            const storeFailure = function () {\r\n                                TC.error(self.getLocaleString('failedWhenSavingModifyOperationInSession'));\r\n                            };\r\n                            const layerEditData = self.getLayerEditData();\r\n                            if (layerEditData.serializable) {\r\n                                let storedFeature = layerEditData.addedFeaturesLayer.getFeatureById(fid);\r\n                                if (storedFeature) {\r\n                                    storedFeature.setCoords(feat.geometry);\r\n                                    storedFeature.setData(feat.getData());\r\n                                    storeFeature(getAddedStoragePrefix(self) + fid, feat).then(storeSuccess, storeFailure);\r\n                                }\r\n                                else {\r\n                                    storedFeature = layerEditData.modifiedFeaturesLayer.getFeatureById(fid);\r\n                                    if (storedFeature) {\r\n                                        storedFeature.setCoords(feat.geometry);\r\n                                        storedFeature.setData(feat.getData());\r\n                                    }\r\n                                    else {\r\n                                        layerEditData.modifiedFeaturesLayer.addFeature(self._createAuxFeature(feat));\r\n                                    }\r\n                                    storeFeature(getModifiedStoragePrefix(self) + fid, feat).then(storeSuccess, storeFailure);\r\n                                }\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.FEATUREADD, function (e) {\r\n                            if (self.getLayerEditData().serializable) {\r\n                                self._storeFeatureAdd(e.feature);\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.FEATUREREMOVE, function (e) {\r\n                            if (self.getLayerEditData().serializable) {\r\n                                self._storeFeatureRemove(e.feature);\r\n                            }\r\n                        });\r\n\r\n                    map.workLayers.forEach(layer => self.addLayer(layer));\r\n\r\n                    map\r\n                        .on(TC.Consts.event.LAYERUPDATE, function (e) {\r\n                            const layer = e.layer;\r\n                            if (layer.type === TC.Consts.layerType.WFS && !layer.options.readOnly) {\r\n                                self.getEditableLayer(layer)\r\n                                    .then(l => self.cacheLayer(l))\r\n                                    .catch(err => console.log('Layer not editable: ' + layer.id));\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.ZOOM, function (e) {\r\n                            map.workLayers\r\n                                .filter(l => l.wfsLayer)\r\n                                .filter(l => self.layer !== l)\r\n                                .forEach(function (layer) {\r\n                                    layer.wfsLayer = null;\r\n                                    self.getEditableLayer(layer);\r\n                                });\r\n                        })\r\n                        .on(TC.Consts.event.LAYERADD, function (e) {\r\n                            self.addLayer(e.layer);\r\n                        })\r\n                        .on(TC.Consts.event.LAYERREMOVE, function (e) {\r\n                            const layer = e.layer;\r\n                            if (self._removingLayer === layer) {\r\n                                return;\r\n                            }\r\n                            if (self.layer === layer || (layer.wmsLayer && self.layer === layer.wmsLayer)) {\r\n                                self.setLayer(null);\r\n                            }\r\n                            const option = self._layerSelect.querySelector(`option[value=\"${layer.id}\"]`);\r\n                            if (option) {\r\n                                option.parentElement.removeChild(option);\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.LAYERERROR, function (e) {\r\n                            const layer = e.layer;\r\n                            if (layer.type === TC.Consts.layerType.WFS && !layer.options.readOnly) {\r\n                                if (e.reason === TC.Consts.WFSErrors.MAX_NUM_FEATURES) {\r\n                                    map.toast(self.getLocaleString('query.msgTooManyResults', { limit: e.data.limit }), { type: TC.Consts.msgType.WARNING });\r\n                                }\r\n                                if (self.layer === layer || (self.layer && self.layer.wfsLayer === layer)) {\r\n                                    delete self.layersEditData[self.layer.id];\r\n                                    self.setLayer(null);\r\n                                }\r\n                                if (layer.wmsLayer) {\r\n                                    map.removeLayer(layer);\r\n                                    layer.wmsLayer.wfsLayer = null;\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                    resolve(self);\r\n                });\r\n\r\n                map.loaded(function () {\r\n                    self._layerSelect.disabled = false;\r\n\r\n                    if (self.options.layer) {\r\n                        self.setLayer(self.options.layer);\r\n                    }\r\n                    else {\r\n                        const wfsLayers = map.workLayers.filter(function (elm) {\r\n                            return elm.type === TC.Consts.layerType.WFS && !elm.options.stealth;\r\n                        });\r\n                        if (wfsLayers.length === 1) {\r\n                            self.setLayer(wfsLayers[0].id);\r\n                        }\r\n                        else {\r\n                            self.setLayer(null);\r\n                        }\r\n                    }\r\n\r\n                    self.showOriginalFeatures(self.showsOriginalFeatures);\r\n                });\r\n\r\n                map.ready(function () {\r\n                    map.getControlsByClass('TC.control.WorkLayerManager').forEach(function (ctl) {\r\n                        ctl.addLayerTool({\r\n                            renderFn: function (container, layerId) {\r\n                                const className = self.CLASS + '-btn-edit';\r\n                                let button = container.querySelector('button.' + className);\r\n                                if (!button) {\r\n                                    const text = self.getLocaleString('featureEditing');\r\n                                    button = document.createElement('button');\r\n                                    button.innerHTML = text;\r\n                                    button.setAttribute('title', text);\r\n                                    button.classList.add(className);\r\n                                    button.dataset.layerId = layerId;\r\n                                    container.appendChild(button);\r\n                                    const layer = map.getLayer(layerId);\r\n                                    if (layer.type === TC.Consts.layerType.WMS) {\r\n                                        button.classList.add(TC.Consts.classes.LOADING);\r\n                                        layer.getWFSCapabilities()\r\n                                            .catch(() => button.classList.add(TC.Consts.classes.HIDDEN))\r\n                                            .finally(() => button.classList.remove(TC.Consts.classes.LOADING));\r\n                                    }\r\n                                }\r\n                                return button;\r\n                            },\r\n                            updateEvents: [TC.Consts.event.BEFORELAYERUPDATE, TC.Consts.event.LAYERUPDATE, TC.Consts.event.LAYERERROR, TC.Consts.event.CONTROLACTIVATE, TC.Consts.event.CONTROLDEACTIVATE],\r\n                            updateFn: function (e) {\r\n                                const button = this;\r\n                                const layer = map.getLayer(button.dataset.layerId);\r\n                                setTimeout(() => {\r\n                                    button.classList.toggle(TC.Consts.classes.ACTIVE, self.layer === layer);\r\n                                }, 500);\r\n                                button.disabled = !layer || (layer.isRaster() && layer.names.length !== 1);\r\n                            },\r\n                            actionFn: function () {\r\n                                const button = this;\r\n                                const layer = map.getLayer(button.dataset.layerId);\r\n                                const prevLayer = self.layer;\r\n                                button.classList.remove(TC.Consts.classes.ACTIVE);\r\n                                if ((layer.names && layer.names.length === 1) || !layer.isRaster()) {\r\n                                    if (layer && prevLayer !== layer) {\r\n                                        self.setLayer(layer).then(() => {\r\n                                            //button.classList.toggle(TC.Consts.classes.ACTIVE, self.layer === layer);\r\n                                            self.openEditSession();\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        self.setLayer(null);\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        var editLayers = [];\r\n        if (self.map) {\r\n            for (var i = 0, len = self.map.workLayers.length; i < len; i++) {\r\n                var wl = self.map.workLayers[i];\r\n                if (wl.type === TC.Consts.layerType.WFS && !wl.options.stealth) {\r\n                    editLayers.push({\r\n                        id: wl.id,\r\n                        title: wl.title || wl.id\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return self._set1stRenderPromise(TC.Control.prototype.renderData.call(self, {\r\n            layers: editLayers,\r\n            showOriginalFeatures: self.showsOriginalFeatures,\r\n            highlightChanges: self.highlightsAdded || self.highlightsModified || self.highlightsRemoved,\r\n            controlId: self.id\r\n        }, function () {\r\n\r\n            self._layerDiv = self.div.querySelector(self._classSelector + '-layer');\r\n            self._layerSelect = self._layerDiv.querySelector(self._classSelector + '-layer-sel');\r\n            self._layerSelect.addEventListener('change', function (e) {\r\n                setEditState(self, false);\r\n                self.getEditableLayer(self._layerSelect.value)\r\n                    .then(function (layer) {\r\n                        self.setLayer(layer.wmsLayer || layer).then(function () {\r\n                            if (self.layer) {\r\n                                self.openEditSession();\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(() => {\r\n                        self.setLayer(null);\r\n                    });\r\n            });\r\n\r\n            const viewToolsDiv = self.div.querySelector(self._classSelector + '-view');\r\n\r\n            self._editingWatch = viewToolsDiv.querySelector(`.${self.CLASS}-view-watch`);\r\n            self._beforeEditLayerWatch = viewToolsDiv.querySelector(`.${self.CLASS}-view-original-watch`);\r\n            self._addedWatch = viewToolsDiv.querySelector(`.${self.CLASS}-view-added-watch`);\r\n            self._modifiedWatch = viewToolsDiv.querySelector(`.${self.CLASS}-view-modified-watch`);\r\n            self._removedWatch = viewToolsDiv.querySelector(`.${self.CLASS}-view-removed-watch`);\r\n\r\n            viewToolsDiv.querySelector(`#${self.CLASS}-view-original-cb-${self.id}`).addEventListener('change', function (e) {\r\n                self.showOriginalFeatures(e.target.checked);\r\n            });\r\n\r\n            viewToolsDiv.querySelector(`#${self.CLASS}-view-added-cb-${self.id}`).addEventListener('change', function (e) {\r\n                self.highlightAdded(e.target.checked);\r\n            });\r\n\r\n            viewToolsDiv.querySelector(`#${self.CLASS}-view-modified-cb-${self.id}`).addEventListener('change', function (e) {\r\n                self.highlightModified(e.target.checked);\r\n            });\r\n\r\n            viewToolsDiv.querySelector(`#${self.CLASS}-view-removed-cb-${self.id}`).addEventListener('change', function (e) {\r\n                self.highlightRemoved(e.target.checked);\r\n            });\r\n\r\n            const colorRegExp = new RegExp(`${self.CLASS}-view-clr-(.+)-${self.id}`);\r\n            const onColorClick = function (e) {\r\n                const input = this.parentElement.querySelector('input[type=color]');\r\n                const layerEditData = self.getLayerEditData();\r\n                const layer = layerEditData[input.id.match(colorRegExp)[1] + 'FeaturesLayer'];\r\n                switch (layerEditData.geometryType) {\r\n                    case TC.Consts.geom.POINT:\r\n                        input.value = layer.styles.point.strokeColor;\r\n                        break;\r\n                    case TC.Consts.geom.POLYLINE:\r\n                    case TC.Consts.geom.MULTIPOLYLINE:\r\n                        input.value = layer.styles.line.strokeColor;\r\n                        break;\r\n                    default:\r\n                        input.value = layer.styles.polygon.strokeColor;\r\n                        break;\r\n                }\r\n                input.click();\r\n            };\r\n\r\n            const onColorChange = function (e) {\r\n                const input = e.target;\r\n                const layerEditData = self.getLayerEditData();\r\n                const prefix = input.id.match(colorRegExp)[1];\r\n                const layer = layerEditData[prefix + 'FeaturesLayer'];\r\n                const newColor = layerEditData[prefix + 'CustomColor'] = input.value;\r\n                switch (layerEditData.geometryType) {\r\n                    case TC.Consts.geom.POINT:\r\n                        layer.styles.point.strokeColor = newColor;\r\n                        break;\r\n                    case TC.Consts.geom.POLYLINE:\r\n                    case TC.Consts.geom.MULTIPOLYLINE:\r\n                        layer.styles.line.strokeColor = newColor;\r\n                        break;\r\n                    default:\r\n                        layer.styles.polygon.strokeColor = newColor;\r\n                        layer.styles.polygon.fillColor = newColor;\r\n                        break;\r\n                }\r\n                layer.setStyles(layer.styles);\r\n                self[`_${prefix}Watch`].src = getLegendImage(layer, layerEditData.geometryType);\r\n            };\r\n\r\n            const addedColorInputId = `${self.CLASS}-view-clr-added-${self.id}`;\r\n            viewToolsDiv.querySelector(`label[for=\"${addedColorInputId}\"]`).addEventListener(TC.Consts.event.CLICK, onColorClick, { passive: true });\r\n            document.getElementById(addedColorInputId).addEventListener('change', onColorChange);\r\n\r\n            const modifiedColorInputId = `${self.CLASS}-view-clr-modified-${self.id}`;\r\n            viewToolsDiv.querySelector(`label[for=\"${modifiedColorInputId}\"]`).addEventListener(TC.Consts.event.CLICK, onColorClick, { passive: true });\r\n            document.getElementById(modifiedColorInputId).addEventListener('change', onColorChange);\r\n\r\n            const removedColorInputId = `${self.CLASS}-view-clr-removed-${self.id}`;\r\n            viewToolsDiv.querySelector(`label[for=\"${removedColorInputId}\"]`).addEventListener(TC.Consts.event.CLICK, onColorClick, { passive: true });\r\n            document.getElementById(removedColorInputId).addEventListener('change', onColorChange);\r\n\r\n            self._saveBtn = self.div.querySelector(self._classSelector + '-btn-save');\r\n            self._saveBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                TC.confirm(self.getLocaleString('edit.applyEdits.confirm', { layerTitle: getLayerTitle(self.layer) }), function () {\r\n                    self.applyEdits();\r\n                });\r\n            }, { passive: true });\r\n            \r\n            self._discardBtn = self.div.querySelector(self._classSelector + '-btn-discard');\r\n            self._discardBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                TC.confirm(self.getLocaleString('edit.discardEdits.confirm', { layerTitle: getLayerTitle(self.layer) }), function () {\r\n                    self.discardEdits();\r\n                });\r\n            }, { passive: true });\r\n\r\n            self._recropBtn = self.div.querySelector(`.${self.CLASS}-view button.${self.CLASS}-btn-crop`);\r\n            self._recropBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                if (self.layer) {\r\n                    const reload = () => {\r\n                        if (self.layer && self.layer.wfsLayer && TC.filter && TC.filter.Bbox && self.layer.wfsLayer.properties instanceof TC.filter.Bbox) {\r\n                            const layerEditData = self.getLayerEditData();\r\n                            self.layer.wfsLayer.properties = new TC.filter.Bbox(null, self.map.getExtent(), self.map.getCRS());\r\n                            self.layer.wfsLayer.refresh();\r\n                            if (layerEditData.beforeEditLayer) {\r\n                                layerEditData.beforeEditLayer.properties = self.layer.wfsLayer.properties;\r\n                                layerEditData.beforeEditLayer.refresh();\r\n                            }\r\n                        }\r\n                    };\r\n                    const layerEditData = self.getLayerEditData();\r\n                    const editedFeatures = layerEditData.addedFeaturesLayer.features.concat(layerEditData.modifiedFeaturesLayer.features, layerEditData.removedFeaturesLayer.features);\r\n                    if (editedFeatures.length) {\r\n                        TC.loadJS(\r\n                            !TC.Geometry,\r\n                            TC.apiLocation + 'TC/Geometry',\r\n                            function () {\r\n                                let featuresOutside = false;\r\n                                const extent = self.map.getExtent();\r\n                                const bbox = [[extent[0], extent[1]], [extent[0], extent[3]], [extent[2], extent[3]], [extent[2], extent[1]]];\r\n                                for (var i = 0, ii = editedFeatures.length; i < ii; i++) {\r\n                                    if (!TC.Geometry.intersects(editedFeatures[i].geometry, bbox)) {\r\n                                        featuresOutside = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (featuresOutside) {\r\n                                    TC.confirm(self.getLocaleString('refreshLayerToCurrentExtent.confirm'), function () {\r\n                                        reload();\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    reload();\r\n                                }\r\n                            }\r\n                        );\r\n                    }\r\n                    else {\r\n                        reload();\r\n                    }\r\n                    \r\n                }\r\n            }, { passive: true });\r\n\r\n            if (TC.Util.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        }));\r\n    };\r\n\r\n    ctlProto.addLayer = function (layer) {\r\n        const self = this;\r\n        const appendOption = function (layer) {\r\n            const option = document.createElement('option');\r\n            option.setAttribute('value', layer.id);\r\n            option.innerHTML = getLayerTitle(layer);\r\n            self.renderPromise().then(function () {\r\n                self._layerSelect.appendChild(option);\r\n            });\r\n        };\r\n        if (!layer.isBase && !layer.options.readOnly && !layer.options.stealth) {\r\n            self.getEditableLayer(layer)\r\n                .then(function (l) {\r\n                    // Añadimos opción cuando es una capa WMS con WFS asociado o una capa WFS independiente\r\n                    if (layer.isRaster() || !l.wmsLayer) {\r\n                        appendOption(layer);\r\n                    }\r\n                })\r\n                .catch((err) => console.log(`Layer ${layer.id} not editable. Reason: ${err.message}`));\r\n        }\r\n    };\r\n\r\n    ctlProto.setLayer = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            const map = self.map;\r\n            const selector = self.div.querySelector(self._classSelector + '-layer-sel');\r\n\r\n            layer = map.getLayer(layer);\r\n            const mapLayer = map.workLayers.filter(l => l === layer)[0];\r\n\r\n            const setNewLayer = function () {\r\n                if (mapLayer) {\r\n                    self.getEditableLayer(mapLayer)\r\n                        .then(function (editableLayer) {\r\n                            const endProcess = function () {\r\n                                self.layer = mapLayer;\r\n                                self._enableEditSerialization(mapLayer)\r\n                                    .then(function () {\r\n                                        self.getEditControl().then(c => {\r\n                                            selector.value = self.layer.id;\r\n                                            c.setMode(null);\r\n                                            c.setLayer(editableLayer);\r\n                                            resolve(self.layer);\r\n                                        });\r\n                                    })\r\n                                    .catch((err) => {\r\n                                        self.setLayer(null);\r\n                                        reject(err);\r\n                                    });\r\n                            };\r\n\r\n                            if (map.workLayers.indexOf(editableLayer) >= 0) {\r\n                                endProcess();\r\n                            }\r\n                            else {\r\n                                map.addLayer(editableLayer).then(endProcess);\r\n                            }\r\n                        })\r\n                        .catch(() => {\r\n                            self.setLayer(null);\r\n                            resolve(null);\r\n                        });\r\n                }\r\n                else {\r\n                    if (self.layer && self.layer.wfsLayer) {\r\n                        self._removingLayer = self.layer.wfsLayer;\r\n                    }\r\n                    self.getEditControl().then(c => {\r\n                        setEditState(self, false);\r\n                        //setChangedState(self, false);\r\n                        self.closeEditSession()\r\n                            .then(() => {\r\n                                selector.value = '';\r\n                                c.setMode(null);\r\n                                c.setLayer(null);\r\n                                self.layer = null;\r\n                                resolve(null);\r\n                            })\r\n                            .finally(() => {\r\n                                delete self._removingLayer;\r\n                            });\r\n                    });\r\n                }\r\n            };\r\n\r\n            if (layer === null || !self.layer) {\r\n                setNewLayer();\r\n            }\r\n            else {\r\n                if (self.layer.wfsLayer) {\r\n                    self._removingLayer = self.layer.wfsLayer;\r\n                }\r\n                self.closeEditSession().then(() => {\r\n                    if (mapLayer) {\r\n                        setNewLayer();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto._storeFeatureAdd = function (feature) {\r\n        const self = this;\r\n        feature.provId = getNewFeatureId();\r\n        const layerEditData = self.getLayerEditData();\r\n        const newFeature = self._createAuxFeature(feature);\r\n        layerEditData.addedFeaturesLayer.addFeature(newFeature);\r\n        storeFeature(getAddedStoragePrefix(self) + feature.provId, newFeature).then(function () {\r\n            setChangedState(self, true);\r\n            //self.map.toast(self.getLocaleString('addOperationSavedInSession'));\r\n        }, function () {\r\n            TC.error(self.getLocaleString('failedWhenSavingAddOperationInSession'));\r\n        });\r\n    };\r\n\r\n    ctlProto._storeFeatureRemove = function (feature) {\r\n        const self = this;\r\n        var fid = feature.provId || feature.id;\r\n        var storeSuccess = function () {\r\n            setChangedState(self);\r\n            //self.map.toast(self.getLocaleString('removeOperationSavedInSession'));\r\n        };\r\n        var storeFailure = function () {\r\n            TC.error(self.getLocaleString('failedWhenSavingRemoveOperationInSession'));\r\n        };\r\n        const layerEditData = self.getLayerEditData();\r\n        if (layerEditData.serializable) {\r\n            let storedFeature = layerEditData.addedFeaturesLayer.getFeatureById(fid);\r\n            if (!storedFeature) {\r\n                var removedStoragePrefix = getRemovedStoragePrefix(self);\r\n                storedFeature = layerEditData.modifiedFeaturesLayer.getFeatureById(fid);\r\n                if (!storedFeature) {\r\n                    storedFeature = layerEditData.removedFeaturesLayer.getFeatureById(fid);\r\n                    if (!storedFeature) {\r\n                        layerEditData.removedFeaturesLayer.addFeature(self._createAuxFeature(feature));\r\n                        storeFeature(removedStoragePrefix + fid, feature).then(storeSuccess, storeFailure);\r\n                    }\r\n                }\r\n                else {\r\n                    layerEditData.modifiedFeaturesLayer.removeFeature(storedFeature);\r\n                    layerEditData.removedFeaturesLayer.addFeature(self._createAuxFeature(feature));\r\n                    deleteFeature(getModifiedStoragePrefix(self) + fid).then(function () {\r\n                        storeSuccess();\r\n                        storeFeature(removedStoragePrefix + fid, feature).then(storeSuccess, storeFailure);\r\n                    }, storeFailure);\r\n                }\r\n            }\r\n            else {\r\n                layerEditData.addedFeaturesLayer.removeFeature(storedFeature);\r\n                deleteFeature(getAddedStoragePrefix(self) + fid).then(storeSuccess, storeFailure);\r\n            }\r\n        }\r\n    };\r\n\r\n    ctlProto._createAuxFeature = function (feature) {\r\n        const self = this;\r\n        const fid = feature.provId || feature.id;\r\n        const layerEditData = self.getLayerEditData();\r\n        const result = new feature.constructor(feature.geometry, { geometryName: layerEditData.geometryName, data: feature.getData() });\r\n        result.setStyle(null);\r\n        result.setId(fid);\r\n        return result;\r\n    };\r\n\r\n    ctlProto.getEditControl = function () {\r\n        const self = this;\r\n        return self._editPromise || new Promise(function (resolve, reject) {\r\n            self.renderPromise().then(() => resolve(self.editControl));\r\n        });\r\n    };\r\n\r\n    ctlProto.cacheLayer = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            self.getServiceWorker().then(function () {\r\n                if (navigator.onLine) {\r\n                    const gfUrl = layer.wrap.getGetFeatureUrl();\r\n                    const dftUrl = layer.getDescribeFeatureTypeUrl();\r\n                    if (gfUrl && dftUrl) {\r\n                        self.createCache(getStoragePrefix(self, layer), {\r\n                            urlList: [gfUrl, dftUrl]\r\n                        }).then(() => resolve(), error => reject(error));\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            }).catch(error => reject(error));\r\n        });\r\n    };\r\n\r\n    ctlProto.getFeatureType = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            layer = layer || self.layer;\r\n            const li = self.map.getLoadingIndicator();\r\n            const waitId = li && li.addWait();\r\n            layer.describeFeatureType()\r\n                .then(function (attributes) {\r\n                    self.getEditControl().then(function (editControl) {\r\n                        const layerEditData = self.getLayerEditData(layer);\r\n                        // recogemos los atributos no geométricos y definimos la geometría\r\n                        layerEditData.attributes = {};\r\n                        for (var key in attributes) {\r\n                            const attr = attributes[key];\r\n                            const geometryType = editControl.getGeometryType(attr.type);\r\n                            if (geometryType) {\r\n                                layerEditData.geometryName = attr.name;\r\n                                layerEditData.geometryType = typeof geometryType === 'boolean' ? null : geometryType;\r\n                            }\r\n                            else {\r\n                                layerEditData.attributes[key] = attr;\r\n                            }\r\n                        }\r\n                        for (var key in layerEditData.attributes) {\r\n                            const attr = layerEditData.attributes[key];\r\n                            attr.type = attr.type.substr(attr.type.indexOf(':') + 1);\r\n                        }\r\n                        resolve(layerEditData);\r\n                    });\r\n                })\r\n                .catch(function (err) {\r\n                    reject(err);\r\n                })\r\n                .finally(() => li && li.removeWait(waitId));\r\n        });\r\n    };\r\n\r\n    ctlProto._addAuxLayersToMap = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            const map = self.map;\r\n            layer = layer || self.layer;\r\n            const layerEditData = self.getLayerEditData(layer);\r\n            const beLayer = layerEditData.beforeEditLayer;\r\n            if (beLayer) {\r\n                const afLayer = layerEditData.addedFeaturesLayer;\r\n                const mfLayer = layerEditData.modifiedFeaturesLayer;\r\n                const rfLayer = layerEditData.removedFeaturesLayer;\r\n                Promise.all([\r\n                    map.addLayer(beLayer),\r\n                    map.addLayer(afLayer),\r\n                    map.addLayer(mfLayer),\r\n                    map.addLayer(rfLayer)\r\n                ]).then(function () {\r\n                    self.getEditableLayer(layer).then(function (editableLayer) {\r\n                        let idx = map.layers.indexOf(editableLayer);\r\n                        beLayer.setVisibility(self.showsOriginalFeatures);\r\n                        afLayer.setVisibility(self.highlightsAdded);\r\n                        mfLayer.setVisibility(self.highlightsModified);\r\n                        rfLayer.setVisibility(self.highlightsRemoved);\r\n                        map.insertLayer(beLayer, ++idx, function () {\r\n                            const newIdx = idx + 1;\r\n                            map.insertLayer(afLayer, newIdx);\r\n                            map.insertLayer(mfLayer, newIdx);\r\n                            map.insertLayer(rfLayer, newIdx);\r\n\r\n                            beLayer.setStyles(self.getBeforeEditLayerStyle(editableLayer));\r\n                            afLayer.setStyles(self.getAddedFeaturesLayerStyle(editableLayer));\r\n                            mfLayer.setStyles(self.getModifiedFeaturesLayerStyle(editableLayer));\r\n                            rfLayer.setStyles(self.getRemovedFeaturesLayerStyle(editableLayer));\r\n                            self._editingWatch.src = getLegendImage(editableLayer, layerEditData.geometryType);\r\n                            self._beforeEditLayerWatch.src = getLegendImage(beLayer, layerEditData.geometryType);\r\n                            self._addedWatch.src = getLegendImage(afLayer, layerEditData.geometryType);\r\n                            self._modifiedWatch.src = getLegendImage(mfLayer, layerEditData.geometryType);\r\n                            self._removedWatch.src = getLegendImage(rfLayer, layerEditData.geometryType);\r\n                            resolve();\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                reject(new Error(`No auxiliary layers for ${layer.id}`));\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto.openEditSession = function () {\r\n        const self = this;\r\n        if (!self.layer) {\r\n            return Promise.reject(Error('No layer set for editing'));\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            self.getFeatureType() // Obtenemos datos de los atributos y la geometría\r\n                .then(function (layerEditData) {\r\n\r\n                    self.getEditControl().then(function (editControl) {\r\n                        self.getEditableLayer(self.layer).then(function (editableLayer) {\r\n                            editControl.setLayer(editableLayer);\r\n                            switch (layerEditData.geometryType) {\r\n                                case TC.Consts.geom.MULTIPOLYLINE:\r\n                                case TC.Consts.geom.MULTIPOLYGON:\r\n                                    editControl.setComplexGeometry(true);\r\n                                    break;\r\n                                default:\r\n                                    editControl.setComplexGeometry(false);\r\n                                    break;\r\n                            }\r\n                            editControl.activate();\r\n                            setEditState(self, true);\r\n                            setChangedState(self);\r\n\r\n                            const modes = [TC.control.Edit.mode.MODIFY, TC.control.Edit.mode.OTHER];\r\n                            switch (layerEditData.geometryType) {\r\n                                case TC.Consts.geom.POINT:\r\n                                    modes.push(TC.control.Edit.mode.ADDPOINT);\r\n                                    break;\r\n                                case TC.Consts.geom.POLYLINE:\r\n                                case TC.Consts.geom.MULTIPOLYLINE:\r\n                                    modes.push(TC.control.Edit.mode.ADDLINE);\r\n                                    //modes.push(TC.control.Edit.mode.CUT);\r\n                                    break;\r\n                                case TC.Consts.geom.POLYGON:\r\n                                case TC.Consts.geom.MULTIPOLYGON:\r\n                                    modes.push(TC.control.Edit.mode.ADDPOLYGON);\r\n                                    //modes.push(TC.control.Edit.mode.CUT);\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            editControl.constrainModes(modes);\r\n                            editControl.setMode(TC.control.Edit.mode.MODIFY);\r\n\r\n                            self._addAuxLayersToMap()\r\n                                .then(() => resolve())\r\n                                .catch ((err) => reject(err));\r\n                        })\r\n                    });\r\n                })\r\n                .catch(function (err) {\r\n                    if (self.layer && self.layer.type === TC.Consts.layerType.VECTOR) {\r\n                        self.getEditControl().then(function (editControl) {\r\n                            editControl.activate();\r\n                            setEditState(self, true);\r\n                            editControl.setMode(TC.control.Edit.mode.MODIFY);\r\n                            resolve();\r\n                        });\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                });\r\n        });\r\n    };\r\n\r\n    ctlProto.closeEditSession = function () {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            self.renderPromise().then(function () {\r\n                setChangedState(self, false);\r\n                self.getEditControl().then(c => c.deactivate());\r\n                const layerEditData = self.getLayerEditData();\r\n                if (layerEditData && layerEditData.beforeEditLayer) {\r\n                    self._editingWatch.src = TC.Consts.BLANK_IMAGE;\r\n                    self._beforeEditLayerWatch.src = TC.Consts.BLANK_IMAGE;\r\n                    self._addedWatch.src = TC.Consts.BLANK_IMAGE;\r\n                    self._modifiedWatch.src = TC.Consts.BLANK_IMAGE;\r\n                    self._removedWatch.src = TC.Consts.BLANK_IMAGE;\r\n                    const previousLayer = self.layer;\r\n                    self.getEditableLayer(self.layer).then(function (editableLayer) {\r\n                        const removePromises = []\r\n                        const removeLayer = function (layer) {\r\n                            if (map.workLayers.indexOf(layer) >= 0) {\r\n                                removePromises.push(map.removeLayer(layer));\r\n                            }\r\n                        };\r\n                        removeLayer(layerEditData.beforeEditLayer);\r\n                        removeLayer(layerEditData.beforeEditLayer);\r\n                        removeLayer(layerEditData.addedFeaturesLayer);\r\n                        removeLayer(layerEditData.modifiedFeaturesLayer);\r\n                        removeLayer(layerEditData.removedFeaturesLayer);\r\n                        if (previousLayer !== editableLayer) {\r\n                            previousLayer.wfsLayer = null;\r\n                            removeLayer(editableLayer);\r\n                        }\r\n                        Promise.all(removePromises).then(() => resolve());\r\n                    });\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.getEditableLayer = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            const notEditableErrorMsg = `Layer ${layer.id} not editable`;\r\n            const map = self.map;\r\n            layer = map ? map.getLayer(layer) : layer;\r\n            if (layer) {\r\n                if (layer.type === TC.Consts.layerType.WFS && (layer.wmsLayer || (!layer.options.stealth && !layer.options.readOnly))) {\r\n                    layer.getCapabilitiesPromise().then(() => resolve(layer));\r\n                }\r\n                else if (layer.type === TC.Consts.layerType.WMS) {\r\n                    if (layer.wfsLayer) {\r\n                        layer.wfsLayer.getCapabilitiesPromise().then(() => resolve(layer.wfsLayer));\r\n                    }\r\n                    else {\r\n                        layer.getWFSCapabilities()\r\n                            .then(function (capabilities) {\r\n                                //comprobamos que la solo es una capa y existe en el capabilities del WFS\r\n                                const layers = layer.getDisgregatedLayerNames();\r\n                                const fullLayerName = layers[0];\r\n                                const colonIdx = fullLayerName.indexOf(':');\r\n                                const shortLayerName = fullLayerName.substring(colonIdx + 1);\r\n                                const prefix = 'Edicion'; //fullLayerName.substr(0, colonIdx + 1);\r\n                                if (layers.length !== 1 || capabilities.FeatureTypes.hasOwnProperty(shortLayerName)) {\r\n                                    TC.loadJS(\r\n                                        !TC.layer.Vector,\r\n                                        TC.apiLocation + 'TC/layer/Vector',\r\n                                        function () {\r\n                                            TC.loadJS(\r\n                                                !TC.filter,\r\n                                                TC.apiLocation + 'TC/filter',\r\n                                                async function () {\r\n                                                    const wfsLayerOptions = {\r\n                                                        id: self.getUID(),\r\n                                                        type: TC.Consts.layerType.WFS,\r\n                                                        url: await layer.getWFSURL(),\r\n                                                        properties: map ? new TC.filter.Bbox(null, map.getExtent(), map.getCRS()) : null,\r\n                                                        outputFormat: TC.Consts.format.JSON,\r\n                                                        title: `${layer.getPath().join(' • ')} - ${self.getLocaleString('featureEditing')}`,\r\n                                                        geometryName: 'geom',\r\n                                                        featureType: [fullLayerName],\r\n                                                        featureNS: prefix,\r\n                                                        styles: self.styles,\r\n                                                        stealth: true\r\n                                                    };\r\n                                                    layer.wfsLayer = new TC.layer.Vector(wfsLayerOptions);\r\n                                                    layer.wfsLayer.wmsLayer = layer;\r\n                                                    resolve(layer.wfsLayer);\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    );\r\n                                }\r\n                                else {\r\n                                    reject(new Error(notEditableErrorMsg));\r\n                                }\r\n                            })\r\n                            .catch((err) => reject(err));\r\n                    }\r\n                }\r\n                else if (layer.type === TC.Consts.layerType.VECTOR) {\r\n                    resolve(layer);\r\n                }\r\n                else {\r\n                    reject(new Error(notEditableErrorMsg));\r\n                }\r\n            }\r\n            else {\r\n                reject(new Error('No layer to edit'));\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto.isLayerEdited = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            const storagePrefix = getStoragePrefix(self, layer);\r\n            TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n                localforage.keys().then(function (keys) {\r\n                    if (keys) {\r\n                        resolve(keys.some(key => key.indexOf(storagePrefix) === 0));\r\n                    }\r\n                    else {\r\n                        resolve(false);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.getLayerEditData = function (optionalLayer) {\r\n        const self = this;\r\n        const layer = optionalLayer || self.layer;\r\n        if (!layer) {\r\n            return null;\r\n        }\r\n        return self.layersEditData[layer.id] = self.layersEditData[layer.id] || {\r\n            checkedOut: false\r\n        };\r\n    };\r\n\r\n    const getLegendImage = function (layer, geometryType) {\r\n        switch (geometryType) {\r\n            case TC.Consts.geom.POINT:\r\n            case TC.Consts.geom.MULTIPOINT:\r\n                return TC.Util.getLegendImageFromStyle(layer.styles.point, { geometryType: TC.Consts.geom.POINT });\r\n            case TC.Consts.geom.POLYLINE:\r\n            case TC.Consts.geom.MULTIPOLYLINE:\r\n                return TC.Util.getLegendImageFromStyle(layer.styles.line, { geometryType: TC.Consts.geom.POLYLINE });\r\n            default:\r\n                return TC.Util.getLegendImageFromStyle(layer.styles.polygon, { geometryType: TC.Consts.geom.POLYGON });\r\n        }\r\n    };\r\n\r\n    ctlProto._enableEditSerialization = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            self.getEditableLayer(layer)\r\n                .then(function (editableLayer) {\r\n\r\n                    const endProcess = function () {\r\n                        const layerEditData = self.getLayerEditData(layer);\r\n\r\n                        const baseTitle = layer.getPath ? layer.getPath().join(' • ') : (layer.title || layer.id);\r\n\r\n                        var beforeEditLayer = layerEditData.beforeEditLayer;\r\n                        if (!beforeEditLayer) {\r\n                            beforeEditLayer = layerEditData.beforeEditLayer = new TC.layer.Vector(TC.Util.extend({}, editableLayer.options, {\r\n                                id: self.getUID(),\r\n                                title: `${baseTitle} - ${self.getLocaleString('dataBeforeEdits')}`,\r\n                                readOnly: true,\r\n                                owner: self,\r\n                                stealth: true\r\n                            }));\r\n                        }\r\n\r\n                        var addedFeaturesLayer = layerEditData.addedFeaturesLayer;\r\n                        let aflIsOld = true;\r\n                        if (!addedFeaturesLayer) {\r\n                            aflIsOld = false;\r\n                            addedFeaturesLayer = layerEditData.addedFeaturesLayer = new TC.layer.Vector({\r\n                                id: self.getUID(),\r\n                                title: `${baseTitle} - ${self.getLocaleString('addedFeatures')}`,\r\n                                owner: self,\r\n                                stealth: true,\r\n                                zIndex: 2\r\n                            });\r\n                        }\r\n\r\n                        var modifiedFeaturesLayer = layerEditData.modifiedFeaturesLayer;\r\n                        let mflIsOld = true;\r\n                        if (!modifiedFeaturesLayer) {\r\n                            mflIsOld = false;\r\n                            modifiedFeaturesLayer = layerEditData.modifiedFeaturesLayer = new TC.layer.Vector({\r\n                                id: self.getUID(),\r\n                                title: `${baseTitle} - ${self.getLocaleString('modifiedFeatures')}`,\r\n                                owner: self,\r\n                                stealth: true,\r\n                                zIndex: 2\r\n                            });\r\n                        }\r\n\r\n                        var removedFeaturesLayer = layerEditData.removedFeaturesLayer;\r\n                        let rflIsOld = true;\r\n                        if (!removedFeaturesLayer) {\r\n                            rflIsOld = false;\r\n                            removedFeaturesLayer = layerEditData.removedFeaturesLayer = new TC.layer.Vector({\r\n                                id: self.getUID(),\r\n                                title: `${baseTitle} - ${self.getLocaleString('removedFeatures')}`,\r\n                                owner: self,\r\n                                stealth: true,\r\n                                zIndex: 2\r\n                            });\r\n                        }\r\n\r\n                        const featurePromises = [];\r\n                        if (aflIsOld && mflIsOld && rflIsOld) {\r\n                            // Existen de antes las capas de adiciones, modificaciones y eliminaciones. Leemos de ahí.\r\n                            removedFeaturesLayer.features.forEach(function (removedFeature) {\r\n                                const f = editableLayer.getFeatureById(removedFeature.id);\r\n                                if (f) {\r\n                                    editableLayer.removeFeature(f);\r\n                                }\r\n                            });\r\n                            modifiedFeaturesLayer.features.forEach(function (modifiedFeature) {\r\n                                const f = editableLayer.getFeatureById(modifiedFeature.id);\r\n                                if (f) {\r\n                                    f.setCoords(modifiedFeature.geometry);\r\n                                    f.setData(modifiedFeature.getData());\r\n                                }\r\n                            });\r\n                            addedFeaturesLayer.features.forEach(function (addedFeature) {\r\n                                if (!editableLayer.getFeatureById(addedFeature.id)) {\r\n                                    featurePromises.push(editableLayer.addFeature(self._createAuxFeature(addedFeature)));\r\n                                }\r\n                            });\r\n                            Promise.all(featurePromises).then(() => {\r\n                                layerEditData.serializable = true;\r\n                                resolve(editableLayer);\r\n                            });\r\n                        }\r\n                        else {\r\n                            // Las capas de adiciones, modificaciones y eliminaciones son nuevas. Leemos de local storage.\r\n                            const storagePrefix = getStoragePrefix(self, editableLayer);\r\n                            const addedStoragePrefix = getAddedStoragePrefix(self, editableLayer);\r\n                            const modifiedStoragePrefix = getModifiedStoragePrefix(self, editableLayer);\r\n                            const removedStoragePrefix = getRemovedStoragePrefix(self, editableLayer);\r\n                            TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n                                //var li = map.getLoadingIndicator();\r\n                                localforage.keys().then(function (keys) {\r\n                                    if (keys) {\r\n                                        keys\r\n                                            .filter(key => key.indexOf(storagePrefix) === 0)\r\n                                            .forEach(function (key) {\r\n                                                //li && li.addWait(uid);\r\n                                                featurePromises.push(new Promise(function (res, rej) {\r\n                                                    readFeature(key).then(function(obj) {\r\n                                                        var id;\r\n                                                        var k = obj.key;\r\n                                                        if (k.indexOf(removedStoragePrefix) === 0) {\r\n                                                            id = k.substr(removedStoragePrefix.length);\r\n                                                            const feature = editableLayer.getFeatureById(id);\r\n                                                            editableLayer.removeFeature(feature);\r\n                                                            removedFeaturesLayer.addFeature(feature).then(() => res(feature));\r\n                                                            //li && li.removeWait(uid);\r\n                                                        }\r\n                                                        else if (k.indexOf(modifiedStoragePrefix) === 0) {\r\n                                                            id = k.substr(modifiedStoragePrefix.length);\r\n                                                            const feature = editableLayer.getFeatureById(id);\r\n                                                            if (feature) {\r\n                                                                feature.setCoords(obj.feature.geometry);\r\n                                                                feature.setData(obj.feature.attributes);\r\n                                                                const newFeature = feature.clone();\r\n                                                                newFeature.setId(feature.id);\r\n                                                                modifiedFeaturesLayer.addFeature(newFeature).then(() => res(feature));\r\n                                                                //li && li.removeWait(uid);\r\n                                                            }\r\n                                                            else {\r\n                                                                res(feature);\r\n                                                            }\r\n                                                        }\r\n                                                        else if (k.indexOf(addedStoragePrefix) === 0) {\r\n                                                            id = k.substr(addedStoragePrefix.length);\r\n                                                            var idNumber = parseInt(id.substr(id.lastIndexOf('.') + 1));\r\n                                                            newFeatureIdNumber = Math.max(newFeatureIdNumber, idNumber + 1);\r\n                                                            var addPromise;\r\n                                                            switch (obj.feature.type) {\r\n                                                                case TC.Consts.geom.POINT:\r\n                                                                    addPromise = editableLayer.addPoint(obj.feature.geometry);\r\n                                                                    break;\r\n                                                                case TC.Consts.geom.POLYLINE:\r\n                                                                    addPromise = editableLayer.addPolyline(obj.feature.geometry);\r\n                                                                    break;\r\n                                                                case TC.Consts.geom.POLYGON:\r\n                                                                    addPromise = editableLayer.addPolygon(obj.feature.geometry);\r\n                                                                    break;\r\n                                                                case TC.Consts.geom.MULTIPOLYLINE:\r\n                                                                    addPromise = editableLayer.addMultiPolyline(obj.feature.geometry);\r\n                                                                    break;\r\n                                                                case TC.Consts.geom.MULTIPOLYGON:\r\n                                                                    addPromise = editableLayer.addMultiPolygon(obj.feature.geometry);\r\n                                                                    break;\r\n                                                                default:\r\n                                                                    break;\r\n                                                            };\r\n                                                            addPromise.then(function (feat) {\r\n                                                                //feat.setStyle(TC.Util.extend({}, layer.styles.line, layer.styles.polygon));\r\n                                                                feat.provId = id;\r\n                                                                feat.setData(obj.feature.attributes);\r\n                                                                const newFeat = feat.clone();\r\n                                                                newFeat.setStyle(null);\r\n                                                                newFeat.setId(feat.provId);\r\n                                                                addedFeaturesLayer.addFeature(newFeat).then(() =>  res(newFeat));\r\n                                                                //li && li.removeWait(uid);\r\n                                                            });\r\n                                                        }\r\n                                                    });\r\n                                                }));\r\n                                            });\r\n                                    }\r\n                                    Promise.all(featurePromises).then(() => {\r\n                                        layerEditData.serializable = true;\r\n                                        resolve(editableLayer);\r\n                                    });\r\n                                });\r\n                            });\r\n                        }\r\n                    };\r\n\r\n                    if (editableLayer.type === TC.Consts.layerType.WFS) {\r\n                        if (editableLayer.state === TC.Layer.state.IDLE) {\r\n                            endProcess();\r\n                        }\r\n                        else {\r\n                            const onLayerUpdate = function (e) {\r\n                                if (e.layer === editableLayer) {\r\n                                    endProcess();\r\n                                    self.map.off(TC.Consts.event.LAYERUPDATE, onLayerUpdate);\r\n                                }\r\n                            }\r\n                            self.map.on(TC.Consts.event.LAYERUPDATE, onLayerUpdate);\r\n                        }\r\n                    }\r\n                    else {\r\n                        resolve(editableLayer);\r\n                    }\r\n                });\r\n        });\r\n    };\r\n\r\n    ctlProto.applyEdits = function () {\r\n        const self = this;\r\n        if (self.layer) {\r\n            const layerEditData = self.getLayerEditData();\r\n            if (layerEditData.serializable) {\r\n                self.isSyncing = true;\r\n                setSyncState(self);\r\n                const li = self.map.getLoadingIndicator();\r\n                const waitId = li && li.addWait();\r\n                // Copiamos modificadas para ponerle el nombre de atributo de geometría descrito en DescribeFeatureType.\r\n                const modified = layerEditData.modifiedFeaturesLayer.features.map(function (feature) {\r\n                    const result = new feature.constructor(feature.geometry, { geometryName: layerEditData.geometryName });\r\n                    const unmodifiedFeature = layerEditData.beforeEditLayer.features.filter(f => f.id === feature.id)[0];\r\n                    let newData;\r\n                    if (unmodifiedFeature) {\r\n                        newData = {};\r\n                        for (var key in feature.data) {\r\n                            if (key !== 'id') {\r\n                                const oldValue = unmodifiedFeature.data[key];\r\n                                const newValue = feature.data[key];\r\n                                if (oldValue !== newValue) {\r\n                                    newData[key] = newValue;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        newData = feature.data;\r\n                    }\r\n                    result.setData(newData);\r\n                    result.setId(feature.id);\r\n                    return result;\r\n                });\r\n                self.getEditableLayer(self.layer)\r\n                    .then(function (l) {\r\n                        l.applyEdits(layerEditData.addedFeaturesLayer.features, modified, layerEditData.removedFeaturesLayer.features)\r\n                            .then(function (response) {\r\n                                // SONDA DE PRUEBA, BORRAR EN PRO //\r\n                                if (response.transactionSummary.totalInserted !== layerEditData.addedFeaturesLayer.features.length ||\r\n                                    response.transactionSummary.totalUpdated !== modified.length ||\r\n                                    response.transactionSummary.totalDeleted !== layerEditData.removedFeaturesLayer.features.length) {\r\n                                    TC.error(\"Error de concordancia de número de entidades en transacción\");\r\n                                    console.log(response, layerEditData.addedFeaturesLayer, modified, layerEditData.removedFeaturesLayer);\r\n                                    throw new Error(`Error en transacción: Insertados ${response.transactionSummary.totalInserted}, hay ${layerEditData.addedFeaturesLayer.features.length} en capa`);\r\n                                }\r\n                                ////////////////////////////////////\r\n                                if (self.layer.type === TC.Consts.layerType.WMS) {\r\n                                    self.layer.refresh();\r\n                                }\r\n                                self.deleteCache(getStoragePrefix(self)).then(function () {\r\n                                    self.cacheLayer(l).finally(function () {\r\n                                        self.isSyncing = false;\r\n                                        li && li.removeWait(waitId);\r\n                                        // Las acciones a realizar a partir de este punto son las mismas que al descartar una edición\r\n                                        self.discardEdits();\r\n                                        self.map.toast(self.getLocaleString('changesSuccessfullySyncedWithServer'), { type: TC.Consts.msgType.INFO });\r\n                                    });\r\n                                });\r\n                            })\r\n                            .catch(function (obj) {\r\n                                self.isSyncing = false;\r\n                                setSyncState(self);\r\n                                li && li.removeWait(waitId);\r\n                                TC.error(self.getLocaleString('errorSyncingChanges', { code: obj.code, reason: obj.reason }), [TC.Consts.msgErrorMode.TOAST, TC.Consts.msgErrorMode.CONSOLE]);\r\n                            });\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    ctlProto.discardEdits = function () {\r\n        var self = this;\r\n        self._joinedFeatureAttributes = [];\r\n        var storagePrefix = getStoragePrefix(self);\r\n        TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n            localforage.keys().then(function (keys) {\r\n                if (keys) {\r\n                    for (var i = 0, len = keys.length; i < len; i++) {\r\n                        var key = keys[i];\r\n                        if (key.indexOf(storagePrefix) === 0) {\r\n                            localforage.removeItem(key);\r\n                        }\r\n                    }\r\n                    if (self.layer) {\r\n                        const layerEditData = self.getLayerEditData();\r\n                        if (layerEditData.serializable) {\r\n                            layerEditData.addedFeaturesLayer.clearFeatures();\r\n                            layerEditData.modifiedFeaturesLayer.clearFeatures();\r\n                            layerEditData.removedFeaturesLayer.clearFeatures();\r\n                            self.editControl.setSelectedFeatures([]);\r\n                            self.editControl.modifyControl.closeAttributes();\r\n                            self.getEditableLayer(self.layer).then(l => l.refresh());\r\n                        }\r\n                    }\r\n                    setChangedState(self, false);\r\n                }\r\n            });\r\n            self.editControl.setMode(null);\r\n        });\r\n    };\r\n\r\n    ctlProto.showOriginalFeatures = function (show) {\r\n        const self = this;\r\n        self.showsOriginalFeatures = show;\r\n        const layerEditData = self.getLayerEditData();\r\n        if (layerEditData) {\r\n            layerEditData.beforeEditLayer.setVisibility(show);\r\n        }\r\n    };\r\n\r\n    ctlProto.highlightAdded = function (highlight) {\r\n        const self = this;\r\n        self.highlightsAdded = highlight;\r\n        const layerEditData = self.getLayerEditData();\r\n        if (layerEditData && layerEditData.addedFeaturesLayer) {\r\n            layerEditData.addedFeaturesLayer.setVisibility(highlight);\r\n        }\r\n    };\r\n\r\n    ctlProto.highlightModified = function (highlight) {\r\n        const self = this;\r\n        self.highlightsModified = highlight;\r\n        const layerEditData = self.getLayerEditData();\r\n        if (layerEditData && layerEditData.modifiedFeaturesLayer) {\r\n            layerEditData.modifiedFeaturesLayer.setVisibility(highlight);\r\n        }\r\n    };\r\n\r\n    ctlProto.highlightRemoved = function (highlight) {\r\n        const self = this;\r\n        self.highlightsRemoved = highlight;\r\n        const layerEditData = self.getLayerEditData();\r\n        if (layerEditData && layerEditData.removedFeaturesLayer) {\r\n            layerEditData.removedFeaturesLayer.setVisibility(highlight);\r\n        }\r\n    };\r\n\r\n    const getStyleFromFeatureType = function (ctl, layer) {\r\n        const result = {};\r\n        const layerEditData = ctl.getLayerEditData(layer.wmsLayer || layer);\r\n        switch (layerEditData.geometryType) {\r\n            case TC.Consts.geom.POLYGON:\r\n            case TC.Consts.geom.MULTIPOLYGON:\r\n                result.polygon = layer.map.options.styles.polygon;\r\n                break;\r\n            case TC.Consts.geom.POLYLINE:\r\n            case TC.Consts.geom.MULTIPOLYLINE:\r\n                result.line = layer.map.options.styles.line;\r\n                break;\r\n            default:\r\n                result.point = layer.map.options.styles.point;\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    ctlProto.getBeforeEditLayerStyle = function (layer) {\r\n        const self = this;\r\n        const getNegativeColor = function (color) {\r\n            const rgba = layer.wrap.getRGBA(color);\r\n            for (var i = 0; i < 3; i++) {\r\n                rgba[i] = 255 - rgba[i];\r\n            }\r\n            return '#' + (rgba[0] * 65536 + rgba[1] * 256 + rgba[2]).toString(16).padStart(6, '0');\r\n        };\r\n\r\n        const dash = [1, 3];\r\n        const result = TC.Util.extend(true, {}, layer.options.styles || getStyleFromFeatureType(self, layer));\r\n        if (result.point) {\r\n            result.point.strokeColor = getNegativeColor(result.point.strokeColor);\r\n            result.point.lineDash = dash;\r\n        }\r\n        if (result.line) {\r\n            result.line.strokeColor = getNegativeColor(result.line.strokeColor);\r\n            result.line.lineDash = dash;\r\n        }\r\n        if (result.polygon) {\r\n            result.polygon.strokeColor = getNegativeColor(result.polygon.strokeColor);\r\n            result.polygon.lineDash = dash;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    const colorizeLayer = function (ctl, layer, color) {\r\n        const result = TC.Util.extend(true, {}, layer.options.styles || getStyleFromFeatureType(ctl, layer));\r\n        if (result.point) {\r\n            result.point.strokeColor = color;\r\n            result.point.fillColor = color;\r\n        }\r\n        if (result.line) {\r\n            result.line.strokeColor = color;\r\n        }\r\n        if (result.polygon) {\r\n            result.polygon.strokeColor = color;\r\n            result.polygon.fillColor = color;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.getAddedFeaturesLayerStyle = function (layer) {\r\n        const self = this;\r\n        const layerEditData = self.getLayerEditData(layer.wmsLayer || layer);\r\n        return colorizeLayer(self, layer, layerEditData.addedCustomColor || '#00ff00');\r\n    };\r\n\r\n    ctlProto.getModifiedFeaturesLayerStyle = function (layer) {\r\n        const self = this;\r\n        const layerEditData = self.getLayerEditData(layer.wmsLayer || layer);\r\n        return colorizeLayer(self, layer, layerEditData.modifiedCustomColor || '#ff7f00');\r\n    };\r\n\r\n    ctlProto.getRemovedFeaturesLayerStyle = function (layer) {\r\n        const self = this;\r\n        const layerEditData = self.getLayerEditData(layer.wmsLayer || layer);\r\n        return colorizeLayer(self, layer, layerEditData.removedCustomColor || '#ff0000');\r\n    };\r\n\r\n})();"]}