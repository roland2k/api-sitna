{"version":3,"sources":["ol/format/KMLCustom.js"],"names":["GX_NAMESPACE_URIS","NAMESPACE_URIS","CUSTOM_NAMESPACE_URIS","array","combi","temp","len","Math","pow","length","i","j","indexOf","push","join","getAllCombinations","slice","customURIS","formatURIS","index","splice","cleanCombinationsByFormat","concat","ICON_ANCHOR_UNITS_MAP","fraction","ol","style","IconAnchorUnits","FRACTION","pixels","PIXELS","insetPixels","PLACEMARK_PARSERS","xml","makeStructureNS","ExtendedData","node","objectStack","parseNode","EXTENDED_DATA_PARSERS","Region","REGION_PARSERS","MultiGeometry","makeObjectPropertySetter","readMultiGeometry","LineString","readLineString","LinearRing","readLinearRing","Point","readPoint","Polygon","readPolygon","Style","readStyle","StyleMap","styleMapValue","pushParseAndPop","undefined","STYLE_MAP_PARSERS","readStyleMapValue","placemarkObject","Array","isArray","assert","address","format","xsd","readString","description","name","open","readBoolean","phoneNumber","styleUrl","readURI","visibility","MultiTrack","lineStrings","GX_MULTITRACK_GEOMETRY_PARSERS","geom","MultiLineString","Track","readGxTrack","href","LatLonAltBox","object","LAT_LON_ALT_BOX_PARSERS","regionObject","extent","parseFloat","Lod","LOD_PARSERS","lodObject","DEFAULT_COLOR","DEFAULT_IMAGE_STYLE_ANCHOR","DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS","DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS","DEFAULT_IMAGE_STYLE_SIZE","DEFAULT_IMAGE_STYLE_SRC","DEFAULT_IMAGE_SCALE_MULTIPLIER","DEFAULT_FILL_STYLE","DEFAULT_NO_IMAGE_STYLE","DEFAULT_IMAGE_STYLE","DEFAULT_TEXT_STROKE_STYLE","DEFAULT_STROKE_STYLE","DEFAULT_TEXT_STYLE","DEFAULT_STYLE","DEFAULT_STYLE_ARRAY","getRGBA","color","opacity","result","asArray","namespaceURISmanage","source","tags","parse","getElementsByTagName","toLowerCase","value","getAttribute","values","split","namespaces","trim","createNameStyleFunction","foundStyle","textStyle","textOffset","textAlign","getImage","imageSize","getImageSize","imageScale","getScale","getText","foundText","clone","setFont","getFont","setScale","setFill","getFill","setStroke","getStroke","setText","setOffsetX","setOffsetY","setTextAlign","text","readColor","s","getAllTextContent","m","exec","hexColor","parseInt","substr","readFlatCoordinates","flatCoordinates","re","x","y","z","baseURI","window","location","protocol","URL","readScale","readDecimal","Pair","pairObject","PAIR_PARSERS","key","ICON_STYLE_PARSERS","Icon","iconObject","ICON_PARSERS","heading","hotSpot","xunits","yunits","origin","IconOrigin","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","scale","BALLOON_STYLE_PARSERS","asserts","nodeType","Node","ELEMENT_NODE","localName","LABEL_STYLE_PARSERS","LINE_STYLE_PARSERS","width","POLY_STYLE_PARSERS","fill","outline","FLAT_LINEAR_RING_PARSERS","coordinates","makeReplacer","readFlatLinearRing","makeArrayPusher","GX_TRACK_PARSERS","when","whens","Date","isNaN","coord","gxTrackObject","ii","min","GeometryLayout","XYZM","w","h","GEOMETRY_FLAT_COORDINATES_PARSERS","readFlatCoordinatesFromNode","EXTRUDE_AND_ALTITUDE_MODE_PARSERS","extrude","tessellate","altitudeMode","properties","lineString","XYZ","setProperties","polygon","MULTI_GEOMETRY_PARSERS","geometries","GeometryCollection","multiGeometry","homogeneous","type","getType","geometry","layout","GeometryType","POINT","point","getLayout","getFlatCoordinates","extend","setCommonGeometryProperties","MultiPoint","LINE_STRING","POLYGON","MultiPolygon","GEOMETRY_COLLECTION","FLAT_LINEAR_RINGS_PARSERS","innerBoundaryIs","flatLinearRing","INNER_BOUNDARY_IS_PARSERS","flatLinearRings","outerBoundaryIs","OUTER_BOUNDARY_IS_PARSERS","ends","STYLE_PARSERS","IconStyle","styleObject","IconObject","drawIcon","Object","keys","src","anchor","anchorXUnits","anchorYUnits","anchorOrigin","test","navigator","userAgent","startsWith","replace","offset","size","rotation","math","toRadians","imageStyle","crossOrigin","offsetOrigin","LabelStyle","Text","Fill","LineStyle","strokeStyle","Stroke","PolyStyle","fillStyle","BalloonStyle","balloonStyle","returnStyle","image","stroke","zIndex","_balloon","extrudes","tessellates","altitudeModes","hasExtrude","hasTessellate","hasAltitudeMode","get","set","DATA_PARSERS","displayName","Data","featureObject","SchemaData","SCHEMA_DATA_PARSERS","SimpleData","data","minAltitude","maxAltitude","north","south","east","west","minLodPixels","maxLodPixels","minFadeExtent","maxFadeExtent","writeColorTextNode","rgba","abgr","hex","floor","toString","writeStringTextNode","EXTENDEDDATA_NODE_SERIALIZERS","makeChildAppender","pair","setAttribute","context","pushSerializeAndPop","OBJECT_PROPERTY_NODE_FACTORY","writeCDATASection","Placemark","feature","getId","getProperties","filter","getGeometryName","sort","v","sequence","makeSequence","namesAndValues","names","PLACEMARK_SERIALIZERS","EXTENDEDDATA_NODE_FACTORY","styleFunction","getStyleFunction","styles","this","writeStyles_","parentNode","orderedKeys","PLACEMARK_SEQUENCE","namespaceURI","options","getGeometry","Feature","transformGeometryWithOptions","GEOMETRY_NODE_FACTORY","DATA_NODE_FACTORY","makeSimpleNodeFactory","ICON_SEQUENCE","ICON_SERIALIZERS","writeDecimalTextNode","GX_NODE_FACTORY","opt_nodeName","createElementNS","ICON_STYLE_SEQUENCE","ICON_STYLE_SERIALIZERS","icon","vec2","String","writeScaleTextNode","LABEL_STYLE_SEQUENCE","LABEL_STYLE_SERIALIZERS","LINE_STYLE_SEQUENCE","LINE_STYLE_SERIALIZERS","GEOMETRY_TYPE_TO_NODENAME","POINT_NODE_FACTORY","LINE_STRING_NODE_FACTORY","LINEAR_RING_NODE_FACTORY","POLYGON_NODE_FACTORY","MULTI_GEOMETRY_SERIALIZERS","writePrimitiveGeometry","writePolygon","writeMultiGeometry","factory","getGeometries","MULTI_POINT","getPoints","MULTI_LINE_STRING","getLineStrings","MULTI_POLYGON","getPolygons","BOUNDARY_IS_SERIALIZERS","writeBoundaryIs","linearRing","getSrc","STYLE_SEQUENCE","STYLE_SERIALIZERS","writeBooleanTextNode","PRIMITIVE_GEOMETRY_SEQUENCE","PRIMITIVE_GEOMETRY_SERIALIZERS","stride","dimension","XY","XYM","d","getStride","POLYGON_SERIALIZERS","INNER_BOUNDARY_NODE_FACTORY","OUTER_BOUNDARY_NODE_FACTORY","linearRings","getLinearRings","outerRing","shift","POLY_STYLE_SERIALIZERS","COLOR_NODE_FACTORY","round","getSize","iconImageSize","iconProperties","getAnchor","getOrigin","getRotation","getColor","getWidth","KMLCustom","KML","[object Object]","opt_options","super","TC","Cfg","fillColor","fillOpacity","line","strokeColor","strokeWidth","font","createStyleDefaults","defaultStyle_","defaultStyle","kmlTag","startIdx","prototype","readFeatures","call","forEach","f","setId","getUID","parsersNS","Document","makeArrayExtender","readDocumentOrFolder_","Folder","readPlacemark_","readSharedStyle_","bind","readSharedStyleMap_","features","_folders","nameElm","Util","fastUnshift","innerHTML","textContent","id","transformWithOptions","setGeometry","extractStyles_","sharedStyles","showPointNames","resolution","nameStyle","drawName","findStyle","styleValue","createFeatureStyleFunction","sharedStyles_","showPointNames_","setStyle","styleUri","includes","getReadOptions","n","firstElementChild","nextElementSibling","fs","readFeaturesFromNode"],"mappings":"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","sourcesContent":["/**\r\n * @typedef {Object} Vec2\r\n * @property {number} x\r\n * @property {ol.style.IconAnchorUnits} xunits\r\n * @property {number} y\r\n * @property {ol.style.IconAnchorUnits} yunits\r\n * @property {ol.style.IconOrigin} origin\r\n */\r\n\r\n/**\r\n * @typedef {Object} GxTrackObject\r\n * @property {Array<number>} flatCoordinates\r\n * @property {Array<number>} whens\r\n */\r\n\r\n(function () {\r\n\r\n    /**\r\n     * @const\r\n     * @type {Array<string>}\r\n     */\r\n    const GX_NAMESPACE_URIS = [\r\n        'http://www.google.com/kml/ext/2.2'\r\n    ];\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Array<null|string>}\r\n     */\r\n    let NAMESPACE_URIS = [\r\n        null,\r\n        'http://earth.google.com/kml/2.0',\r\n        'http://earth.google.com/kml/2.1',\r\n        'http://earth.google.com/kml/2.2',\r\n        'http://www.opengis.net/kml/2.2'\r\n    ];\r\n\r\n    // GLS: Obtenemos las combinaciones posibles\r\n    const getAllCombinations = function (array) {\r\n        var combi = [];\r\n        var temp = [];\r\n\r\n        var len = Math.pow(2, array.length);\r\n\r\n        for (var i = 0; i < len; i++) {\r\n            temp = [];\r\n            for (var j = 0; j < array.length; j++) {\r\n                if ((i & Math.pow(2, j))) {\r\n                    if (temp.indexOf(array[j]) == -1)\r\n                        temp.push(array[j]);\r\n                }\r\n            }\r\n            if (temp.length > 0) {\r\n                if (combi.indexOf(temp.join(' ')) == -1)\r\n                    combi.push(temp.join(' '));\r\n            }\r\n        }\r\n\r\n        return combi;\r\n    }\r\n\r\n    // GLS: Limpiamos de los nuevos los URIS ya disponibles en el formato\r\n    const cleanCombinationsByFormat = function (customURIS, formatURIS) {\r\n        if (customURIS && customURIS.length > 0) {\r\n            for (var i = 0; i < formatURIS.length; i++) {\r\n                var index = customURIS.indexOf(formatURIS[i]);\r\n                if (index > -1)\r\n                    customURIS.splice(index, 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    // GLS: Obtenemos los nuevos URIS para KML\r\n    const CUSTOM_NAMESPACE_URIS = getAllCombinations(NAMESPACE_URIS.slice().slice(1));\r\n    // GLS: Nos quedamos con las combinaciones nuevas\r\n    cleanCombinationsByFormat(CUSTOM_NAMESPACE_URIS, NAMESPACE_URIS);\r\n    NAMESPACE_URIS = NAMESPACE_URIS.concat(CUSTOM_NAMESPACE_URIS);\r\n\r\n    /**\r\n     * @type {Object<string, ol.style.IconAnchorUnits>}\r\n     */\r\n    const ICON_ANCHOR_UNITS_MAP = {\r\n        'fraction': ol.style.IconAnchorUnits.FRACTION,\r\n        'pixels': ol.style.IconAnchorUnits.PIXELS,\r\n        'insetPixels': ol.style.IconAnchorUnits.PIXELS\r\n    };\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const PLACEMARK_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'ExtendedData': extendedDataParser,\r\n            'Region': regionParser,\r\n            'MultiGeometry': ol.xml.makeObjectPropertySetter(\r\n                readMultiGeometry, 'geometry'),\r\n            'LineString': ol.xml.makeObjectPropertySetter(\r\n                readLineString, 'geometry'),\r\n            'LinearRing': ol.xml.makeObjectPropertySetter(\r\n                readLinearRing, 'geometry'),\r\n            'Point': ol.xml.makeObjectPropertySetter(\r\n                readPoint, 'geometry'),\r\n            'Polygon': ol.xml.makeObjectPropertySetter(\r\n                readPolygon, 'geometry'),\r\n            'Style': ol.xml.makeObjectPropertySetter(readStyle),\r\n            'StyleMap': placemarkStyleMapParser,\r\n            'address': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'description': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'name': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'open': ol.xml.makeObjectPropertySetter(ol.format.xsd.readBoolean),\r\n            'phoneNumber': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'styleUrl': ol.xml.makeObjectPropertySetter(readURI),\r\n            'visibility': ol.xml.makeObjectPropertySetter(ol.format.xsd.readBoolean)\r\n        }, ol.xml.makeStructureNS(\r\n            GX_NAMESPACE_URIS, {\r\n                'MultiTrack': ol.xml.makeObjectPropertySetter(\r\n                    readGxMultiTrack, 'geometry'),\r\n                'Track': ol.xml.makeObjectPropertySetter(\r\n                    readGxTrack, 'geometry')\r\n            }\r\n        ));\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const LINK_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'href': ol.xml.makeObjectPropertySetter(readURI)\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const REGION_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'LatLonAltBox': latLonAltBoxParser,\r\n            'Lod': lodParser\r\n        });\r\n\r\n\r\n    /**\r\n     * @type {import(\"../color.js\").Color}\r\n     */\r\n    let DEFAULT_COLOR;\r\n\r\n    /**\r\n     * @type {ol.style.Fill}\r\n     */\r\n    let DEFAULT_FILL_STYLE = null;\r\n\r\n    /**\r\n     * Get the default fill style (or null if not yet set).\r\n     * @return {ol.style.Fill} The default fill style.\r\n     */\r\n    function getDefaultFillStyle() {\r\n        return DEFAULT_FILL_STYLE;\r\n    }\r\n\r\n    /**\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    let DEFAULT_IMAGE_STYLE_ANCHOR;\r\n\r\n    /**\r\n     * @type {ol.style.IconAnchorUnits}\r\n     */\r\n    let DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\r\n\r\n    /**\r\n     * @type {ol.style.IconAnchorUnits}\r\n     */\r\n    let DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\r\n\r\n    /**\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    let DEFAULT_IMAGE_STYLE_SIZE;\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    let DEFAULT_IMAGE_STYLE_SRC;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    let DEFAULT_IMAGE_SCALE_MULTIPLIER;\r\n\r\n    /**\r\n     * @type {import(\"../style/Image.js\").default}\r\n     */\r\n    let DEFAULT_IMAGE_STYLE = null;\r\n\r\n    /**\r\n     * Get the default image style (or null if not yet set).\r\n     * @return {import(\"../style/Image.js\").default} The default image style.\r\n     */\r\n    function getDefaultImageStyle() {\r\n        return DEFAULT_IMAGE_STYLE;\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    let DEFAULT_NO_IMAGE_STYLE;\r\n\r\n    /**\r\n     * @type {ol.style.Stroke}\r\n     */\r\n    let DEFAULT_STROKE_STYLE = null;\r\n\r\n    /**\r\n     * Get the default stroke style (or null if not yet set).\r\n     * @return {ol.style.Stroke} The default stroke style.\r\n     */\r\n    function getDefaultStrokeStyle() {\r\n        return DEFAULT_STROKE_STYLE;\r\n    }\r\n\r\n    /**\r\n     * @type {ol.style.Stroke}\r\n     */\r\n    let DEFAULT_TEXT_STROKE_STYLE;\r\n\r\n    /**\r\n     * @type {ol.style.Text}\r\n     */\r\n    let DEFAULT_TEXT_STYLE = null;\r\n\r\n    /**\r\n     * Get the default text style (or null if not yet set).\r\n     * @return {ol.style.Text} The default text style.\r\n     */\r\n    function getDefaultTextStyle() {\r\n        return DEFAULT_TEXT_STYLE;\r\n    }\r\n\r\n    /**\r\n     * @type {ol.style.Style}\r\n     */\r\n    let DEFAULT_STYLE = null;\r\n\r\n    /**\r\n     * @type {Array<ol.style.Style>}\r\n     */\r\n    let DEFAULT_STYLE_ARRAY = null;\r\n\r\n    const getRGBA = function (color, opacity) {\r\n        var result;\r\n        if (color) {\r\n            result = ol.color.asArray(color);\r\n            result = result.slice();\r\n            if (opacity !== undefined) {\r\n                result[3] = opacity;\r\n            }\r\n        }\r\n        else {\r\n            result = [0, 0, 0, 1];\r\n        }\r\n        return result;\r\n    };\r\n\r\n\r\n    function createStyleDefaults() {\r\n        // Rehacemos los estilos por defecto de KML para que se adecúen al de la API\r\n        DEFAULT_COLOR = [255, 255, 255, 1];\r\n\r\n        DEFAULT_FILL_STYLE = new ol.style.Fill({\r\n            color: getRGBA(TC.Cfg.styles.polygon.fillColor, TC.Cfg.styles.polygon.fillOpacity)\r\n        });\r\n\r\n        DEFAULT_IMAGE_STYLE_ANCHOR = [20, 2]; // FIXME maybe [8, 32] ?\r\n\r\n        DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS = ol.style.IconAnchorUnits.PIXELS;\r\n\r\n        DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS = ol.style.IconAnchorUnits.PIXELS;\r\n\r\n        DEFAULT_IMAGE_STYLE_SIZE = [64, 64];\r\n\r\n        DEFAULT_IMAGE_STYLE_SRC =\r\n            'https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png';\r\n\r\n        DEFAULT_IMAGE_SCALE_MULTIPLIER = 0.5;\r\n\r\n        DEFAULT_IMAGE_STYLE = new ol.style.Icon({\r\n            anchor: DEFAULT_IMAGE_STYLE_ANCHOR,\r\n            anchorOrigin: ol.style.IconOrigin.BOTTOM_LEFT,\r\n            anchorXUnits: DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS,\r\n            anchorYUnits: DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS,\r\n            crossOrigin: 'anonymous',\r\n            rotation: 0,\r\n            scale: DEFAULT_IMAGE_SCALE_MULTIPLIER,\r\n            size: DEFAULT_IMAGE_STYLE_SIZE,\r\n            src: DEFAULT_IMAGE_STYLE_SRC\r\n        });\r\n\r\n        DEFAULT_NO_IMAGE_STYLE = 'NO_IMAGE';\r\n\r\n        DEFAULT_STROKE_STYLE = new ol.style.Stroke({\r\n            color: getRGBA(TC.Cfg.styles.line.strokeColor, 1),\r\n            width: TC.Cfg.styles.line.strokeWidth || 1\r\n        });\r\n\r\n        DEFAULT_TEXT_STROKE_STYLE = new ol.style.Stroke({\r\n            color: [51, 51, 51, 1],\r\n            width: 2\r\n        });\r\n\r\n        DEFAULT_TEXT_STYLE = new ol.style.Text({\r\n            font: 'bold 16px Helvetica',\r\n            fill: DEFAULT_FILL_STYLE,\r\n            stroke: DEFAULT_TEXT_STROKE_STYLE,\r\n            scale: 0.8\r\n        });\r\n\r\n        DEFAULT_STYLE = new ol.style.Style({\r\n            fill: DEFAULT_FILL_STYLE,\r\n            image: DEFAULT_IMAGE_STYLE,\r\n            text: DEFAULT_TEXT_STYLE,\r\n            stroke: DEFAULT_STROKE_STYLE,\r\n            zIndex: 0\r\n        });\r\n\r\n        DEFAULT_STYLE_ARRAY = [DEFAULT_STYLE];\r\n\r\n    }\r\n\r\n    const namespaceURISmanage = function (source, format) {\r\n        const xml = ol.xml.parse(source);\r\n        const tags = xml.getElementsByTagName(format.toLowerCase());\r\n        if (tags && tags.length > 0) {\r\n            var value = tags[0].getAttribute('xmlns');\r\n            if (value && value.indexOf(' ') > -1 && NAMESPACE_URIS.indexOf(value) > -1) {\r\n                const values = value.split(' ');\r\n                const namespaces = [];\r\n                for (var i = 0; i < values.length; i++) {\r\n                    namespaces.push(('xmlns:' + format.toLowerCase() + i) + \"=\\\"\" + values[i].trim() + \"\\\"\");\r\n                }\r\n            }\r\n        }\r\n\r\n        return source;\r\n    };\r\n\r\n    /**\r\n     * @typedef {Object} Options\r\n     * @property {boolean} [extractStyles=true] Extract styles from the KML.\r\n     * @property {boolean} [showPointNames=true] Show names as labels for placemarks which contain points.\r\n     * @property {Array<ol.style.Style>} [defaultStyle] Default style. The\r\n     * default default style is the same as Google Earth.\r\n     * @property {boolean} [writeStyles=true] Write styles into KML.\r\n     */\r\n\r\n\r\n    class KMLCustom extends ol.format.KML {\r\n\r\n        /**\r\n         * @param {Options=} opt_options Options.\r\n         */\r\n        constructor(opt_options) {\r\n\r\n            super(opt_options);\r\n\r\n            const options = opt_options ? opt_options : {};\r\n\r\n\r\n            if (!DEFAULT_STYLE_ARRAY) {\r\n                createStyleDefaults();\r\n            }\r\n\r\n            this.defaultStyle_ = options.defaultStyle ?\r\n                options.defaultStyle : DEFAULT_STYLE_ARRAY;\r\n        }\r\n\r\n        readFeatures(source, opt_options) {\r\n            if (typeof source === 'string') {\r\n                const kmlTag = '<kml';\r\n                let startIdx = source.indexOf(kmlTag);\r\n                if (startIdx >= 0) {\r\n                    startIdx += kmlTag.length;\r\n                    if (source.indexOf('xmlns:xsi=') < 0) {\r\n                        source = source.substr(0, startIdx) + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + source.substr(startIdx);\r\n                    }\r\n\r\n                    source = namespaceURISmanage(source, 'KML');\r\n                }\r\n            }\r\n            const result = ol.format.KML.prototype.readFeatures.call(this, source, opt_options);\r\n            // El parser no pone id si la entidad del archivo no lo tiene. Añadimos uno.\r\n            result.forEach(function (f) {\r\n                if (!f.getId()) {\r\n                    f.setId(TC.getUID());\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n        readDocumentOrFolder_(node, objectStack) {\r\n            // FIXME use scope somehow\r\n            const parsersNS = ol.xml.makeStructureNS(\r\n                NAMESPACE_URIS, {\r\n                    'Document': ol.xml.makeArrayExtender(this.readDocumentOrFolder_, this),\r\n                    'Folder': ol.xml.makeArrayExtender(this.readDocumentOrFolder_, this),\r\n                    'Placemark': ol.xml.makeArrayPusher(this.readPlacemark_, this),\r\n                    'Style': this.readSharedStyle_.bind(this),\r\n                    'StyleMap': this.readSharedStyleMap_.bind(this)\r\n                });\r\n            /** @type {Array<Feature>} */\r\n            const features = ol.xml.pushParseAndPop([], parsersNS, node, objectStack, this);\r\n            if (features) {\r\n                // Reescritura de código para leer las carpetas del KML\r\n                if (node.localName == 'Folder') {\r\n                    for (let i = 0, ii = features.length; i < ii; i++) {\r\n                        const feature = features[i];\r\n                        if (!Array.isArray(feature._folders)) {\r\n                            feature._folders = [];\r\n                        }\r\n                        var nameElm = node.getElementsByTagName('name')[0];\r\n                        if (nameElm) {\r\n                            //feature._folders.unshift(nameElm.innerHTML || nameElm.textContent);\r\n                            // Versión rápida de unshift\r\n                            TC.Util.fastUnshift(feature._folders, nameElm.innerHTML || nameElm.textContent);\r\n                        }\r\n                    }\r\n                }\r\n                ///////////////////////////////////////////////////////\r\n                return features;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        readPlacemark_(node, objectStack) {\r\n            const object = ol.xml.pushParseAndPop({ 'geometry': null },\r\n                PLACEMARK_PARSERS, node, objectStack);\r\n            if (!object) {\r\n                return undefined;\r\n            }  \r\n            const feature = new ol.Feature();\r\n            const id = node.getAttribute('id');\r\n            if (id !== null) {\r\n                feature.setId(id);\r\n            }\r\n            const options = objectStack[0];\r\n\r\n            const geometry = object['geometry'];\r\n            if (geometry) {\r\n                ol.format.Feature.transformWithOptions(geometry, false, options);\r\n            }\r\n            feature.setGeometry(geometry);\r\n            delete object['geometry'];\r\n\r\n            if (this.extractStyles_) {\r\n                let style = object['Style'];\r\n                let styleUrl = object['styleUrl'];\r\n                const styleFunction = createFeatureStyleFunction(\r\n                    style, styleUrl, this.defaultStyle_, this.sharedStyles_,\r\n                    this.showPointNames_);\r\n                feature.setStyle(styleFunction);                \r\n            }\r\n            delete object['Style'];\r\n            // we do not remove the styleUrl property from the object, so it\r\n            // gets stored on feature when setProperties is called\r\n            delete object.styleUrl;//URI:Me veo obligado a eliminar el atributo styleUrl porque se muestra en el bocadillo de las features\r\n\r\n            feature.setProperties(object, true);\r\n\r\n            return feature;\r\n        }\r\n\r\n\r\n        // TODO: completar con los cambios en ol-es.\r\n        readSharedStyle_(node, objectStack) {\r\n            const id = node.getAttribute('id');\r\n            if (id !== null) {\r\n                const style = readStyle(node, objectStack);\r\n                if (style) {\r\n                    let styleUri;\r\n                    let baseURI = node.baseURI;\r\n                    if (!baseURI || baseURI == 'about:blank') {\r\n                        baseURI = window.location.href;\r\n                    }\r\n                    if (baseURI) {\r\n                        const url = new URL('#' + id, baseURI);\r\n                        styleUri = url.href;\r\n                    } else {\r\n                        styleUri = '#' + id;\r\n                    }\r\n                    this.sharedStyles_[styleUri] = style;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        readFeatureFromNode(node, opt_options) {\r\n            if (!ol.array.includes(NAMESPACE_URIS, node.namespaceURI)) {\r\n                return null;\r\n            }\r\n            const feature = this.readPlacemark_(\r\n                node, [this.getReadOptions(node, opt_options)]);\r\n            if (feature) {\r\n                return feature;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        readFeaturesFromNode(node, opt_options) {\r\n            if (!ol.array.includes(NAMESPACE_URIS, node.namespaceURI)) {\r\n                return [];\r\n            }\r\n            let features;\r\n            const localName = node.localName;\r\n            if (localName == 'Document' || localName == 'Folder') {\r\n                features = this.readDocumentOrFolder_(\r\n                    node, [this.getReadOptions(node, opt_options)]);\r\n                if (features) {\r\n                    return features;\r\n                } else {\r\n                    return [];\r\n                }\r\n            } else if (localName == 'Placemark') {\r\n                const feature = this.readPlacemark_(\r\n                    node, [this.getReadOptions(node, opt_options)]);\r\n                if (feature) {\r\n                    return [feature];\r\n                } else {\r\n                    return [];\r\n                }\r\n            } else if (localName == 'kml') {\r\n                features = [];\r\n                for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n                    const fs = this.readFeaturesFromNode(n, opt_options);\r\n                    if (fs) {\r\n                        ol.array.extend(features, fs);\r\n                    }\r\n                }\r\n                return features;\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {ol.style.Style|undefined} foundStyle Style.\r\n     * @param {string} name Name.\r\n     * @return {ol.style.Style} style Style.\r\n     */\r\n    function createNameStyleFunction(foundStyle, name) {\r\n        let textStyle = null;\r\n        const textOffset = [0, 0];\r\n        let textAlign = 'start';\r\n        if (foundStyle.getImage()) {\r\n            let imageSize = foundStyle.getImage().getImageSize();\r\n            if (imageSize === null) {\r\n                imageSize = DEFAULT_IMAGE_STYLE_SIZE;\r\n            }\r\n            if (imageSize.length == 2) {\r\n                const imageScale = foundStyle.getImage().getScale();\r\n                // Offset the label to be centered to the right of the icon, if there is\r\n                // one.\r\n                textOffset[0] = imageScale * imageSize[0] / 2;\r\n                textOffset[1] = -imageScale * imageSize[1] / 2;\r\n                textAlign = 'left';\r\n            }\r\n        }\r\n        if (foundStyle.getText() !== null) {\r\n            // clone the text style, customizing it with name, alignments and offset.\r\n            // Note that kml does not support many text options that OpenLayers does (rotation, textBaseline).\r\n            const foundText = foundStyle.getText();\r\n            textStyle = foundText.clone();\r\n            textStyle.setFont(foundText.getFont() || DEFAULT_TEXT_STYLE.getFont());\r\n            textStyle.setScale(foundText.getScale() || DEFAULT_TEXT_STYLE.getScale());\r\n            textStyle.setFill(foundText.getFill() || DEFAULT_TEXT_STYLE.getFill());\r\n            textStyle.setStroke(foundText.getStroke() || DEFAULT_TEXT_STROKE_STYLE);\r\n        } else {\r\n            textStyle = DEFAULT_TEXT_STYLE.clone();\r\n        }\r\n        textStyle.setText(name);\r\n        textStyle.setOffsetX(textOffset[0]);\r\n        textStyle.setOffsetY(textOffset[1]);\r\n        textStyle.setTextAlign(textAlign);\r\n\r\n        const nameStyle = new ol.style.Style({\r\n            text: textStyle\r\n        });\r\n        return nameStyle;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Array<ol.style.Style>|undefined} style Style.\r\n     * @param {string} styleUrl Style URL.\r\n     * @param {Array<ol.style.Style>} defaultStyle Default style.\r\n     * @param {!Object<string, (Array<ol.style.Style>|string)>} sharedStyles Shared styles.\r\n     * @param {boolean|undefined} showPointNames true to show names for point placemarks.\r\n     * @return {import(\"../style/Style.js\").StyleFunction} Feature style function.\r\n     */\r\n    function createFeatureStyleFunction(style, styleUrl, defaultStyle, sharedStyles, showPointNames) {\r\n\r\n        return (\r\n            /**\r\n             * @param {Feature} feature feature.\r\n             * @param {number} resolution Resolution.\r\n             * @return {Array<ol.style.Style>} Style.\r\n             */\r\n            function (feature, resolution) {\r\n                let drawName = showPointNames;\r\n                /** @type {ol.style.Style|undefined} */\r\n                let nameStyle;\r\n                let name = '';\r\n                if (drawName) {\r\n                    const geometry = feature.getGeometry();\r\n                    if (geometry) {\r\n                        drawName = geometry.getType() === ol.geom.GeometryType.POINT;\r\n                    }\r\n                }\r\n\r\n                if (drawName) {\r\n                    name = /** @type {string} */ (feature.get('name'));\r\n                    drawName = drawName && !!name;\r\n                }\r\n\r\n                if (style) {\r\n                    if (drawName) {\r\n                        nameStyle = createNameStyleFunction(style[0], name);\r\n                        return style.concat(nameStyle);\r\n                    }\r\n                    return style;\r\n                }\r\n                if (styleUrl) {\r\n                    const foundStyle = findStyle(styleUrl, defaultStyle, sharedStyles);\r\n                    if (drawName) {\r\n                        nameStyle = createNameStyleFunction(foundStyle[0], name);\r\n                        return foundStyle.concat(nameStyle);\r\n                    }\r\n                    return foundStyle;\r\n                }\r\n                if (drawName) {\r\n                    nameStyle = createNameStyleFunction(defaultStyle[0], name);\r\n                    return defaultStyle.concat(nameStyle);\r\n                }\r\n                return defaultStyle;\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Array<ol.style.Style>|string|undefined} styleValue Style value.\r\n     * @param {Array<ol.style.Style>} defaultStyle Default style.\r\n     * @param {!Object<string, (Array<ol.style.Style>|string)>} sharedStyles\r\n     * Shared styles.\r\n     * @return {Array<ol.style.Style>} Style.\r\n     */\r\n    function findStyle(styleValue, defaultStyle, sharedStyles) {\r\n        if (Array.isArray(styleValue)) {\r\n            return styleValue;\r\n        } else if (typeof styleValue === 'string') {\r\n            // KML files in the wild occasionally forget the leading `#` on styleUrls\r\n            // defined in the same document.  Add a leading `#` if it enables to find\r\n            // a style.\r\n            if (!(styleValue in sharedStyles) && ('#' + styleValue in sharedStyles)) {\r\n                styleValue = '#' + styleValue;\r\n            }\r\n            return findStyle(sharedStyles[styleValue], defaultStyle, sharedStyles);\r\n        } else {\r\n            return defaultStyle;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @return {import(\"../color.js\").Color|undefined} Color.\r\n     */\r\n    function readColor(node) {\r\n        const s = ol.xml.getAllTextContent(node, false);\r\n        // The KML specification states that colors should not include a leading `#`\r\n        // but we tolerate them.\r\n        const m = /^\\s*#?\\s*([0-9A-Fa-f]{8})\\s*$/.exec(s);\r\n        if (m) {\r\n            const hexColor = m[1];\r\n            return [\r\n                parseInt(hexColor.substr(6, 2), 16),\r\n                parseInt(hexColor.substr(4, 2), 16),\r\n                parseInt(hexColor.substr(2, 2), 16),\r\n                parseInt(hexColor.substr(0, 2), 16) / 255\r\n            ];\r\n\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @return {Array<number>|undefined} Flat coordinates.\r\n     */\r\n    function readFlatCoordinates(node) {\r\n        let s = ol.xml.getAllTextContent(node, false);\r\n        const flatCoordinates = [];\r\n        // The KML specification states that coordinate tuples should not include\r\n        // spaces, but we tolerate them.\r\n        const re =\r\n            /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*,\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)(?:\\s*,\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?))?\\s*/i;\r\n        let m;\r\n        while ((m = re.exec(s))) {\r\n            const x = parseFloat(m[1]);\r\n            const y = parseFloat(m[2]);\r\n            const z = m[3] ? parseFloat(m[3]) : 0;\r\n            flatCoordinates.push(x, y, z);\r\n            s = s.substr(m[0].length);\r\n        }\r\n        if (s !== '') {\r\n            return undefined;\r\n        }\r\n        return flatCoordinates;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @return {string} URI.\r\n     */\r\n    function readURI(node) {\r\n        const s = ol.xml.getAllTextContent(node, false).trim();\r\n        let baseURI = node.baseURI;\r\n        if (!baseURI || baseURI == 'about:blank') {\r\n            baseURI = window.location.href;\r\n        }\r\n\r\n        if (baseURI) {\r\n            // flacunza: Parche para evitar peticiones HTTP desde una página HTTPS\r\n            if (location.protocol === 'https:' && baseURI.indexOf('http://') === 0) {\r\n                baseURI = baseURI.substr(5);\r\n            }\r\n            const url = new URL(s, baseURI);\r\n            return url.href;\r\n        } else {\r\n            return s;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @return {Vec2} Vec2.\r\n     */\r\n    function readVec2(node) {\r\n        const xunits = node.getAttribute('xunits');\r\n        const yunits = node.getAttribute('yunits');\r\n        let origin;\r\n        if (xunits !== 'insetPixels') {\r\n            if (yunits !== 'insetPixels') {\r\n                origin = ol.style.IconOrigin.BOTTOM_LEFT;\r\n            } else {\r\n                origin = ol.style.IconOrigin.TOP_LEFT;\r\n            }\r\n        } else {\r\n            if (yunits !== 'insetPixels') {\r\n                origin = ol.style.IconOrigin.BOTTOM_RIGHT;\r\n            } else {\r\n                origin = ol.style.IconOrigin.TOP_RIGHT;\r\n            }\r\n        }\r\n        return {\r\n            x: parseFloat(node.getAttribute('x')),\r\n            xunits: ICON_ANCHOR_UNITS_MAP[xunits],\r\n            y: parseFloat(node.getAttribute('y')),\r\n            yunits: ICON_ANCHOR_UNITS_MAP[yunits],\r\n            origin: origin\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @return {number|undefined} Scale.\r\n     */\r\n    function readScale(node) {\r\n        return ol.format.xsd.readDecimal(node);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const STYLE_MAP_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'Pair': pairDataParser\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {Array<ol.style.Style>|string|undefined} StyleMap.\r\n     */\r\n    function readStyleMapValue(node, objectStack) {\r\n        return ol.xml.pushParseAndPop(undefined,\r\n            STYLE_MAP_PARSERS, node, objectStack);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const ICON_STYLE_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'Icon': ol.xml.makeObjectPropertySetter(readIcon),\r\n            'heading': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'hotSpot': ol.xml.makeObjectPropertySetter(readVec2),\r\n            'scale': ol.xml.makeObjectPropertySetter(readScale)\r\n        });\r\n\r\n    // Creamos un parser para interpretar la plantilla de los bocadillos\r\n    const readText = function (node, objectStack) {\r\n        ol.asserts.assert(node.nodeType == Node.ELEMENT_NODE);\r\n        ol.asserts.assert(node.localName == 'text');\r\n        var s = ol.format.xsd.readString(node);\r\n        return s.trim();\r\n    };\r\n\r\n    const balloonStyleParser = function (node, objectStack) {\r\n        ol.asserts.assert(node.nodeType == Node.ELEMENT_NODE);\r\n        ol.asserts.assert(node.localName == 'BalloonStyle');\r\n        // FIXME colorMode\r\n        var object = ol.xml.pushParseAndPop(\r\n            {}, BALLOON_STYLE_PARSERS, node, objectStack);\r\n        if (!object) {\r\n            return;\r\n        }\r\n        const styleObject = objectStack[objectStack.length - 1];\r\n        const type = typeof styleObject;\r\n        ol.asserts.assert(type == 'object' && styleObject != null || type == 'function');\r\n        var textStyle = new ol.style.Text({\r\n            text: (object['text'])\r\n        });\r\n        styleObject['balloonStyle'] = textStyle;\r\n    };\r\n\r\n    const BALLOON_STYLE_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'text': ol.xml.makeObjectPropertySetter(readText),\r\n        });\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function iconStyleParser(node, objectStack) {\r\n        // FIXME refreshMode\r\n        // FIXME refreshInterval\r\n        // FIXME viewRefreshTime\r\n        // FIXME viewBoundScale\r\n        // FIXME viewFormat\r\n        // FIXME httpQuery\r\n        const object = ol.xml.pushParseAndPop(\r\n            {}, ICON_STYLE_PARSERS, node, objectStack);\r\n        if (!object) {\r\n            return;\r\n        }\r\n        const styleObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n        const IconObject = 'Icon' in object ? object['Icon'] : {};\r\n        const drawIcon = (!('Icon' in object) || Object.keys(IconObject).length > 0);\r\n        let src;\r\n        const href = /** @type {string|undefined} */\r\n            (IconObject['href']);\r\n        if (href) {\r\n            src = href;\r\n        } else if (drawIcon) {\r\n            src = DEFAULT_IMAGE_STYLE_SRC;\r\n        }\r\n        let anchor, anchorXUnits, anchorYUnits;\r\n        let anchorOrigin = ol.style.IconOrigin.BOTTOM_LEFT;\r\n        const hotSpot = /** @type {Vec2|undefined} */\r\n            (object['hotSpot']);\r\n        if (hotSpot) {\r\n            anchor = [hotSpot.x, hotSpot.y];\r\n            anchorXUnits = hotSpot.xunits;\r\n            anchorYUnits = hotSpot.yunits;\r\n            anchorOrigin = hotSpot.origin;\r\n        } else if (src === DEFAULT_IMAGE_STYLE_SRC) {\r\n            anchor = DEFAULT_IMAGE_STYLE_ANCHOR;\r\n            anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\r\n            anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\r\n        } else if (/^http:\\/\\/maps\\.(?:google|gstatic)\\.com\\//.test(src)) {\r\n            anchor = [0.5, 0];\r\n            anchorXUnits = ol.style.IconAnchorUnits.FRACTION;\r\n            anchorYUnits = ol.style.IconAnchorUnits.FRACTION;\r\n        }\r\n\r\n        // Añadimos este control para evitar problemas CORS en Firefox\r\n        if (/Firefox/.test(navigator.userAgent) && location.protocol === 'https:' && src.startsWith(\"http:\")) {\r\n            src = src.replace(\"http:\", \"https:\");\r\n        }\r\n\r\n        let offset;\r\n        const x = /** @type {number|undefined} */\r\n            (IconObject['x']);\r\n        const y = /** @type {number|undefined} */\r\n            (IconObject['y']);\r\n        if (x !== undefined && y !== undefined) {\r\n            offset = [x, y];\r\n        }\r\n\r\n        let size;\r\n        const w = /** @type {number|undefined} */\r\n            (IconObject['w']);\r\n        const h = /** @type {number|undefined} */\r\n            (IconObject['h']);\r\n        if (w !== undefined && h !== undefined) {\r\n            size = [w, h];\r\n        }\r\n\r\n        let rotation;\r\n        const heading = /** @type {number} */\r\n            (object['heading']);\r\n        if (heading !== undefined) {\r\n            rotation = ol.math.toRadians(heading);\r\n        }\r\n\r\n        let scale = /** @type {number|undefined} */\r\n            (object['scale']);\r\n\r\n        if (drawIcon) {\r\n            if (src == DEFAULT_IMAGE_STYLE_SRC) {\r\n                size = DEFAULT_IMAGE_STYLE_SIZE;\r\n                if (scale === undefined) {\r\n                    scale = DEFAULT_IMAGE_SCALE_MULTIPLIER;\r\n                }\r\n            }\r\n\r\n            const imageStyle = new ol.style.Icon({\r\n                anchor: anchor,\r\n                anchorOrigin: anchorOrigin,\r\n                anchorXUnits: anchorXUnits,\r\n                anchorYUnits: anchorYUnits,\r\n                crossOrigin: 'anonymous', // FIXME should this be configurable?\r\n                offset: offset,\r\n                offsetOrigin: ol.style.IconOrigin.BOTTOM_LEFT,\r\n                rotation: rotation,\r\n                scale: scale,\r\n                size: size,\r\n                src: src\r\n            });\r\n            styleObject['imageStyle'] = imageStyle;\r\n        } else {\r\n            // handle the case when we explicitly want to draw no icon.\r\n            styleObject['imageStyle'] = DEFAULT_NO_IMAGE_STYLE;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const LABEL_STYLE_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'color': ol.xml.makeObjectPropertySetter(readColor),\r\n            'scale': ol.xml.makeObjectPropertySetter(readScale)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function labelStyleParser(node, objectStack) {\r\n        // FIXME colorMode\r\n        const object = ol.xml.pushParseAndPop(\r\n            {}, LABEL_STYLE_PARSERS, node, objectStack);\r\n        if (!object) {\r\n            return;\r\n        }\r\n        const styleObject = objectStack[objectStack.length - 1];\r\n        const textStyle = new ol.style.Text({\r\n            fill: new ol.style.Fill({\r\n                color: /** @type {import(\"../color.js\").Color} */\r\n                    ('color' in object ? object['color'] : DEFAULT_COLOR)\r\n            }),\r\n            scale: /** @type {number|undefined} */\r\n                (object['scale'])\r\n        });\r\n        styleObject['textStyle'] = textStyle;\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const LINE_STYLE_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'color': ol.xml.makeObjectPropertySetter(readColor),\r\n            'width': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function lineStyleParser(node, objectStack) {\r\n        // FIXME colorMode\r\n        // FIXME gx:outerColor\r\n        // FIXME gx:outerWidth\r\n        // FIXME gx:physicalWidth\r\n        // FIXME gx:labelVisibility\r\n        const object = ol.xml.pushParseAndPop(\r\n            {}, LINE_STYLE_PARSERS, node, objectStack);\r\n        if (!object) {\r\n            return;\r\n        }\r\n        const styleObject = objectStack[objectStack.length - 1];\r\n        const strokeStyle = new ol.style.Stroke({\r\n            color: /** @type {import(\"../color.js\").Color} */\r\n                ('color' in object ? object['color'] : DEFAULT_COLOR),\r\n            width: /** @type {number} */ ('width' in object ? object['width'] : 1)\r\n        });\r\n        styleObject['strokeStyle'] = strokeStyle;\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const POLY_STYLE_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'color': ol.xml.makeObjectPropertySetter(readColor),\r\n            'fill': ol.xml.makeObjectPropertySetter(ol.format.xsd.readBoolean),\r\n            'outline': ol.xml.makeObjectPropertySetter(ol.format.xsd.readBoolean)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function polyStyleParser(node, objectStack) {\r\n        // FIXME colorMode\r\n        const object = ol.xml.pushParseAndPop(\r\n            {}, POLY_STYLE_PARSERS, node, objectStack);\r\n        if (!object) {\r\n            return;\r\n        }\r\n        const styleObject = objectStack[objectStack.length - 1];\r\n        const fillStyle = new ol.style.Fill({\r\n            color: /** @type {import(\"../color.js\").Color} */\r\n                ('color' in object ? object['color'] : DEFAULT_COLOR)\r\n        });\r\n        styleObject['fillStyle'] = fillStyle;\r\n        const fill = /** @type {boolean|undefined} */ (object['fill']);\r\n        if (fill !== undefined) {\r\n            styleObject['fill'] = fill;\r\n        }\r\n        const outline = /** @type {boolean|undefined} */ (object['outline']);\r\n        if (outline !== undefined) {\r\n            styleObject['outline'] = outline;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const FLAT_LINEAR_RING_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'coordinates': ol.xml.makeReplacer(readFlatCoordinates)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {Array<number>} LinearRing flat coordinates.\r\n     */\r\n    function readFlatLinearRing(node, objectStack) {\r\n        return ol.xml.pushParseAndPop(null,\r\n            FLAT_LINEAR_RING_PARSERS, node, objectStack);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function gxCoordParser(node, objectStack) {\r\n        const gxTrackObject = /** @type {GxTrackObject} */\r\n            (objectStack[objectStack.length - 1]);\r\n        const flatCoordinates = gxTrackObject.flatCoordinates;\r\n        const s = ol.xml.getAllTextContent(node, false);\r\n        const re =\r\n            /^\\s*([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s+([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s+([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s*$/i;\r\n        const m = re.exec(s);\r\n        if (m) {\r\n            const x = parseFloat(m[1]);\r\n            const y = parseFloat(m[2]);\r\n            const z = parseFloat(m[3]);\r\n            flatCoordinates.push(x, y, z, 0);\r\n        } else {\r\n            flatCoordinates.push(0, 0, 0, 0);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const GX_MULTITRACK_GEOMETRY_PARSERS = ol.xml.makeStructureNS(\r\n        GX_NAMESPACE_URIS, {\r\n            'Track': ol.xml.makeArrayPusher(readGxTrack)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {ol.geom.MultiLineString|undefined} MultiLineString.\r\n     */\r\n    function readGxMultiTrack(node, objectStack) {\r\n        const lineStrings = ol.xml.pushParseAndPop([],\r\n            GX_MULTITRACK_GEOMETRY_PARSERS, node, objectStack);\r\n        if (!lineStrings) {\r\n            return undefined;\r\n        }\r\n        return new ol.geom.MultiLineString(lineStrings);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const GX_TRACK_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'when': whenParser\r\n        }, ol.xml.makeStructureNS(\r\n            GX_NAMESPACE_URIS, {\r\n                'coord': gxCoordParser\r\n            }));\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {ol.geom.LineString|undefined} LineString.\r\n     */\r\n    function readGxTrack(node, objectStack) {\r\n        const gxTrackObject = ol.xml.pushParseAndPop(\r\n    /** @type {GxTrackObject} */({\r\n                flatCoordinates: [],\r\n                whens: []\r\n            }), GX_TRACK_PARSERS, node, objectStack);\r\n        if (!gxTrackObject) {\r\n            return undefined;\r\n        }\r\n        const flatCoordinates = gxTrackObject.flatCoordinates;\r\n        const whens = gxTrackObject.whens;\r\n        for (let i = 0, ii = Math.min(flatCoordinates.length, whens.length); i < ii; ++i) {\r\n            flatCoordinates[4 * i + 3] = whens[i];\r\n        }\r\n        return new ol.geom.LineString(flatCoordinates, ol.geom.GeometryLayout.XYZM);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const ICON_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'href': ol.xml.makeObjectPropertySetter(readURI)\r\n        }, ol.xml.makeStructureNS(\r\n            GX_NAMESPACE_URIS, {\r\n                'x': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n                'y': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n                'w': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n                'h': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal)\r\n            }));\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {Object} Icon object.\r\n     */\r\n    function readIcon(node, objectStack) {\r\n        const iconObject = ol.xml.pushParseAndPop(\r\n            {}, ICON_PARSERS, node, objectStack);\r\n        if (iconObject) {\r\n            return iconObject;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const GEOMETRY_FLAT_COORDINATES_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'coordinates': ol.xml.makeReplacer(readFlatCoordinates)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {Array<number>} Flat coordinates.\r\n     */\r\n    function readFlatCoordinatesFromNode(node, objectStack) {\r\n        return ol.xml.pushParseAndPop(null,\r\n            GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const EXTRUDE_AND_ALTITUDE_MODE_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'extrude': ol.xml.makeObjectPropertySetter(ol.format.xsd.readBoolean),\r\n            'tessellate': ol.xml.makeObjectPropertySetter(ol.format.xsd.readBoolean),\r\n            'altitudeMode': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {ol.geom.LineString|undefined} LineString.\r\n     */\r\n    function readLineString(node, objectStack) {\r\n        const properties = ol.xml.pushParseAndPop({},\r\n            EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node,\r\n            objectStack);\r\n        const flatCoordinates =\r\n            readFlatCoordinatesFromNode(node, objectStack);\r\n        if (flatCoordinates) {\r\n            const lineString = new ol.geom.LineString(flatCoordinates, ol.geom.GeometryLayout.XYZ);\r\n            lineString.setProperties(properties, true);\r\n            return lineString;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {ol.geom.Polygon|undefined} Polygon.\r\n     */\r\n    function readLinearRing(node, objectStack) {\r\n        const properties = ol.xml.pushParseAndPop({},\r\n            EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node,\r\n            objectStack);\r\n        const flatCoordinates =\r\n            readFlatCoordinatesFromNode(node, objectStack);\r\n        if (flatCoordinates) {\r\n            const polygon = new ol.geom.Polygon(flatCoordinates, ol.geom.GeometryLayout.XYZ, [flatCoordinates.length]);\r\n            polygon.setProperties(properties, true);\r\n            return polygon;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const MULTI_GEOMETRY_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'LineString': ol.xml.makeArrayPusher(readLineString),\r\n            'LinearRing': ol.xml.makeArrayPusher(readLinearRing),\r\n            'MultiGeometry': ol.xml.makeArrayPusher(readMultiGeometry),\r\n            'Point': ol.xml.makeArrayPusher(readPoint),\r\n            'Polygon': ol.xml.makeArrayPusher(readPolygon)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n     */\r\n    function readMultiGeometry(node, objectStack) {\r\n        const geometries = ol.xml.pushParseAndPop([],\r\n            MULTI_GEOMETRY_PARSERS, node, objectStack);\r\n        if (!geometries) {\r\n            return null;\r\n        }\r\n        if (geometries.length === 0) {\r\n            return new ol.geom.GeometryCollection(geometries);\r\n        }\r\n        let multiGeometry;\r\n        let homogeneous = true;\r\n        const type = geometries[0].getType();\r\n        let geometry;\r\n        for (let i = 1, ii = geometries.length; i < ii; ++i) {\r\n            geometry = geometries[i];\r\n            if (geometry.getType() != type) {\r\n                homogeneous = false;\r\n                break;\r\n            }\r\n        }\r\n        if (homogeneous) {\r\n            let layout;\r\n            let flatCoordinates;\r\n            if (type == ol.geom.GeometryType.POINT) {\r\n                const point = geometries[0];\r\n                layout = point.getLayout();\r\n                flatCoordinates = point.getFlatCoordinates();\r\n                for (let i = 1, ii = geometries.length; i < ii; ++i) {\r\n                    geometry = geometries[i];\r\n                    ol.array.extend(flatCoordinates, geometry.getFlatCoordinates());\r\n                }\r\n                multiGeometry = new ol.geom.MultiPoint(flatCoordinates, layout);\r\n                setCommonGeometryProperties(multiGeometry, geometries);\r\n            } else if (type == ol.geom.GeometryType.LINE_STRING) {\r\n                multiGeometry = new ol.geom.MultiLineString(geometries);\r\n                setCommonGeometryProperties(multiGeometry, geometries);\r\n            } else if (type == ol.geom.GeometryType.POLYGON) {\r\n                multiGeometry = new ol.geom.MultiPolygon(geometries);\r\n                setCommonGeometryProperties(multiGeometry, geometries);\r\n            } else if (type == ol.geom.GeometryType.GEOMETRY_COLLECTION) {\r\n                multiGeometry = new ol.geom.GeometryCollection(geometries);\r\n            } else {\r\n                assert(false, 37); // Unknown geometry type found\r\n            }\r\n        } else {\r\n            multiGeometry = new ol.geom.GeometryCollection(geometries);\r\n        }\r\n        return (\r\n    /** @type {import(\"../geom/Geometry.js\").default} */ (multiGeometry)\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {ol.geom.Point|undefined} Point.\r\n     */\r\n    function readPoint(node, objectStack) {\r\n        const properties = ol.xml.pushParseAndPop({},\r\n            EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node,\r\n            objectStack);\r\n        const flatCoordinates =\r\n            readFlatCoordinatesFromNode(node, objectStack);\r\n        if (flatCoordinates) {\r\n            const point = new ol.geom.Point(flatCoordinates, ol.geom.GeometryLayout.XYZ);\r\n            point.setProperties(properties, true);\r\n            return point;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const FLAT_LINEAR_RINGS_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'innerBoundaryIs': innerBoundaryIsParser,\r\n            'outerBoundaryIs': outerBoundaryIsParser\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {ol.geom.Polygon|undefined} Polygon.\r\n     */\r\n    function readPolygon(node, objectStack) {\r\n        const properties = ol.xml.pushParseAndPop(/** @type {Object<string,*>} */({}),\r\n            EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node,\r\n            objectStack);\r\n        const flatLinearRings = ol.xml.pushParseAndPop([null],\r\n            FLAT_LINEAR_RINGS_PARSERS, node, objectStack);\r\n        if (flatLinearRings && flatLinearRings[0]) {\r\n            const flatCoordinates = flatLinearRings[0];\r\n            const ends = [flatCoordinates.length];\r\n            for (let i = 1, ii = flatLinearRings.length; i < ii; ++i) {\r\n                ol.array.extend(flatCoordinates, flatLinearRings[i]);\r\n                ends.push(flatCoordinates.length);\r\n            }\r\n            const polygon = new ol.geom.Polygon(flatCoordinates, ol.geom.GeometryLayout.XYZ, ends);\r\n            polygon.setProperties(properties, true);\r\n            return polygon;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const STYLE_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'IconStyle': iconStyleParser,\r\n            'LabelStyle': labelStyleParser,\r\n            'LineStyle': lineStyleParser,\r\n            'PolyStyle': polyStyleParser,\r\n            'BalloonStyle': balloonStyleParser\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {Array<ol.style.Style>} Style.\r\n     */\r\n    function readStyle(node, objectStack) {\r\n        const styleObject = ol.xml.pushParseAndPop(\r\n            {}, STYLE_PARSERS, node, objectStack);\r\n        if (!styleObject) {\r\n            return null;\r\n        }\r\n        let fillStyle = /** @type {ol.style.Fill} */\r\n            ('fillStyle' in styleObject ?\r\n                styleObject['fillStyle'] : DEFAULT_FILL_STYLE);\r\n        const fill = /** @type {boolean|undefined} */ (styleObject['fill']);\r\n        if (fill !== undefined && !fill) {\r\n            fillStyle = null;\r\n        }\r\n        let imageStyle;\r\n        if ('imageStyle' in styleObject) {\r\n            if (styleObject['imageStyle'] != DEFAULT_NO_IMAGE_STYLE) {\r\n                imageStyle = styleObject['imageStyle'];\r\n            }\r\n        } else {\r\n            imageStyle = DEFAULT_IMAGE_STYLE;\r\n        }\r\n        const textStyle = /** @type {ol.style.Text} */\r\n            ('textStyle' in styleObject ?\r\n                styleObject['textStyle'] : DEFAULT_TEXT_STYLE);\r\n        let strokeStyle = /** @type {ol.style.Stroke} */\r\n            ('strokeStyle' in styleObject ?\r\n                styleObject['strokeStyle'] : DEFAULT_STROKE_STYLE);\r\n        // GLS: Comento el machaque del estilo de línea por que no haya outline, según la documentación (https://developers.google.com/kml/documentation/kmlreference#style) \r\n        // es opcional indicar outline\r\n        // Corregimos el bug 25306 No se carga el estilo de VV-del-Irati.kml\r\n        //const outline = /** @type {boolean|undefined} */\r\n        //    (styleObject['outline']);\r\n        //if (outline !== undefined && !outline) {\r\n        //    strokeStyle = null;\r\n        //}\r\n        const balloonStyle = styleObject['balloonStyle'];\r\n        const returnStyle = new ol.style.Style({\r\n            fill: fillStyle,\r\n            image: imageStyle,\r\n            stroke: strokeStyle,\r\n            text: textStyle,\r\n            zIndex: undefined // FIXME\r\n        });\r\n        if (balloonStyle) {\r\n            returnStyle._balloon = balloonStyle;\r\n        }\r\n        return [returnStyle];\r\n    }\r\n\r\n\r\n    /**\r\n     * Reads an array of geometries and creates arrays for common geometry\r\n     * properties. Then sets them to the multi geometry.\r\n     * @param {ol.geom.MultiPoint|ol.geom.MultiLineString|ol.geom.MultiPolygon} multiGeometry A multi-geometry.\r\n     * @param {Array<import(\"../geom/Geometry.js\").default>} geometries List of geometries.\r\n     */\r\n    function setCommonGeometryProperties(multiGeometry, geometries) {\r\n        const ii = geometries.length;\r\n        const extrudes = new Array(geometries.length);\r\n        const tessellates = new Array(geometries.length);\r\n        const altitudeModes = new Array(geometries.length);\r\n        let hasExtrude, hasTessellate, hasAltitudeMode;\r\n        hasExtrude = hasTessellate = hasAltitudeMode = false;\r\n        for (let i = 0; i < ii; ++i) {\r\n            const geometry = geometries[i];\r\n            extrudes[i] = geometry.get('extrude');\r\n            tessellates[i] = geometry.get('tessellate');\r\n            altitudeModes[i] = geometry.get('altitudeMode');\r\n            hasExtrude = hasExtrude || extrudes[i] !== undefined;\r\n            hasTessellate = hasTessellate || tessellates[i] !== undefined;\r\n            hasAltitudeMode = hasAltitudeMode || altitudeModes[i];\r\n        }\r\n        if (hasExtrude) {\r\n            multiGeometry.set('extrude', extrudes);\r\n        }\r\n        if (hasTessellate) {\r\n            multiGeometry.set('tessellate', tessellates);\r\n        }\r\n        if (hasAltitudeMode) {\r\n            multiGeometry.set('altitudeMode', altitudeModes);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const DATA_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'displayName': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'value': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function dataParser(node, objectStack) {\r\n        const name = node.getAttribute('name');\r\n        ol.xml.parseNode(DATA_PARSERS, node, objectStack);\r\n        const featureObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n        if (name !== null) {\r\n            featureObject[name] = featureObject.value;\r\n        } else if (featureObject.displayName !== null) {\r\n            featureObject[featureObject.displayName] = featureObject.value;\r\n        }\r\n        delete featureObject['value'];\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const EXTENDED_DATA_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'Data': dataParser,\r\n            'SchemaData': schemaDataParser\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function extendedDataParser(node, objectStack) {\r\n        ol.xml.parseNode(EXTENDED_DATA_PARSERS, node, objectStack);\r\n    }\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function regionParser(node, objectStack) {\r\n        ol.xml.parseNode(REGION_PARSERS, node, objectStack);\r\n    }\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const PAIR_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'Style': ol.xml.makeObjectPropertySetter(readStyle),\r\n            'key': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'styleUrl': ol.xml.makeObjectPropertySetter(readURI)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function pairDataParser(node, objectStack) {\r\n        const pairObject = ol.xml.pushParseAndPop(\r\n            {}, PAIR_PARSERS, node, objectStack);\r\n        if (!pairObject) {\r\n            return;\r\n        }\r\n        const key = /** @type {string|undefined} */\r\n            (pairObject['key']);\r\n        if (key && key == 'normal') {\r\n            const styleUrl = /** @type {string|undefined} */\r\n                (pairObject['styleUrl']);\r\n            if (styleUrl) {\r\n                objectStack[objectStack.length - 1] = styleUrl;\r\n            }\r\n            const style = /** @type {ol.style.Style} */\r\n                (pairObject['Style']);\r\n            if (style) {\r\n                objectStack[objectStack.length - 1] = style;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function placemarkStyleMapParser(node, objectStack) {\r\n        const styleMapValue = readStyleMapValue(node, objectStack);\r\n        if (!styleMapValue) {\r\n            return;\r\n        }\r\n        const placemarkObject = objectStack[objectStack.length - 1];\r\n        if (Array.isArray(styleMapValue)) {\r\n            placemarkObject['Style'] = styleMapValue;\r\n        } else if (typeof styleMapValue === 'string') {\r\n            placemarkObject['styleUrl'] = styleMapValue;\r\n        } else {\r\n            assert(false, 38); // `styleMapValue` has an unknown type\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const SCHEMA_DATA_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'SimpleData': simpleDataParser\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function schemaDataParser(node, objectStack) {\r\n        ol.xml.parseNode(SCHEMA_DATA_PARSERS, node, objectStack);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function simpleDataParser(node, objectStack) {\r\n        const name = node.getAttribute('name');\r\n        if (name !== null) {\r\n            const data = ol.format.xsd.readString(node);\r\n            const featureObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n            featureObject[name] = data;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const LAT_LON_ALT_BOX_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'altitudeMode': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'minAltitude': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'maxAltitude': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'north': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'south': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'east': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'west': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function latLonAltBoxParser(node, objectStack) {\r\n        const object = ol.xml.pushParseAndPop({}, LAT_LON_ALT_BOX_PARSERS, node, objectStack);\r\n        if (!object) {\r\n            return;\r\n        }\r\n        const regionObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n        const extent = [\r\n            parseFloat(object['west']),\r\n            parseFloat(object['south']),\r\n            parseFloat(object['east']),\r\n            parseFloat(object['north'])\r\n        ];\r\n        regionObject['extent'] = extent;\r\n        regionObject['altitudeMode'] = object['altitudeMode'];\r\n        regionObject['minAltitude'] = parseFloat(object['minAltitude']);\r\n        regionObject['maxAltitude'] = parseFloat(object['maxAltitude']);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const LOD_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'minLodPixels': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'maxLodPixels': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'minFadeExtent': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'maxFadeExtent': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function lodParser(node, objectStack) {\r\n        const object = ol.xml.pushParseAndPop({}, LOD_PARSERS, node, objectStack);\r\n        if (!object) {\r\n            return;\r\n        }\r\n        const lodObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n        lodObject['minLodPixels'] = parseFloat(object['minLodPixels']);\r\n        lodObject['maxLodPixels'] = parseFloat(object['maxLodPixels']);\r\n        lodObject['minFadeExtent'] = parseFloat(object['minFadeExtent']);\r\n        lodObject['maxFadeExtent'] = parseFloat(object['maxFadeExtent']);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const INNER_BOUNDARY_IS_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'LinearRing': ol.xml.makeReplacer(readFlatLinearRing)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function innerBoundaryIsParser(node, objectStack) {\r\n        /** @type {Array<number>|undefined} */\r\n        const flatLinearRing = ol.xml.pushParseAndPop(undefined,\r\n            INNER_BOUNDARY_IS_PARSERS, node, objectStack);\r\n        if (flatLinearRing) {\r\n            const flatLinearRings = /** @type {Array<Array<number>>} */\r\n                (objectStack[objectStack.length - 1]);\r\n            flatLinearRings.push(flatLinearRing);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const OUTER_BOUNDARY_IS_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'LinearRing': ol.xml.makeReplacer(readFlatLinearRing)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function outerBoundaryIsParser(node, objectStack) {\r\n        /** @type {Array<number>|undefined} */\r\n        const flatLinearRing = ol.xml.pushParseAndPop(undefined,\r\n            OUTER_BOUNDARY_IS_PARSERS, node, objectStack);\r\n        if (flatLinearRing) {\r\n            const flatLinearRings = /** @type {Array<Array<number>>} */\r\n                (objectStack[objectStack.length - 1]);\r\n            flatLinearRings[0] = flatLinearRing;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function linkParser(node, objectStack) {\r\n        ol.xml.parseNode(LINK_PARSERS, node, objectStack);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function whenParser(node, objectStack) {\r\n        const gxTrackObject = /** @type {GxTrackObject} */\r\n            (objectStack[objectStack.length - 1]);\r\n        const whens = gxTrackObject.whens;\r\n        const s = ol.xml.getAllTextContent(node, false);\r\n        const when = Date.parse(s);\r\n        whens.push(isNaN(when) ? 0 : when);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node to append a TextNode with the color to.\r\n     * @param {import(\"../color.js\").Color|string} color Color.\r\n     */\r\n    function writeColorTextNode(node, color) {\r\n        const rgba = asArray(color);\r\n        const opacity = (rgba.length == 4) ? rgba[3] : 1;\r\n        /** @type {Array<string|number>} */\r\n        const abgr = [opacity * 255, rgba[2], rgba[1], rgba[0]];\r\n        for (let i = 0; i < 4; ++i) {\r\n            const hex = Math.floor(/** @type {number} */(abgr[i])).toString(16);\r\n            abgr[i] = (hex.length == 1) ? '0' + hex : hex;\r\n        }\r\n        ol.format.xsd.writeStringTextNode(node, abgr.join(''));\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node to append a TextNode with the coordinates to.\r\n     * @param {Array<number>} coordinates Coordinates.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeCoordinatesTextNode(node, coordinates, objectStack) {\r\n        const context = objectStack[objectStack.length - 1];\r\n\r\n        const layout = context['layout'];\r\n        const stride = context['stride'];\r\n\r\n        let dimension;\r\n        if (layout == ol.geom.GeometryLayout.XY ||\r\n            layout == ol.geom.GeometryLayout.XYM) {\r\n            dimension = 2;\r\n        } else if (layout == ol.geom.GeometryLayout.XYZ ||\r\n            layout == ol.geom.GeometryLayout.XYZM) {\r\n            dimension = 3;\r\n        } else {\r\n            assert(false, 34); // Invalid geometry layout\r\n        }\r\n\r\n        const ii = coordinates.length;\r\n        let text = '';\r\n        if (ii > 0) {\r\n            text += coordinates[0];\r\n            for (let d = 1; d < dimension; ++d) {\r\n                text += ',' + coordinates[d];\r\n            }\r\n            for (let i = stride; i < ii; i += stride) {\r\n                text += ' ' + coordinates[i];\r\n                for (let d = 1; d < dimension; ++d) {\r\n                    text += ',' + coordinates[i + d];\r\n                }\r\n            }\r\n        }\r\n        ol.format.xsd.writeStringTextNode(node, text);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const EXTENDEDDATA_NODE_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'Data': ol.xml.makeChildAppender(writeDataNode),\r\n            'value': ol.xml.makeChildAppender(writeDataNodeValue),\r\n            'displayName': ol.xml.makeChildAppender(writeDataNodeName)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {{name: *, value: *}} pair Name value pair.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeDataNode(node, pair, objectStack) {\r\n        node.setAttribute('name', pair.name);\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n        const value = pair.value;\r\n\r\n        if (typeof value == 'object') {\r\n            if (value !== null && value.displayName) {\r\n                ol.xml.pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS,\r\n                    ol.xml.OBJECT_PROPERTY_NODE_FACTORY, [value.displayName], objectStack, ['displayName']);\r\n            }\r\n\r\n            if (value !== null && value.value) {\r\n                ol.xml.pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS,\r\n                    ol.xml.OBJECT_PROPERTY_NODE_FACTORY, [value.value], objectStack, ['value']);\r\n            }\r\n        } else {\r\n            ol.xml.pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS,\r\n                ol.xml.OBJECT_PROPERTY_NODE_FACTORY, [value], objectStack, ['value']);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node to append a TextNode with the name to.\r\n     * @param {string} name DisplayName.\r\n     */\r\n    function writeDataNodeName(node, name) {\r\n        ol.format.xsd.writeCDATASection(node, name);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node to append a CDATA Section with the value to.\r\n     * @param {string} value Value.\r\n     */\r\n    function writeDataNodeValue(node, value) {\r\n        ol.format.xsd.writeStringTextNode(node, value);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const DOCUMENT_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'Placemark': ol.xml.makeChildAppender(writePlacemark)\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @param {*} value Value.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @param {string=} opt_nodeName Node name.\r\n     * @return {Node|undefined} Node.\r\n     */\r\n    const DOCUMENT_NODE_FACTORY = function (value, objectStack, opt_nodeName) {\r\n        const parentNode = objectStack[objectStack.length - 1].node;\r\n        return ol.xml.createElementNS(parentNode.namespaceURI, 'Placemark');\r\n    };\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {Array<Feature>} features Features.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @this {KML}\r\n     */\r\n    function writeDocument(node, features, objectStack) {\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n        ol.xml.pushSerializeAndPop(context, DOCUMENT_SERIALIZERS,\r\n            DOCUMENT_NODE_FACTORY, features, objectStack, undefined,\r\n            this);\r\n    }\r\n\r\n\r\n    /**\r\n     * A factory for creating Data nodes.\r\n     * @const\r\n     * @type {function(*, Array<*>): (Node|undefined)}\r\n     */\r\n    const DATA_NODE_FACTORY = ol.xml.makeSimpleNodeFactory('Data');\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {{names: Array<string>, values: (Array<*>)}} namesAndValues Names and values.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeExtendedData(node, namesAndValues, objectStack) {\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n        const names = namesAndValues.names;\r\n        const values = namesAndValues.values;\r\n        const length = names.length;\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            ol.xml.pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS,\r\n                DATA_NODE_FACTORY, [{ name: names[i], value: values[i] }], objectStack);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Array<string>>}\r\n     */\r\n    const ICON_SEQUENCE = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, [\r\n            'href'\r\n        ],\r\n        ol.xml.makeStructureNS(GX_NAMESPACE_URIS, [\r\n            'x', 'y', 'w', 'h'\r\n        ]));\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const ICON_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'href': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode)\r\n        }, ol.xml.makeStructureNS(\r\n            GX_NAMESPACE_URIS, {\r\n                'x': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode),\r\n                'y': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode),\r\n                'w': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode),\r\n                'h': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode)\r\n            }));\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @param {*} value Value.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @param {string=} opt_nodeName Node name.\r\n     * @return {Node|undefined} Node.\r\n     */\r\n    const GX_NODE_FACTORY = function (value, objectStack, opt_nodeName) {\r\n        return ol.xml.createElementNS(GX_NAMESPACE_URIS[0],\r\n            'gx:' + opt_nodeName);\r\n    };\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {Object} icon Icon object.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeIcon(node, icon, objectStack) {\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n        const parentNode = objectStack[objectStack.length - 1].node;\r\n        let orderedKeys = ICON_SEQUENCE[parentNode.namespaceURI];\r\n        let values = ol.xml.makeSequence(icon, orderedKeys);\r\n        ol.xml.pushSerializeAndPop(context,\r\n            ICON_SERIALIZERS, ol.xml.OBJECT_PROPERTY_NODE_FACTORY,\r\n            values, objectStack, orderedKeys);\r\n        orderedKeys =\r\n            ICON_SEQUENCE[GX_NAMESPACE_URIS[0]];\r\n        values = ol.xml.makeSequence(icon, orderedKeys);\r\n        ol.xml.pushSerializeAndPop(context, ICON_SERIALIZERS,\r\n            GX_NODE_FACTORY, values, objectStack, orderedKeys);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Array<string>>}\r\n     */\r\n    const ICON_STYLE_SEQUENCE = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, [\r\n            'scale', 'heading', 'Icon', 'hotSpot'\r\n        ]);\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const ICON_STYLE_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'Icon': ol.xml.makeChildAppender(writeIcon),\r\n            'heading': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode),\r\n            'hotSpot': ol.xml.makeChildAppender(writeVec2),\r\n            'scale': ol.xml.makeChildAppender(writeScaleTextNode)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {import(\"../style/Icon.js\").default} style Icon style.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeIconStyle(node, style, objectStack) {\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n        const properties = {};\r\n        const src = style.getSrc();\r\n        const size = style.getSize();\r\n        const iconImageSize = style.getImageSize();\r\n        const iconProperties = {\r\n            'href': src\r\n        };\r\n\r\n        if (size) {\r\n            iconProperties['w'] = size[0];\r\n            iconProperties['h'] = size[1];\r\n            const anchor = style.getAnchor(); // top-left\r\n            const origin = style.getOrigin(); // top-left\r\n\r\n            if (origin && iconImageSize && origin[0] !== 0 && origin[1] !== size[1]) {\r\n                iconProperties['x'] = origin[0];\r\n                iconProperties['y'] = iconImageSize[1] - (origin[1] + size[1]);\r\n            }\r\n\r\n            if (anchor && (anchor[0] !== size[0] / 2 || anchor[1] !== size[1] / 2)) {\r\n                const /** @type {Vec2} */ hotSpot = {\r\n                    x: anchor[0],\r\n                    xunits: ol.style.IconAnchorUnits.PIXELS,\r\n                    y: size[1] - anchor[1],\r\n                    yunits: ol.style.IconAnchorUnits.PIXELS\r\n                };\r\n                properties['hotSpot'] = hotSpot;\r\n            }\r\n        }\r\n\r\n        properties['Icon'] = iconProperties;\r\n\r\n        const scale = style.getScale();\r\n        if (scale !== 1) {\r\n            properties['scale'] = scale;\r\n        }\r\n\r\n        const rotation = style.getRotation();\r\n        if (rotation !== 0) {\r\n            properties['heading'] = rotation; // 0-360\r\n        }\r\n\r\n        const parentNode = objectStack[objectStack.length - 1].node;\r\n        const orderedKeys = ICON_STYLE_SEQUENCE[parentNode.namespaceURI];\r\n        const values = ol.xml.makeSequence(properties, orderedKeys);\r\n        ol.xml.pushSerializeAndPop(context, ICON_STYLE_SERIALIZERS,\r\n            ol.xml.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Array<string>>}\r\n     */\r\n    const LABEL_STYLE_SEQUENCE = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, [\r\n            'color', 'scale'\r\n        ]);\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const LABEL_STYLE_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'color': ol.xml.makeChildAppender(writeColorTextNode),\r\n            'scale': ol.xml.makeChildAppender(writeScaleTextNode)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {ol.style.Text} style style.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeLabelStyle(node, style, objectStack) {\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n        const properties = {};\r\n        const fill = style.getFill();\r\n        if (fill) {\r\n            properties['color'] = fill.getColor();\r\n        }\r\n        const scale = style.getScale();\r\n        if (scale && scale !== 1) {\r\n            properties['scale'] = scale;\r\n        }\r\n        const parentNode = objectStack[objectStack.length - 1].node;\r\n        const orderedKeys =\r\n            LABEL_STYLE_SEQUENCE[parentNode.namespaceURI];\r\n        const values = ol.xml.makeSequence(properties, orderedKeys);\r\n        ol.xml.pushSerializeAndPop(context, LABEL_STYLE_SERIALIZERS,\r\n            ol.xml.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Array<string>>}\r\n     */\r\n    const LINE_STYLE_SEQUENCE = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, [\r\n            'color', 'width'\r\n        ]);\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const LINE_STYLE_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'color': ol.xml.makeChildAppender(writeColorTextNode),\r\n            'width': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {ol.style.Stroke} style style.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeLineStyle(node, style, objectStack) {\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n        const properties = {\r\n            'color': style.getColor(),\r\n            'width': style.getWidth()\r\n        };\r\n        const parentNode = objectStack[objectStack.length - 1].node;\r\n        const orderedKeys = LINE_STYLE_SEQUENCE[parentNode.namespaceURI];\r\n        const values = ol.xml.makeSequence(properties, orderedKeys);\r\n        ol.xml.pushSerializeAndPop(context, LINE_STYLE_SERIALIZERS,\r\n            ol.xml.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, string>}\r\n     */\r\n    const GEOMETRY_TYPE_TO_NODENAME = {\r\n        'Point': 'Point',\r\n        'LineString': 'LineString',\r\n        'LinearRing': 'LinearRing',\r\n        'Polygon': 'Polygon',\r\n        'MultiPoint': 'MultiGeometry',\r\n        'MultiLineString': 'MultiGeometry',\r\n        'MultiPolygon': 'MultiGeometry',\r\n        'GeometryCollection': 'MultiGeometry'\r\n    };\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @param {*} value Value.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @param {string=} opt_nodeName Node name.\r\n     * @return {Node|undefined} Node.\r\n     */\r\n    const GEOMETRY_NODE_FACTORY = function (value, objectStack, opt_nodeName) {\r\n        if (value) {\r\n            const parentNode = objectStack[objectStack.length - 1].node;\r\n            return ol.xml.createElementNS(parentNode.namespaceURI,\r\n                GEOMETRY_TYPE_TO_NODENAME[/** @type {import(\"../geom/Geometry.js\").default} */ (value).getType()]);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * A factory for creating Point nodes.\r\n     * @const\r\n     * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n     */\r\n    const POINT_NODE_FACTORY = ol.xml.makeSimpleNodeFactory('Point');\r\n\r\n\r\n    /**\r\n     * A factory for creating LineString nodes.\r\n     * @const\r\n     * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n     */\r\n    const LINE_STRING_NODE_FACTORY = ol.xml.makeSimpleNodeFactory('LineString');\r\n\r\n\r\n    /**\r\n     * A factory for creating LinearRing nodes.\r\n     * @const\r\n     * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n     */\r\n    const LINEAR_RING_NODE_FACTORY = ol.xml.makeSimpleNodeFactory('LinearRing');\r\n\r\n\r\n    /**\r\n     * A factory for creating Polygon nodes.\r\n     * @const\r\n     * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n     */\r\n    const POLYGON_NODE_FACTORY = ol.xml.makeSimpleNodeFactory('Polygon');\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const MULTI_GEOMETRY_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'LineString': ol.xml.makeChildAppender(\r\n                writePrimitiveGeometry),\r\n            'Point': ol.xml.makeChildAppender(\r\n                writePrimitiveGeometry),\r\n            'Polygon': ol.xml.makeChildAppender(writePolygon),\r\n            'GeometryCollection': ol.xml.makeChildAppender(\r\n                writeMultiGeometry)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeMultiGeometry(node, geometry, objectStack) {\r\n        /** @type {import(\"../xml.js\").NodeStackItem} */\r\n        const context = { node: node };\r\n        const type = geometry.getType();\r\n        /** @type {Array<import(\"../geom/Geometry.js\").default>} */\r\n        let geometries;\r\n        /** @type {function(*, Array<*>, string=): (Node|undefined)} */\r\n        let factory;\r\n        if (type == ol.geom.GeometryType.GEOMETRY_COLLECTION) {\r\n            geometries = /** @type {ol.geom.GeometryCollection} */ (geometry).getGeometries();\r\n            factory = GEOMETRY_NODE_FACTORY;\r\n        } else if (type == ol.geom.GeometryType.MULTI_POINT) {\r\n            geometries = /** @type {ol.geom.MultiPoint} */ (geometry).getPoints();\r\n            factory = POINT_NODE_FACTORY;\r\n        } else if (type == ol.geom.GeometryType.MULTI_LINE_STRING) {\r\n            geometries =\r\n                (/** @type {ol.geom.MultiLineString} */ (geometry)).getLineStrings();\r\n            factory = LINE_STRING_NODE_FACTORY;\r\n        } else if (type == ol.geom.GeometryType.MULTI_POLYGON) {\r\n            geometries =\r\n                (/** @type {ol.geom.MultiPolygon} */ (geometry)).getPolygons();\r\n            factory = POLYGON_NODE_FACTORY;\r\n        } else {\r\n            assert(false, 39); // Unknown geometry type\r\n        }\r\n        ol.xml.pushSerializeAndPop(context,\r\n            MULTI_GEOMETRY_SERIALIZERS, factory,\r\n            geometries, objectStack);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const BOUNDARY_IS_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'LinearRing': ol.xml.makeChildAppender(\r\n                writePrimitiveGeometry)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {import(\"../geom/LinearRing.js\").default} linearRing Linear ring.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeBoundaryIs(node, linearRing, objectStack) {\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n        ol.xml.pushSerializeAndPop(context,\r\n            BOUNDARY_IS_SERIALIZERS,\r\n            LINEAR_RING_NODE_FACTORY, [linearRing], objectStack);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const PLACEMARK_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'ExtendedData': ol.xml.makeChildAppender(writeExtendedData),\r\n            'MultiGeometry': ol.xml.makeChildAppender(writeMultiGeometry),\r\n            'LineString': ol.xml.makeChildAppender(writePrimitiveGeometry),\r\n            'LinearRing': ol.xml.makeChildAppender(writePrimitiveGeometry),\r\n            'Point': ol.xml.makeChildAppender(writePrimitiveGeometry),\r\n            'Polygon': ol.xml.makeChildAppender(writePolygon),\r\n            'Style': ol.xml.makeChildAppender(writeStyle),\r\n            'address': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'description': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'name': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'open': ol.xml.makeChildAppender(ol.format.xsd.writeBooleanTextNode),\r\n            'phoneNumber': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'styleUrl': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'visibility': ol.xml.makeChildAppender(ol.format.xsd.writeBooleanTextNode)\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Array<string>>}\r\n     */\r\n    const PLACEMARK_SEQUENCE = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, [\r\n            'name', 'open', 'visibility', 'address', 'phoneNumber', 'description',\r\n            'styleUrl', 'Style'\r\n        ]);\r\n\r\n\r\n    /**\r\n     * A factory for creating ExtendedData nodes.\r\n     * @const\r\n     * @type {function(*, Array<*>): (Node|undefined)}\r\n     */\r\n    const EXTENDEDDATA_NODE_FACTORY = ol.xml.makeSimpleNodeFactory('ExtendedData');\r\n\r\n\r\n    /**\r\n     * FIXME currently we do serialize arbitrary/custom feature properties\r\n     * (ExtendedData).\r\n     * @param {Element} node Node.\r\n     * @param {Feature} feature Feature.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @this {KML}\r\n     */\r\n    function writePlacemark(node, feature, objectStack) {\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n\r\n        // set id\r\n        if (feature.getId()) {\r\n            node.setAttribute('id', /** @type {string} */(feature.getId()));\r\n        }\r\n\r\n        // serialize properties (properties unknown to KML are not serialized)\r\n        const properties = feature.getProperties();\r\n\r\n        // don't export these to ExtendedData\r\n        const filter = {\r\n            'address': 1, 'description': 1, 'name': 1, 'open': 1,\r\n            'phoneNumber': 1, 'styleUrl': 1, 'visibility': 1\r\n        };\r\n        filter[feature.getGeometryName()] = 1;\r\n        const keys = Object.keys(properties || {}).sort().filter(function (v) {\r\n            return !filter[v];\r\n        });\r\n\r\n        if (keys.length > 0) {\r\n            const sequence = ol.xml.makeSequence(properties, keys);\r\n            const namesAndValues = { names: keys, values: sequence };\r\n            ol.xml.pushSerializeAndPop(context, PLACEMARK_SERIALIZERS,\r\n                EXTENDEDDATA_NODE_FACTORY, [namesAndValues], objectStack);\r\n        }\r\n\r\n        const styleFunction = feature.getStyleFunction();\r\n        if (styleFunction) {\r\n            // FIXME the styles returned by the style function are supposed to be\r\n            // resolution-independent here\r\n            const styles = styleFunction(feature, 0);\r\n            if (styles) {\r\n                const style = Array.isArray(styles) ? styles[0] : styles;\r\n                if (this.writeStyles_) {\r\n                    properties['Style'] = style;\r\n                }\r\n                const textStyle = style.getText();\r\n                if (textStyle) {\r\n                    properties['name'] = textStyle.getText();\r\n                }\r\n            }\r\n        }\r\n        const parentNode = objectStack[objectStack.length - 1].node;\r\n        const orderedKeys = PLACEMARK_SEQUENCE[parentNode.namespaceURI];\r\n        const values = ol.xml.makeSequence(properties, orderedKeys);\r\n        ol.xml.pushSerializeAndPop(context, PLACEMARK_SERIALIZERS,\r\n            ol.xml.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\r\n\r\n        // serialize geometry\r\n        const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (objectStack[0]);\r\n        let geometry = feature.getGeometry();\r\n        if (geometry) {\r\n            geometry = ol.format.Feature.transformGeometryWithOptions(geometry, true, options);\r\n        }\r\n        ol.xml.pushSerializeAndPop(context, PLACEMARK_SERIALIZERS,\r\n            GEOMETRY_NODE_FACTORY, [geometry], objectStack);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Array<string>>}\r\n     */\r\n    const PRIMITIVE_GEOMETRY_SEQUENCE = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, [\r\n            'extrude', 'tessellate', 'altitudeMode', 'coordinates'\r\n        ]);\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const PRIMITIVE_GEOMETRY_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'extrude': ol.xml.makeChildAppender(ol.format.xsd.writeBooleanTextNode),\r\n            'tessellate': ol.xml.makeChildAppender(ol.format.xsd.writeBooleanTextNode),\r\n            'altitudeMode': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'coordinates': ol.xml.makeChildAppender(writeCoordinatesTextNode)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writePrimitiveGeometry(node, geometry, objectStack) {\r\n        const flatCoordinates = geometry.getFlatCoordinates();\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n        context['layout'] = geometry.getLayout();\r\n        context['stride'] = geometry.getStride();\r\n\r\n        // serialize properties (properties unknown to KML are not serialized)\r\n        const properties = geometry.getProperties();\r\n        properties.coordinates = flatCoordinates;\r\n\r\n        const parentNode = objectStack[objectStack.length - 1].node;\r\n        const orderedKeys = PRIMITIVE_GEOMETRY_SEQUENCE[parentNode.namespaceURI];\r\n        const values = ol.xml.makeSequence(properties, orderedKeys);\r\n        ol.xml.pushSerializeAndPop(context, PRIMITIVE_GEOMETRY_SERIALIZERS,\r\n            ol.xml.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const POLYGON_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'outerBoundaryIs': ol.xml.makeChildAppender(\r\n                writeBoundaryIs),\r\n            'innerBoundaryIs': ol.xml.makeChildAppender(\r\n                writeBoundaryIs)\r\n        });\r\n\r\n\r\n    /**\r\n     * A factory for creating innerBoundaryIs nodes.\r\n     * @const\r\n     * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n     */\r\n    const INNER_BOUNDARY_NODE_FACTORY = ol.xml.makeSimpleNodeFactory('innerBoundaryIs');\r\n\r\n\r\n    /**\r\n     * A factory for creating outerBoundaryIs nodes.\r\n     * @const\r\n     * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n     */\r\n    const OUTER_BOUNDARY_NODE_FACTORY = ol.xml.makeSimpleNodeFactory('outerBoundaryIs');\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {ol.geom.Polygon} polygon Polygon.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writePolygon(node, polygon, objectStack) {\r\n        const linearRings = polygon.getLinearRings();\r\n        const outerRing = linearRings.shift();\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n        // inner rings\r\n        ol.xml.pushSerializeAndPop(context,\r\n            POLYGON_SERIALIZERS,\r\n            INNER_BOUNDARY_NODE_FACTORY,\r\n            linearRings, objectStack);\r\n        // outer ring\r\n        ol.xml.pushSerializeAndPop(context,\r\n            POLYGON_SERIALIZERS,\r\n            OUTER_BOUNDARY_NODE_FACTORY,\r\n            [outerRing], objectStack);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const POLY_STYLE_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'color': ol.xml.makeChildAppender(writeColorTextNode)\r\n        });\r\n\r\n\r\n    /**\r\n     * A factory for creating coordinates nodes.\r\n     * @const\r\n     * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n     */\r\n    const COLOR_NODE_FACTORY = ol.xml.makeSimpleNodeFactory('color');\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {ol.style.Fill} style Style.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writePolyStyle(node, style, objectStack) {\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n        ol.xml.pushSerializeAndPop(context, POLY_STYLE_SERIALIZERS,\r\n            COLOR_NODE_FACTORY, [style.getColor()], objectStack);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node to append a TextNode with the scale to.\r\n     * @param {number|undefined} scale Scale.\r\n     */\r\n    function writeScaleTextNode(node, scale) {\r\n        // the Math is to remove any excess decimals created by float arithmetic\r\n        ol.format.xsd.writeDecimalTextNode(node,\r\n            Math.round(scale * 1e6) / 1e6);\r\n    }\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Array<string>>}\r\n     */\r\n    const STYLE_SEQUENCE = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, [\r\n            'IconStyle', 'LabelStyle', 'LineStyle', 'PolyStyle'\r\n        ]);\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const STYLE_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'IconStyle': ol.xml.makeChildAppender(writeIconStyle),\r\n            'LabelStyle': ol.xml.makeChildAppender(writeLabelStyle),\r\n            'LineStyle': ol.xml.makeChildAppender(writeLineStyle),\r\n            'PolyStyle': ol.xml.makeChildAppender(writePolyStyle)\r\n        });\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {ol.style.Style} style Style.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeStyle(node, style, objectStack) {\r\n        const /** @type {import(\"../xml.js\").NodeStackItem} */ context = { node: node };\r\n        const properties = {};\r\n        const fillStyle = style.getFill();\r\n        const strokeStyle = style.getStroke();\r\n        const imageStyle = style.getImage();\r\n        const textStyle = style.getText();\r\n        if (imageStyle && typeof /** @type {?} */ (imageStyle).getSrc === 'function') {\r\n            properties['IconStyle'] = imageStyle;\r\n        }\r\n        if (textStyle) {\r\n            properties['LabelStyle'] = textStyle;\r\n        }\r\n        if (strokeStyle) {\r\n            properties['LineStyle'] = strokeStyle;\r\n        }\r\n        if (fillStyle) {\r\n            properties['PolyStyle'] = fillStyle;\r\n        }\r\n        const parentNode = objectStack[objectStack.length - 1].node;\r\n        const orderedKeys = STYLE_SEQUENCE[parentNode.namespaceURI];\r\n        const values = ol.xml.makeSequence(properties, orderedKeys);\r\n        ol.xml.pushSerializeAndPop(context, STYLE_SERIALIZERS,\r\n            ol.xml.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node to append a TextNode with the Vec2 to.\r\n     * @param {Vec2} vec2 Vec2.\r\n     */\r\n    function writeVec2(node, vec2) {\r\n        node.setAttribute('x', String(vec2.x));\r\n        node.setAttribute('y', String(vec2.y));\r\n        node.setAttribute('xunits', vec2.xunits);\r\n        node.setAttribute('yunits', vec2.yunits);\r\n    }\r\n\r\n    ol.format.KMLCustom = KMLCustom;\r\n})();\r\n"]}