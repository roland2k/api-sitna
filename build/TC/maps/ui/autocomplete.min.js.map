{"version":3,"sources":["ui/autocomplete.js"],"names":["TC","UI","isPlainObject","obj","Object","prototype","toString","call","extend","extended","deep","i","arguments","merge","prop","hasOwnProperty","length","buildItems","inputText","data","settings","html","buildHTML","target","innerHTML","results","elm","push","link","encodeURIComponent","id","label","template","document","createElement","join","appendChild","content","firstChild","callback","attachCallback","value","dispatchEvent","CustomEvent","querySelectorAll","forEach","element","addEventListener","e","stopPropagation","preventDefault","clearTarget","handleInput","text","element_text","re","getAttribute","autocomplete","this","openXHR","minLength","Array","isArray","source","sort","filter","matchFromStart","RegExp","test","indexOf","keyCode","beforeSend","jqXHR","cancelRequests","abort","complete","xhr","XMLHttpRequest","overrideMimeType","open","url","onload","jsonResponse","JSON","parse","req","responseText","onerror","error","send","methods","init","options","el","defaults","setAttribute","removeEventListener","parentNode","querySelector","update","initialOptions","newOptions","clear","destroy","removeAttribute","method","apply","slice"],"mappings":"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","sourcesContent":["/*\r\nName: autoComplete\r\nAuthor: Raymond Camden & Andy Matthews\r\nContributors: Jim Pease (@jmpease)\r\nWebsite: http://raymondcamden.com/\r\nhttp://andyMatthews.net\r\nPacked With: http://jsutility.pjoneil.net/\r\nVersion: 1.4\r\nModificado por Fernando Lacunza\r\n*/\r\n\r\nvar TC = TC || {};\r\nTC.UI = TC.UI || {};\r\n\r\n(function() {    \r\n\r\n    var isPlainObject = function(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Object]';\r\n    };\r\n\r\n    var isFunction = function(fn) {\r\n        return typeof fn == 'function';\r\n    };\r\n\r\n    var extend = function() {\r\n        // Variables\r\n        var extended = {};\r\n        var deep = false;\r\n        var i = 0;\r\n\r\n        // Check if a deep merge\r\n        if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\r\n            deep = arguments[0];\r\n            i++;\r\n        }\r\n\r\n        // Merge the object into the extended object\r\n        var merge = function(obj) {\r\n            for (var prop in obj) {\r\n                if (obj.hasOwnProperty(prop)) {\r\n                    // If property is an object, merge properties\r\n                    if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\r\n                        extended[prop] = extend(extended[prop], obj[prop]);\r\n                    } else {\r\n                        extended[prop] = obj[prop];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        // Loop through each object and conduct a merge\r\n        for (; i < arguments.length; i++) {\r\n            merge(arguments[i]);\r\n        }\r\n\r\n        return extended;\r\n\r\n    };    \r\n\r\n    var autocomplete = {\r\n        defaults: {\r\n            method: 'GET',\r\n            cancelRequests: false,\r\n            target: null,\r\n            source: null,\r\n            callback: null,\r\n            link: null,\r\n            minLength: 0,\r\n            matchFromStart: true\r\n        },\r\n        openXHR: {},\r\n        cache: {}\r\n    },\r\n        \r\n        buildItems = function(inputText, data, settings) {\r\n            var html = [];\r\n            if (data) {\r\n                if (settings.buildHTML) {\r\n\r\n                    settings.target.innerHTML = settings.buildHTML({ results: data });\r\n\r\n                    //var template = document.createElement('template');\r\n                    //template.innerHTML = settings.buildHTML({ results: data });\r\n\r\n                    //(template.content ? template.content : template).childNodes.forEach(function(childNode) {\r\n                    //    settings.target.appendChild(childNode);\r\n                    //});                    \r\n                }\r\n                else {\r\n                    for (var i = 0; i < data.length; i++) {\r\n                        var elm = data[i];\r\n                        // are we working with objects or strings?\r\n                        if (isPlainObject(elm)) {\r\n                            html.push(`<li><a href=\"${settings.link}${encodeURIComponent(elm.id)}\">${elm.label}</a></li>`);\r\n                        } else {\r\n                            html.push(`<li><a href=\"${settings.link}${encodeURIComponent(elm)}\">${elm}</a></li>`);\r\n                        }\r\n                    }\r\n\r\n                    var template = document.createElement('template');\r\n                    template.innerHTML = html.join('');\r\n\r\n                    settings.target.appendChild(template.content ? template.content.firstChild : template.firstChild);\r\n                }\r\n\r\n            }\r\n\r\n\r\n            // is there a callback?\r\n            if (settings.callback !== null && isFunction(settings.callback)) {\r\n                attachCallback(settings);\r\n            }\r\n\r\n            if (inputText.value.length > 0) {\r\n                inputText.dispatchEvent(new CustomEvent(\"targetUpdated.autocomplete\"));\r\n            } else {\r\n                inputText.dispatchEvent(new CustomEvent(\"targetCleared.autocomplete\"));\r\n            }\r\n        },\r\n        attachCallback = function(settings) {\r\n            settings.target.querySelectorAll('li a').forEach(function(element) {\r\n                element.addEventListener('click', function(e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    settings.callback(e);\r\n                });\r\n            });\r\n\r\n            //$('li a', $(settings.target)).on('click.autocomplete', function(e) {\r\n            //    e.stopPropagation();\r\n            //    e.preventDefault();\r\n            //    settings.callback(e);\r\n            //});\r\n        },\r\n        clearTarget = function(inputText, target) {\r\n            //$target.html('').closest(\"fieldset\").removeClass(\"ui-search-active\");\r\n            target.innerHTML = '';\r\n\r\n            /* provisional el tema del fieldset */\r\n            //document.querySelector(\"fieldset.ui-search-active\").classList.remove(\"ui-search-active\");\r\n\r\n            inputText.dispatchEvent(new CustomEvent(\"targetCleared.autocomplete\"));\r\n        },\r\n        handleInput = function(e) {\r\n            var inputText = e.target,\r\n                id = inputText.getAttribute(\"id\"),\r\n                text,\r\n                data,\r\n                autocomplete = inputText.getAttribute(\"autocomplete\"),\r\n                element_text,\r\n                re;\r\n            if (autocomplete) {\r\n                var settings = this.settings;\r\n                var openXHR = autocomplete.openXHR;\r\n                // get the current text of the input field\r\n                text = inputText.value;\r\n                // if we don't have enough text zero out the target\r\n                if (text.length < settings.minLength) {\r\n                    clearTarget(inputText, settings.target);\r\n                } else {\r\n                    // are we looking at a source array or remote data?\r\n                    if (Array.isArray(settings.source)) {\r\n                        data = settings.source.sort().filter(function(element) {\r\n                            // matching from start, or anywhere in the string?\r\n                            if (settings.matchFromStart) {\r\n                                // from start\r\n                                element_text, re = new RegExp('^' + text, 'i');\r\n                            } else {\r\n                                // anywhere\r\n                                element_text, re = new RegExp(text, 'i');\r\n                            }\r\n                            if (isPlainObject(element)) {\r\n                                element_text = element.label;\r\n                            } else {\r\n                                element_text = element;\r\n                            }\r\n                            return re.test(element_text);\r\n                        });\r\n                        buildItems(inputText, data, settings);\r\n                    }\r\n                    // Accept a function as source.\r\n                    // Function needs to call the callback, which is the first parameter.\r\n                    // source:function(text,callback) { mydata = [1,2]; callback(mydata); }\r\n                    else if (typeof settings.source === 'function') {\r\n                        if (arguments && arguments[0]) {\r\n                            if ([37, 39].indexOf(arguments[0].keyCode) > -1) {\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        settings.source(text, function(data) {\r\n                            buildItems(inputText, data, settings);\r\n                        });\r\n\r\n                    } else {\r\n\r\n                        const beforeSend = function(jqXHR) {\r\n                            if (settings.cancelRequests) {\r\n                                if (openXHR[id]) {\r\n                                    // If we have an open XML HTTP Request for this autoComplete ID, abort it\r\n                                    openXHR[id].abort();\r\n                                } else {\r\n                                    // Set a loading indicator as a temporary stop-gap to the response time issue\r\n                                    settings.target.innerHTML = '<li><a href=\"#\">Searching...</a></li>';\r\n\r\n                                    /* pendiente */\r\n                                    //settings.target.closest(\"fieldset\").addClass(\"ui-search-active\");\r\n                                }\r\n                                // Set this request to the open XML HTTP Request list for this ID\r\n                                openXHR[id] = jqXHR;\r\n                            }\r\n                        };\r\n\r\n                        const complete = function() {\r\n                            // Clear this ID's open XML HTTP Request from the list\r\n                            if (settings.cancelRequests) {\r\n                                openXHR[id] = null;\r\n                            }\r\n                        };\r\n\r\n                        var xhr = new XMLHttpRequest();\r\n                        xhr.overrideMimeType(\"application/json\");\r\n                        xhr.open('GET', url, true);\r\n                        xhr.onload = function() {\r\n                            complete();\r\n                            var jsonResponse = JSON.parse(req.responseText);\r\n                            buildItems(inputText, jsonResponse, settings);\r\n                        };\r\n                        xhr.onerror = function(error) {\r\n                            complete();\r\n                        };\r\n                        beforeSend(xhr);\r\n                        xhr.send(null);                        \r\n                    }\r\n                }\r\n            }\r\n        },\r\n        methods = {\r\n            init: function(options) {\r\n                var el = this;\r\n                var autocomplete = { settings: null };\r\n                autocomplete.settings = extend({}, autocomplete.defaults, options);                \r\n\r\n                el.setAttribute(\"autocomplete\", true);\r\n\r\n                var settings = autocomplete.settings;\r\n\r\n                el.removeEventListener(\"keyup\", handleInput);\r\n                el.addEventListener(\"keyup\", handleInput);\r\n\r\n                if (el.parentNode.querySelector('.ui-input-clear')) {\r\n                    el.parentNode.querySelector('.ui-input-clear').addEventListener('click', function(e) {\r\n                        clearTarget(el, settings.target);\r\n                    });\r\n                }\r\n\r\n                return el;                \r\n            },\r\n            // Allow dynamic update of source and link\r\n            update: function(initialOptions, newOptions) {\r\n                var autocomplete = this.getAttribute(\"autocomplete\");\r\n                if (autocomplete) {\r\n                    this.settings = extend(this.settings, newOptions);                    \r\n                }\r\n                return this;\r\n            },\r\n            // Method to forcibly clear our target\r\n            clear: function(options) {\r\n                var autocomplete = this.getAttribute(\"autocomplete\");\r\n                if (autocomplete) {\r\n                    clearTarget(this, this.settings.target);\r\n                }\r\n                return this;\r\n            },\r\n            // Method to destroy (cleanup) plugin\r\n            destroy: function() {\r\n                var autocomplete = this.getAttribute(\"autocomplete\");\r\n                if (autocomplete) {\r\n                    clearTarget(this, this.settings.target);\r\n                    this.removeAttribute(\"autocomplete\");\r\n                    this.removeEventListener(\"keyup\", handleInput);\r\n                    //this.removeEventListener(\".autocomplete\");\r\n                }\r\n                return this;\r\n            }\r\n        };  \r\n\r\n    TC.UI.autocomplete = function (method) {    \r\n        if (methods[method]) {\r\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof method === 'object' || !method) {\r\n            this.settings = arguments[0];\r\n            return methods.init.apply(this, arguments);\r\n        }\r\n    };\r\n\r\n})(TC);\r\n"]}