{"version":3,"sources":["layer/Vector.js"],"names":["TC","layer","Layer","syncLoadJS","apiLocation","capabilitiesPromises","Vector","self","this","_capabilitiesPromise","capabilities","apply","arguments","type","options","Consts","layerType","VECTOR","features","selectedFeatures","extension","url","idx","indexOf","substr","lastIndexOf","toLowerCase","getFileExtension","format","mimeType","KML","GPX","JSON","GEOJSON","GML","getFormatFromMimeType","WKT","TOPOJSON","getFormatFromExtension","title","result","regexp","RegExp","i","decodeURIComponent","match","exec","length","getFileName","wrap","_promise","Promise","resolve","reject","ollyr","createVectorLayer","setLayer","inherit","layerProto","prototype","getTree","stealth","children","path","getPath","node","Util","addArrayToTree","legend","getLegend","styles","multiGeom","Object","keys","locale","map","point","getLocaleString","src","getLegendImageFromStyle","geometryType","geom","POINT","line","POLYLINE","polygon","POLYGON","name","customLegend","uid","id","addFeatureInternal","multipleFeatureFunction","coord","call","then","trigger","event","FEATUREADD","feature","addFeaturesInternal","coordsArray","constructorName","styleType","opts","extend","FeatureConstructor","endFn","Array","nativeFeatures","len","coords","isNative","Feature","CLASSNAME","_wrap","parent","layerStyle","hasStyleOptions","Cfg","push","showPopup","addFeatures","loadJS","addPoint","addPoints","addMarker","addMarkers","addPolyline","addPolylines","addMultiPolyline","addMultiPolylines","addPolygon","addPolygons","addMultiPolygon","addMultiPolygons","addCircle","addCircles","addFeature","Point","Polyline","Polygon","MultiPolygon","MultiPolyline","Circle","removeFeature","filterFn","ctl","currentFeature","isVisible","getControlsByClass","filter","forEach","pu","hide","p","close","getFeatureById","olFeat","clearFeatures","getDescribeFeatureTypeUrl","layerNames","version","featureType","isArray","join","encodeURIComponent","Operations","DescribeFeatureType","outputFormat","describeFeatureType","layerName","callback","error","getCapabilitiesPromise","window","hasOwnProperty","promsObj","wwGetUrl","async","wwLocation","isSameOrigin","data","ajax","method","responseType","blob","Blob","URL","createObjectURL","err","wwInit","WebWorkerDFT","Worker","onmessage","e","state","key","DFTCollection","assign","toolProxification","fetchXML","postMessage","response","documentElement","outerHTML","wwProcess","layers","querySelector","textContent","trim","xml","document","location","protocol","split","arrPromises","entries","reduce","vi","va","preffix","substring","temp","params","collection","_getStoredFeatureTypes","all","objReturned","catch","isFunction","errorText","CAPABILITIES_STORE_KEY_PREFIX","import","setNodeVisibility","visible","LOADING","BEFOREUPDATE","BEFORELAYERUPDATE","tree","findNode","setVisibility","_cache","visibilityStates","visibility","VISIBLE","NOT_VISIBLE","f","found","undefined","_path","IDLE","LAYERUPDATE","UPDATE","getNodeVisibility","getVisibility","r","setModifiable","modifiable","applyEdits","inserts","updates","deletes","sendTransaction","refresh","reloadSource","getFeaturesInCurrentExtent","tolerance","extent","getExtent","getFeaturesInExtent","setProjection","crs","oldCrs","feat","setGeometry","reproject","geometry","getGeometry","setStyles","exportState","lObj","precision","Math","pow","isGeo","DEGREE_PRECISION","METER_PRECISION","fObj","Marker","marker","MULTIPOLYLINE","MULTIPOLYGON","CIRCLE","compactGeometry","getData","showsPopup","exportStyles","val","style","getStyle","importState","obj","promises","featureOptions","addFn","className","explodeGeometry","res","rej","one","PROJECTIONCHANGE","Error","getGetCapabilitiesUrl","WFS","getUrl","SERVICE","VERSION","REQUEST","isSecureURL","toAbsolutePath","getBySSL_","getParamString","actualUrl","replace","capabilitiesWFS","tool","Proxification","proxify","cachePromise","onlinePromise","getCapabilitiesOnline","storagePromise","getCapabilitiesFromStorage","processedCapabilities","LAYERERROR","reason"],"mappings":"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","sourcesContent":["TC.layer = TC.layer || {};\r\n\r\nif (!TC.Layer) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Layer');\r\n}\r\n\r\n(function () {\r\n\r\n    var capabilitiesPromises = {};\r\n\r\n    /**\r\n     * Opciones de capa vectorial.\r\n     * Esta clase no tiene constructor.\r\n     * @class TC.cfg.VectorOptions\r\n     * @extend TC.cfg.LayerOptions\r\n     * @static\r\n     */\r\n    /**\r\n     * Tipo de capa.\r\n     * @property type\r\n     * @type TC.consts.LayerType\r\n     * @default TC.Consts.layerType.VECTOR\r\n     */\r\n    /**\r\n     * URL del servicio WFS o del documento que define la capa.\r\n     * @property url\r\n     * @type string|undefined\r\n     */\r\n\r\n    /**\r\n     * Capa de tipo vectorial, como la de un WFS o un KML.\r\n     * @class TC.layer.Vector\r\n     * @extends TC.Layer\r\n     * @constructor\r\n     * @async\r\n     * @param {TC.Cfg.layer} [options] Objeto de opciones de configuración de la capa.\r\n     */\r\n    TC.layer.Vector = function () {\r\n        var self = this;\r\n\r\n        //esta promise se resolverá cuando el capabilities esté descargado y parseado\r\n        //se utiliza para saber cuándo está listo el capabilities en los casos en los que se instancia el layer pero no se añade al mapa\r\n        //porque la forma habitual de detectar esto es por los eventos del mapa (que en esos casos no saltarán)\r\n        self._capabilitiesPromise = null;\r\n        self.capabilities = null;\r\n\r\n        TC.Layer.apply(self, arguments);\r\n\r\n        self.type = self.options.type || TC.Consts.layerType.VECTOR;\r\n        /**\r\n         * Lista de entidades geográficas que hay en la capa.\r\n         * @property features\r\n         * @type array\r\n         * @default []\r\n         */\r\n        self.features = [];\r\n        /**\r\n         * Lista de entidades geográficas seleccionadas en la capa.\r\n         * @property selectedFeatures\r\n         * @type array\r\n         * @default []\r\n         */\r\n        self.selectedFeatures = [];\r\n\r\n        const getFileExtension = function (url) {\r\n            url = url || '';\r\n            var idx = url.indexOf('?');\r\n            if (idx >= 0) {\r\n                url = url.substr(0, idx);\r\n            }\r\n            else {\r\n                idx = url.indexOf('#');\r\n                if (idx >= 0) {\r\n                    url = url.substr(0, idx);\r\n                }\r\n            }\r\n            return url.substr(url.lastIndexOf('.')).toLowerCase();\r\n        };\r\n\r\n        const getFormatFromExtension = function (extension) {\r\n            switch (extension) {\r\n                case '.kml':\r\n                    return TC.Consts.format.KML;\r\n                case '.gpx':\r\n                    return TC.Consts.format.GPX;\r\n                case '.json':\r\n                case '.geojson':\r\n                    return TC.Consts.format.GEOJSON;\r\n                case '.gml':\r\n                    return TC.Consts.format.GML;\r\n                case '.wkt':\r\n                    return TC.Consts.format.WKT;\r\n                case '.topojson':\r\n                    return TC.Consts.format.TOPOJSON;\r\n                default:\r\n                    return null;\r\n            }\r\n        };\r\n        const getFormatFromMimeType = function (mimeType) {\r\n            switch (mimeType) {\r\n                case TC.Consts.mimeType.KML:\r\n                    return TC.Consts.format.KML;\r\n                case TC.Consts.mimeType.GPX:\r\n                    return TC.Consts.format.GPX;\r\n                case TC.Consts.mimeType.JSON:\r\n                case TC.Consts.mimeType.GEOJSON:\r\n                    return TC.Consts.format.GEOJSON;\r\n                case TC.Consts.mimeType.GML:\r\n                    return TC.Consts.format.GML;\r\n                default:\r\n                    return null;\r\n            }\r\n        };\r\n        /**\r\n         * URL del servicio o documento al que pertenenece la capa.\r\n         * @property url\r\n         * @type string\r\n         */\r\n        const extension = getFileExtension(self.url);\r\n        const format = getFormatFromMimeType(self.options.format) || getFormatFromExtension(extension);\r\n        if (format || self.type === TC.Consts.layerType.KML) {\r\n            if (format === TC.Consts.format.KML) {\r\n                self.type = TC.Consts.layerType.KML;\r\n            }\r\n\r\n            var getFileName = function (url) {\r\n                url = url || '';\r\n                var result = url;\r\n                var regexp = new RegExp('([^/]+' + extension + ')', 'i');\r\n                for (var i = 0; i < 3; i++) {\r\n                    url = decodeURIComponent(url);\r\n                    var match = regexp.exec(url);\r\n                    if (match.length > 1) {\r\n                        result = match[1];\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                return result;\r\n            };\r\n            self.title = self.options.title || getFileName(self.url);\r\n        }\r\n\r\n        self.wrap = new TC.wrap.layer.Vector(self);\r\n\r\n        self.wrap._promise = new Promise((resolve, reject) => {\r\n            var ollyr = null;\r\n            ollyr = self.wrap.createVectorLayer();\r\n            self.wrap.setLayer(ollyr);\r\n            resolve(ollyr);\r\n        })//Promise.resolve(ollyr);\r\n\r\n    };\r\n\r\n    TC.inherit(TC.layer.Vector, TC.Layer);\r\n\r\n    (function () {\r\n        var layerProto = TC.layer.Vector.prototype;\r\n\r\n        /*\r\n         *  getTree: returns service layer tree { name, title, children }\r\n         */\r\n        layerProto.getTree = function () {\r\n            const self = this;\r\n            var result = null;\r\n            if (!self.options.stealth) {\r\n                result = {};\r\n                result.children = [];\r\n                for (var i = 0; i < self.features.length; i++) {\r\n                    var path = self.features[i].getPath();\r\n                    if (path.length) {\r\n                        var node = TC.Util.addArrayToTree(path, result);\r\n                        if (node) {\r\n                            node.legend = self.features[i].getLegend();\r\n                        }\r\n                    }\r\n                }\r\n                if (self.styles) {\r\n                    const multiGeom = Object.keys(self.styles).length > 1;\r\n                    const locale = self.map ? self.map.options.locale : null;\r\n                    if (self.styles.point) {\r\n                        const node = multiGeom ? TC.Util.addArrayToTree([TC.Util.getLocaleString(locale, 'points')], result) : result;\r\n                        node.legend = { src: TC.Util.getLegendImageFromStyle(self.styles.point, { geometryType: TC.Consts.geom.POINT }) };\r\n                    }\r\n                    if (self.styles.line) {\r\n                        const node = multiGeom ? TC.Util.addArrayToTree([TC.Util.getLocaleString(locale, 'lines')], result) : result;\r\n                        node.legend = { src: TC.Util.getLegendImageFromStyle(self.styles.line, { geometryType: TC.Consts.geom.POLYLINE }) };\r\n                    }\r\n                    if (self.styles.polygon) {\r\n                        const node = multiGeom ? TC.Util.addArrayToTree([TC.Util.getLocaleString(locale, 'polygons')], result) : result;\r\n                        node.legend = { src: TC.Util.getLegendImageFromStyle(self.styles.polygon, { geometryType: TC.Consts.geom.POLYGON }) };\r\n                    }\r\n                }\r\n                result.name = self.name || result.name;\r\n                result.customLegend = self.options.customLegend; //Atributo para pasar una plantilla HTML diferente a la por defecto (LegendNode.html)\r\n                result.title = self.title || result.title;\r\n                result.uid = self.id;\r\n            }\r\n            return result;\r\n        };\r\n\r\n        var addFeatureInternal = function (layer, multipleFeatureFunction, coord, options) {\r\n            return new Promise(function (resolve, reject) {\r\n                multipleFeatureFunction.call(layer, [coord], options).then(function (features) {\r\n                    resolve(features[0]);\r\n                    if (layer.map) {\r\n                        layer.map.trigger(TC.Consts.event.FEATUREADD, { layer: layer, feature: features[0] });\r\n                    }\r\n                });\r\n            });\r\n        };\r\n\r\n        var addFeaturesInternal = function (layer, coordsArray, constructorName, styleType, options) {\r\n            var opts = TC.Util.extend(true, {}, options);\r\n            return new Promise(function (resolve, reject) {\r\n                var FeatureConstructor;\r\n                const endFn = function () {\r\n                    FeatureConstructor = FeatureConstructor || TC.feature[constructorName];\r\n                    var features = new Array(coordsArray.length);\r\n                    var nativeFeatures = [];\r\n                    for (var i = 0, len = coordsArray.length; i < len; i++) {\r\n                        var coords = coordsArray[i];\r\n                        var feature;\r\n                        const isNative = TC.wrap.Feature.prototype.isNative(coords);\r\n                        if (coords instanceof FeatureConstructor || \"TC.feature.\" + constructorName === coords.CLASSNAME) {\r\n                            feature = coords;\r\n                        }\r\n                        else {\r\n                            if (isNative) {\r\n                                feature = coords._wrap && coords._wrap.parent;\r\n                            }\r\n                            if (!feature) {\r\n                                opts.layer = layer;\r\n                                const layerStyle = layer.styles && layer.styles[styleType];\r\n                                if (TC.Util.hasStyleOptions(opts) || !layerStyle) {\r\n                                    // Si las opciones tienen estilos, o la capa no los tiene, creamos un objeto de estilos para la feature\r\n                                    TC.Util.extend(true, opts, TC.Cfg.styles[styleType], layerStyle || {}, options);\r\n                                }\r\n                                feature = new FeatureConstructor(coords, opts);\r\n                            }\r\n                        }\r\n                        feature.layer = layer;\r\n                        features[i] = feature;\r\n                        layer.features.push(feature);\r\n                        if (!isNative) {\r\n                            nativeFeatures.push(feature.wrap.feature);\r\n                        }\r\n                        if (feature.options.showPopup) {\r\n                            feature.showPopup();\r\n                        }\r\n                        // Este evento mata el rendimiento\r\n                        //self.map.trigger(TC.Consts.event.FEATUREADD, { layer: self, feature: marker });\r\n                    }\r\n                    if (nativeFeatures.length) {\r\n                        layer.wrap.addFeatures(nativeFeatures);\r\n                    }\r\n                    resolve(features);\r\n                };\r\n                if (constructorName) {\r\n                    TC.loadJS(\r\n                        !TC.feature || (TC.feature && !TC.feature[constructorName]),\r\n                        [TC.apiLocation + 'TC/feature/' + constructorName],\r\n                        endFn\r\n                    );\r\n                }\r\n                else {\r\n                    FeatureConstructor = TC.Feature;\r\n                    endFn();\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Añade un punto a la capa.\r\n         * @method addPoint\r\n         * @async\r\n         * @param {array|TC.feature.Point|ol.geom.Point|OpenLayers.Geometry.Point} coord Si es un array, contiene dos números (la coordenada del punto).\r\n         * @param {TC.cfg.PointStyleOptions} [options]\r\n         * @return {jQuery promise} La promesa al resolverse devuelve un objeto de la clase TC.feature.Point\r\n         */\r\n        layerProto.addPoint = function (coord, options) {\r\n            return addFeatureInternal(this, this.addPoints, coord, options);\r\n        };\r\n\r\n        /**\r\n         * Añade una lista de puntos a la capa.\r\n         * @method addPoints\r\n         * @async\r\n         * @param {array} coordsArray Los elementos de esta lista son cualquiera de los que acepta el método {{#crossLink \"TC.layer.Vector/addPoint:method\"}}{{/crossLink}}.\r\n         * @param {TC.cfg.PointStyleOptions} [options]\r\n         * @return {jQuery promise} La promesa al resolverse devuelve un array de objetos de la clase TC.feature.Point\r\n         */\r\n        layerProto.addPoints = function (coordsArray, options) {\r\n            return addFeaturesInternal(this, coordsArray, 'Point', TC.Consts.geom.POINT, options);\r\n        };\r\n\r\n        /**\r\n         * Añade un marcador a la capa.\r\n         * @method addMarker\r\n         * @async\r\n         * @param {array|TC.feature.Marker|ol.geom.Point|OpenLayers.Geometry.Point} coord Si es un array, contiene dos números (la coordenada del punto).\r\n         * @param {TC.cfg.MarkerStyleOptions} [options]\r\n         * @return {jQuery promise} La promesa al resolverse devuelve un objeto de la clase TC.feature.Marker\r\n         */\r\n        layerProto.addMarker = function (coord, options) {\r\n            return addFeatureInternal(this, this.addMarkers, coord, options);\r\n        };\r\n\r\n        /**\r\n         * Añade una lista de marcadores a la capa.\r\n         * @method addMarkers\r\n         * @async\r\n         * @param {array} coordsArray Los elementos de esta lista son cualquiera de los que acepta el método {{#crossLink \"TC.layer.Vector/addMarker:method\"}}{{/crossLink}}.\r\n         * @param {TC.cfg.MarkerStyleOptions} [options]\r\n         * @return {jQuery promise} La promesa al resolverse devuelve un array de objetos de la clase TC.feature.Marker\r\n         */\r\n        layerProto.addMarkers = function (coordsArray, options) {\r\n            return addFeaturesInternal(this, coordsArray, 'Marker', 'marker', options);\r\n        };\r\n\r\n        /**\r\n         * Añade una polilínea a la capa.\r\n         * @method addPolyline\r\n         * @async\r\n         * @param {array|TC.feature.Polyline|ol.geom.MultiLineString|OpenLayers.Geometry.LineString} coords Si es un array, contiene arrays de dos números (coordenadas de puntos).\r\n         * @param {TC.cfg.PolylineOptions} [options]\r\n         * @return {jQuery promise} La promesa al resolverse devuelve un objeto de la clase TC.feature.Polyline\r\n         */\r\n        layerProto.addPolyline = function (coords, options) {\r\n            return addFeatureInternal(this, this.addPolylines, coords, options);\r\n        };\r\n\r\n\r\n        /**\r\n         * Añade una lista de polilíneas a la capa.\r\n         * @method addPolylines\r\n         * @async\r\n         * @param {array} coordsArray Los elementos de esta lista son cualquiera de los que acepta el método {{#crossLink \"TC.layer.Vector/addPolyline:method\"}}{{/crossLink}}.\r\n         * @param {TC.cfg.PolylineOptions} [options]\r\n         * @return {jQuery promise} La promesa al resolverse devuelve un array de objetos de la clase TC.feature.Polyline\r\n         */\r\n        layerProto.addPolylines = function (coordsArray, options) {\r\n            //URI: El tipo de estilo se especifica LINE pero realmente deberia ser TC.Const.Style.LINE\r\n            return addFeaturesInternal(this, coordsArray, 'Polyline', \"line\", options);\r\n        };\r\n\r\n        layerProto.addMultiPolyline = function (coords, options) {\r\n            return addFeatureInternal(this, this.addMultiPolylines, coords, options);\r\n        };\r\n\r\n\r\n        layerProto.addMultiPolylines = function (coordsArray, options) {\r\n            //URI: El tipo de estilo se especifica LINE pero realmente deberia ser TC.Const.Style.LINE\r\n            return addFeaturesInternal(this, coordsArray, 'MultiPolyline', \"line\", options);\r\n        };\r\n\r\n        /**\r\n         * Añade un polígono a la capa.\r\n         * @method addPolygon\r\n         * @async\r\n         * @param {array|TC.feature.Polygon|ol.geom.Polygon|OpenLayers.Geometry.Polygon} coords Si es un array, contiene arrays de coordenadas, que son a su vez arrays de dos números. El primer\r\n         * elemento de ese array es el anillo exterior, los siguientes son anillos interiores.\r\n         * @param {TC.cfg.PolygonOptions} [options]\r\n         * @return {jQuery promise} La promesa al resolverse devuelve un objeto de la clase TC.feature.Polygon\r\n         */\r\n        layerProto.addPolygon = function (coords, options) {\r\n            return addFeatureInternal(this, this.addPolygons, coords, options);\r\n        };\r\n\r\n        /**\r\n         * Añade una lista de polígonos a la capa.\r\n         * @method addPolygons\r\n         * @async\r\n         * @param {array} coordsArray Los elementos de esta lista son cualquiera de los que acepta el método {{#crossLink \"TC.layer.Vector/addPolygon:method\"}}{{/crossLink}}.\r\n         * @param {TC.cfg.PolygonOptions} [options]\r\n         * @return {jQuery promise} La promesa al resolverse devuelve un array de objetos de la clase TC.feature.Polygon\r\n         */\r\n        layerProto.addPolygons = function (coordsArray, options) {\r\n            //URI: El tipo de style se especifica POLIGON pero realmente deberia ser TC.Const.Style.POLYGON\r\n            return addFeaturesInternal(this, coordsArray, 'Polygon', TC.Consts.geom.POLYGON, options);\r\n        };\r\n\r\n        layerProto.addMultiPolygon = function (coords, options) {\r\n            return addFeatureInternal(this, this.addMultiPolygons, coords, options);\r\n        };\r\n\r\n\r\n        layerProto.addMultiPolygons = function (coordsArray, options) {\r\n            //URI: El tipo de style se especifica POLIGON pero realmente deberia ser TC.Const.Style.POLYGON\r\n            return addFeaturesInternal(this, coordsArray, 'MultiPolygon', TC.Consts.geom.POLYGON, options);\r\n        };\r\n\r\n        /**\r\n         * Añade un círculo a la capa.\r\n         * @method addCircle\r\n         * @async\r\n         * @param {array|TC.feature.Circle|ol.geom.Circle} coord Si es un array, contiene un array de dos números (la coordenada del centro) y un número (el radio).\r\n         * @param {TC.cfg.PolygonStyleOptions} [options]\r\n         * @return {jQuery promise} La promesa al resolverse devuelve un objeto de la clase TC.feature.Circle\r\n         */\r\n        layerProto.addCircle = function (coord, options) {\r\n            return addFeatureInternal(this, this.addCircles, coord, options);\r\n        };\r\n\r\n        /**\r\n         * Añade una lista de círculos a la capa.\r\n         * @method addCircles\r\n         * @async\r\n         * @param {array} coordsArray Los elementos de esta lista son cualquiera de los que acepta el método {{#crossLink \"TC.layer.Vector/addCircle:method\"}}{{/crossLink}}.\r\n         * @param {TC.cfg.PolygonStyleOptions} [options]\r\n         * @return {jQuery promise} La promesa al resolverse devuelve un array de objetos de la clase TC.feature.Circle\r\n         */\r\n        layerProto.addCircles = function (coordsArray, options) {\r\n            //URI: El tipo de geometria se especifica POLIGON pero realmente deberia ser TC.Const.Style.POLYGON\r\n            return addFeaturesInternal(this, coordsArray, 'Circle', TC.Consts.geom.POLYGON, options);\r\n        };\r\n        /**\r\n         * Añade una entidad geográfica a la capa.\r\n         * @method addFeature\r\n         * @async\r\n         * @param {TC.Feature} feature \r\n         * @return {jQuery promise} La promesa al resolverse devuelve un objeto de la clase TC.Feature\r\n         */\r\n        layerProto.addFeature = function (feature) {\r\n            const self = this;\r\n            var result;\r\n            if (TC.feature) {\r\n                if (TC.feature.Point && feature instanceof TC.feature.Point || feature.CLASSNAME === \"TC.feature.Point\") {\r\n                    result = self.addPoint(feature);\r\n                }\r\n                else if (TC.feature.Polyline && feature instanceof TC.feature.Polyline || feature.CLASSNAME === \"TC.feature.Polyline\") {\r\n                    result = self.addPolyline(feature);\r\n                }\r\n                else if (TC.feature.Polygon && feature instanceof TC.feature.Polygon || feature.CLASSNAME === \"TC.feature.Polygon\") {\r\n                    result = self.addPolygon(feature);\r\n                }\r\n                else if (TC.feature.MultiPolygon && feature instanceof TC.feature.MultiPolygon || feature.CLASSNAME === \"TC.feature.MultiPolygon\") {\r\n                    result = self.addMultiPolygon(feature);\r\n                }\r\n                else if (TC.feature.MultiPolyline && feature instanceof TC.feature.MultiPolyline || feature.CLASSNAME === \"TC.feature.MultiPolyline\") {\r\n                    result = self.addMultiPolyline(feature);\r\n                }\r\n                else if (TC.feature.Circle && feature instanceof TC.feature.Circle || feature.CLASSNAME === \"TC.feature.Circle\") {\r\n                    result = self.addCircle(feature);\r\n                }\r\n                else {\r\n                    result = addFeaturesInternal(self, [feature]);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n\r\n        layerProto.addFeatures = function (features) {\r\n            return addFeaturesInternal(this, features);\r\n        };\r\n\r\n        /**\r\n         * Elimina una entidad geográfica de la capa.\r\n         * @method removeFeature\r\n         * @param {TC.Feature} feature \r\n         */\r\n        layerProto.removeFeature = function (feature) {\r\n            const self = this;\r\n            if (feature.layer && self.features.indexOf(feature) >= 0) {\r\n                if (self.map) {\r\n                    const filterFn = ctl => ctl.currentFeature === feature && ctl.isVisible();\r\n                    const popups = self.map.getControlsByClass('TC.control.Popup');\r\n                    popups\r\n                        .filter(filterFn)\r\n                        .forEach(pu => pu.hide());\r\n\r\n                    const panels = self.map.getControlsByClass('TC.control.ResultsPanel');\r\n                    panels\r\n                        .filter(filterFn)\r\n                        .forEach(p => p.close());\r\n                }\r\n                if (feature.layer) { // Volvemos a comprobar porque el cierre del popup puede haber borrado ya la feature\r\n                    self.wrap.removeFeature(feature);\r\n                }\r\n                feature.layer = null;\r\n            }\r\n        };\r\n\r\n        layerProto.getFeatureById = function (id) {\r\n            const self = this;\r\n            let result = null;\r\n            var olFeat = self.wrap.getFeatureById(id);\r\n            if (olFeat) {\r\n                result = olFeat._wrap.parent;\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n         * Borra todas las entidades geográficas de la capa.\r\n         * @method clearFeatures\r\n         */\r\n        layerProto.clearFeatures = function () {\r\n            var self = this;\r\n            if (self.features && self.wrap) {\r\n                if (self.map) {\r\n                    const popups = self.map.getControlsByClass('TC.control.Popup');\r\n                    popups.forEach(function (pu) {\r\n                        if (pu.isVisible() && self.features.indexOf(pu.currentFeature) >= 0) {\r\n                            pu.hide();\r\n                        }\r\n                    });\r\n                }\r\n                self.features.length = 0;\r\n                self.wrap.clearFeatures();\r\n            }\r\n        };\r\n\r\n        //layerProto.getGetCapabilitiesUrl = function () {\r\n        //    const self = this;\r\n        //    const version = self.options.version || '1.1.0';\r\n        //    return self.url + '?service=WFS&' + 'version=' + version + '&request=GetCapabilities';\r\n        //};\r\n\r\n        layerProto.getDescribeFeatureTypeUrl = function (layerNames) {\r\n            const self = this;\r\n            const version = self.options.version || self.capabilities.version || '1.1.0';\r\n            const featureType = Array.isArray(layerNames) ? layerNames : [layerNames];\r\n            return self.url + '?service=WFS&' + 'version=' + version + '&request=DescribeFeatureType&typename=' + featureType.join(',') + '&outputFormat=' + encodeURIComponent(self.capabilities.Operations.DescribeFeatureType.outputFormat);\r\n        };\r\n\r\n        const _getStoredFeatureTypes = function (layerName, collection) {\r\n            if (!(layerName instanceof Array))\r\n                layerName = layerName.split(\",\");\r\n            return layerName.reduce(function (vi, va) {\r\n                var temp = [];\r\n                temp[va] = collection[va]\r\n                return Object.assign(vi, temp);\r\n            }, {});\r\n        }\r\n\r\n        layerProto.describeFeatureType = function (layerName, callback, error) {\r\n            const self = this;\r\n            if (!layerName) layerName = self.options.featureType;\r\n            const result = new Promise(function (resolve, reject) {\r\n                self.getCapabilitiesPromise()\r\n                    .then(function (capabilities) {\r\n                        if (!capabilities.Operations.DescribeFeatureType) {\r\n                            reject(\"No esta disponible el método describeFeatureType\")\r\n                            return;\r\n                        }\r\n                        if (window.hasOwnProperty('Worker')) {\r\n                            var promsObj = {};\r\n                            const wwGetUrl = async function () {\r\n                                var wwLocation = TC.apiLocation + 'TC/workers/tc-dft-web-worker.js';\r\n                                if (TC.Util.isSameOrigin(TC.apiLocation)) {\r\n                                    return (wwLocation);\r\n                                }\r\n                                else {\r\n                                    try {\r\n                                        const response = await TC.ajax({\r\n                                            url: wwLocation,\r\n                                            method: 'GET',\r\n                                            responseType: 'text'\r\n                                        });\r\n                                        const data = response.data;\r\n                                        var blob = new Blob([data], { type: \"text/javascript\" });\r\n                                        var url = window.URL.createObjectURL(blob);\r\n                                        return url;\r\n                                    }\r\n                                    catch (err) {\r\n                                        throw err\r\n                                    }\r\n                                }\r\n                            }\r\n                            const wwInit = async function () {\r\n                                try {\r\n                                    if (!self.WebWorkerDFT) {\r\n                                        self.WebWorkerDFT = new Worker(await wwGetUrl());\r\n                                    }\r\n                                    self.WebWorkerDFT.onmessage = async function (e) {\r\n                                        if (!(e.data instanceof Object)) {\r\n                                            var data = await self.toolProxification.fetchXML(e.data);\r\n                                            self.WebWorkerDFT.postMessage({\r\n                                                url: e.data,\r\n                                                response: data.documentElement.outerHTML\r\n                                            });\r\n                                            return;\r\n                                        }\r\n                                        if (e.data.state === 'success') {\r\n                                            let key = Object.keys(e.data.DFTCollection).join(\",\");\r\n                                            if (promsObj.hasOwnProperty(key)) {\r\n                                                promsObj[key].call(null, e.data.DFTCollection);\r\n                                            }\r\n                                            else {\r\n                                                throw \"No se encuentra la clave \" + key + \" en la colección\";\r\n                                            }\r\n                                            TC.describeFeatureType = Object.assign(TC.describeFeatureType, e.data.DFTCollection);\r\n                                        }\r\n                                        else {\r\n                                            throw \"Ha habido problemas procesando el Describe feature type\";\r\n                                            //reject(\"loquesea\");\r\n                                        }\r\n                                    };\r\n\r\n                                }\r\n                                catch (err) {\r\n                                    throw err;\r\n                                }\r\n\r\n                            }\r\n                            const wwProcess = async function (layers, callback) {\r\n                                var data = await self.toolProxification.fetchXML(self.getDescribeFeatureTypeUrl(layers || self.featureType));\r\n                                //checkear si excepciones del servidor\r\n                                if (data.querySelector(\"Exception\") || data.querySelector(\"exception\")) {\r\n                                    throw (data.querySelector(\"Exception\") || data.querySelector(\"exception\")).textContent.trim()\r\n                                }\r\n                                self.WebWorkerDFT.postMessage({\r\n                                    layerName: layers,\r\n                                    xml: data.documentElement.outerHTML,\r\n                                    url: (TC.apiLocation.indexOf(\"http\") >= 0 ? TC.apiLocation : document.location.protocol + TC.apiLocation)\r\n                                });\r\n                                promsObj[layers instanceof Array ? layers.join(\",\") : layers] = callback;\r\n                            }\r\n                            try {\r\n                                wwInit();\r\n                            }\r\n                            catch (err) {\r\n                                reject(err);\r\n                            }\r\n                            //si no es una array convierto en Array\r\n                            if (!(layerName instanceof Array)) layerName = layerName.split(\",\");\r\n                            //si tiene distinto Namespace separo las pediciones describeFeatureType\t\t\t\t\t\t\t\t\t\t\r\n                            var arrPromises = (Object.entries(layerName.reduce(function (vi, va) {\r\n                                let preffix = va.substring(0, va.indexOf(\":\"));\r\n                                if (!vi[preffix]) {\r\n                                    let temp = {};\r\n                                    temp[preffix] = [va]\r\n                                    return Object.assign(vi, temp);\r\n                                } else {\r\n                                    vi[preffix].push(va)\r\n                                    return vi;\r\n                                }\r\n                            }, {})).map(function (params) {\r\n                                var layers = params[1];\r\n                                return new Promise(async function (resolve, reject) {\r\n                                    if (TC.describeFeatureType[layers]) {\r\n                                        resolve(_getStoredFeatureTypes(layers, TC.describeFeatureType));\r\n                                        return;\r\n                                    }\r\n                                    try {\r\n                                        await wwProcess(layers, function (data) {\r\n                                            resolve(data);\r\n                                        });\r\n                                    }\r\n                                    catch (err) {\r\n                                        reject(err);\r\n                                    }\r\n                                })\r\n                            }));\r\n                            Promise.all(arrPromises).then(function (response) {\r\n                                let objReturned = response.reduce(function (vi, va) {\r\n                                    return Object.assign(vi, va)\r\n                                }, {});\r\n\r\n                                //si solo hay un objeto devuelvo directamente los atributos\tde este\t\t\t\t\r\n                                resolve(Object.keys(objReturned).length === 1 ? objReturned[Object.keys(objReturned)[0]] : objReturned);\r\n                            }).catch(reject);\r\n                        }\r\n                        else {\r\n                            reject(\"No esta disponible el WebWorker\")\r\n                        }\r\n                    })\r\n                    .catch(err => reject(err));\r\n            });\r\n            result.then(\r\n                function (data) {\r\n                    if (TC.Util.isFunction(callback)) {\r\n                        callback(data);\r\n                    }\r\n                },\r\n                function (errorText) {\r\n                    if (TC.Util.isFunction(error)) {\r\n                        error(errorText);\r\n                    }\r\n                }\r\n            );\r\n            return result;\r\n        };\r\n\r\n        layerProto.CAPABILITIES_STORE_KEY_PREFIX = 'TC.capabilities.';\r\n\r\n        layerProto.import = function (options) {\r\n            this.wrap.import(options);\r\n        };\r\n\r\n        layerProto.setNodeVisibility = function (id, visible) {\r\n            var self = this;\r\n\r\n            self.state = TC.Layer.state.LOADING;\r\n            self.map.trigger(TC.Consts.event.BEFOREUPDATE);\r\n            self.map.trigger(TC.Consts.event.BEFORELAYERUPDATE, { layer: self });\r\n\r\n            if (!self.tree) {\r\n                self.tree = self.getTree();\r\n            }\r\n\r\n            var node = self.findNode(id, self.tree);\r\n            if (node === self.tree) {\r\n                self.setVisibility(visible);\r\n            }\r\n            else {\r\n                var cache = self._cache.visibilityStates;\r\n                cache[id] = visible ? TC.Consts.visibility.VISIBLE : TC.Consts.visibility.NOT_VISIBLE;\r\n\r\n                var found = false;\r\n                var i;\r\n                var f;\r\n                for (i = 0; i < self.features.length; i++) {\r\n                    f = self.features[i];\r\n                    if (f.id == id) {\r\n                        found = true;\r\n                        f.setVisibility(visible);\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    for (i = 0; i < self.features.length; i++) {\r\n                        f = self.features[i];\r\n                        if (f._path === undefined) {\r\n                            f._path = '/' + f.getPath().join('/');\r\n                        }\r\n                        if (f._path === id) {\r\n                            f.setVisibility(visible);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            self.state = TC.Layer.state.IDLE;\r\n            self.map.trigger(TC.Consts.event.LAYERUPDATE, { layer: self });\r\n            self.map.trigger(TC.Consts.event.UPDATE);\r\n        };\r\n\r\n        layerProto.getNodeVisibility = function (id) {\r\n            var self = this;\r\n            var result = TC.Layer.prototype.getNodeVisibility.call(self, id);\r\n            if (!self.tree) {\r\n                self.tree = self.getTree();\r\n            }\r\n\r\n            var node = self.findNode(id, self.tree);\r\n            if (node === self.tree) {\r\n                result = self.getVisibility() ? TC.Consts.visibility.VISIBLE : TC.Consts.visibility.NOT_VISIBLE;\r\n            }\r\n            else {\r\n                var cache = self._cache.visibilityStates;\r\n                var r = cache[id];\r\n                if (r !== undefined) {\r\n                    result = r;\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n\r\n        layerProto.setModifiable = function (modifiable) {\r\n            this.wrap.setModifiable(modifiable);\r\n        };\r\n\r\n        layerProto.applyEdits = function (inserts, updates, deletes) {\r\n            return this.wrap.sendTransaction(inserts, updates, deletes);\r\n        };\r\n\r\n        layerProto.refresh = function () {\r\n            return this.wrap.reloadSource();\r\n        };\r\n\r\n        layerProto.getFeaturesInCurrentExtent = function (tolerance) {\r\n            var self = this;\r\n\r\n            var extent = self.map.getExtent();\r\n            return this.getFeaturesInExtent(extent, tolerance);\r\n        };\r\n\r\n        layerProto.getFeaturesInExtent = function (extent, tolerance) {\r\n            return this.wrap.getFeaturesInExtent(extent, tolerance);\r\n        };\r\n\r\n        layerProto.setProjection = function (options) {\r\n            const self = this;\r\n            self.wrap.setProjection(options);\r\n            if (options.crs && options.oldCrs) {\r\n                self.map.trigger(TC.Consts.event.BEFORELAYERUPDATE, { layer: self });\r\n                self.features.forEach(function (feat) {\r\n                    feat.wrap.setGeometry(TC.Util.reproject(feat.geometry, options.oldCrs, options.crs));\r\n                    feat.geometry = feat.wrap.getGeometry();\r\n                });\r\n                self.map.trigger(TC.Consts.event.LAYERUPDATE, { layer: self });\r\n            }\r\n        };\r\n\r\n        layerProto.setStyles = function (options) {\r\n            const self = this;\r\n            self.styles = TC.Util.extend({}, options);\r\n            self.wrap.setStyles(options);\r\n        };\r\n\r\n        layerProto.exportState = function (options) {\r\n            const self = this;\r\n            options = options || {};\r\n            const lObj = {\r\n                id: self.id\r\n            };\r\n            if (self.map && self.map.crs !== self.map.options.crs) {\r\n                lObj.crs = self.map.crs;\r\n            }\r\n\r\n            // Aplicamos una precisión un dígito mayor que la del mapa, si no, al compartir algunas parcelas se deforman demasiado\r\n            var precision = Math.pow(10, (self.map.wrap.isGeo() ? TC.Consts.DEGREE_PRECISION : TC.Consts.METER_PRECISION) + 1);\r\n\r\n            const features = options.features || self.features;\r\n            lObj.features = features\r\n                .map(function (f) {\r\n                    const fObj = {};\r\n                    var layerStyle;\r\n                    switch (true) {\r\n                        case TC.feature.Marker && f instanceof TC.feature.Marker:\r\n                            fObj.type = TC.Consts.geom.POINT;\r\n                            layerStyle = self.options.styles && self.options.styles.marker;\r\n                            break;\r\n                        case TC.feature.Point && f instanceof TC.feature.Point:\r\n                            fObj.type = TC.Consts.geom.POINT;\r\n                            layerStyle = self.options.styles && self.options.styles.point;\r\n                            break;\r\n                        //case TC.feature.MultiPoint && f instanceof TC.feature.MultiPoint:\r\n                        //    fObj.type = TC.Consts.geom.MULTIPOINT;\r\n                        //    break;\r\n                        case TC.feature.Polyline && f instanceof TC.feature.Polyline:\r\n                            fObj.type = TC.Consts.geom.POLYLINE;\r\n                            layerStyle = self.options.styles && self.options.styles.line;\r\n                            break;\r\n                        case TC.feature.MultiPolyline && f instanceof TC.feature.MultiPolyline:\r\n                            fObj.type = TC.Consts.geom.MULTIPOLYLINE;\r\n                            layerStyle = self.options.styles && self.options.styles.line;\r\n                            break;\r\n                        case TC.feature.Polygon && f instanceof TC.feature.Polygon:\r\n                            fObj.type = TC.Consts.geom.POLYGON;\r\n                            layerStyle = self.options.styles && self.options.styles.polygon;\r\n                            break;\r\n                        case TC.feature.MultiPolygon && f instanceof TC.feature.MultiPolygon:\r\n                            fObj.type = TC.Consts.geom.MULTIPOLYGON;\r\n                            layerStyle = self.options.styles && self.options.styles.polygon;\r\n                            break;\r\n                        case TC.feature.Circle && f instanceof TC.feature.Circle:\r\n                            fObj.type = TC.Consts.geom.CIRCLE;\r\n                            layerStyle = self.options.styles && self.options.styles.polygon;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    fObj.id = f.id;\r\n                    fObj.geom = TC.Util.compactGeometry(f.geometry, precision);\r\n                    fObj.data = f.getData();\r\n                    fObj.showsPopup = f.showsPopup;\r\n                    if (options.exportStyles === undefined || options.exportStyles) {\r\n                        layerStyle = TC.Util.extend({}, layerStyle);\r\n                        for (var key in layerStyle) {\r\n                            var val = layerStyle[key];\r\n                            if (TC.Util.isFunction(val)) {\r\n                                layerStyle[key] = val(f);\r\n                            }\r\n                        }\r\n                        fObj.style = TC.Util.extend(layerStyle, f.getStyle());\r\n                    }\r\n                    return fObj;\r\n                });\r\n            return lObj;\r\n        };\r\n\r\n        layerProto.importState = function (obj) {\r\n            const self = this;\r\n            return new Promise(function (resolve, reject) {\r\n                const promises = new Array(obj.features.length);\r\n                obj.features.forEach(function (f, idx) {\r\n                    const featureOptions = TC.Util.extend(f.style, { data: f.data, id: f.id, showsPopup: f.showsPopup });\r\n                    var addFn;\r\n                    switch (f.type) {\r\n                        case TC.Consts.geom.POLYGON:\r\n                            addFn = self.addPolygon;\r\n                            break;\r\n                        case TC.Consts.geom.MULTIPOLYGON:\r\n                            addFn = self.addMultiPolygon;\r\n                            break;\r\n                        case TC.Consts.geom.POLYLINE:\r\n                            addFn = self.addPolyline;\r\n                            break;\r\n                        case TC.Consts.geom.MULTIPOLYLINE:\r\n                            addFn = self.addMultiPolyline;\r\n                            break;\r\n                        case TC.Consts.geom.CIRCLE:\r\n                            addFn = self.addCircle;\r\n                            break;\r\n                        case TC.Consts.geom.POINT:\r\n                            if (f.style && (f.style.url || f.style.className)) {\r\n                                addFn = self.addMarker;\r\n                            }\r\n                            else {\r\n                                addFn = self.addPoint;\r\n                            }\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    if (addFn) {\r\n                        var geom = TC.Util.explodeGeometry(f.geom);\r\n                        if (obj.crs && self.map.crs !== obj.crs) {\r\n                            promises[idx] = new Promise(function (res, rej) {\r\n                                self.map.one(TC.Consts.event.PROJECTIONCHANGE, function (e) {\r\n                                    addFn.call(self, geom, featureOptions).then(\r\n                                        function () {\r\n                                            res();\r\n                                        },\r\n                                        function () {\r\n                                            rej(Error('addFn failed'));\r\n                                        }\r\n                                    );\r\n                                });\r\n                            });\r\n                        }\r\n                        else {\r\n                            promises[idx] = addFn.call(self, geom, featureOptions);\r\n                        }\r\n                    }\r\n                });\r\n                Promise.all(promises).then(\r\n                    function () {\r\n                        resolve();\r\n                    },\r\n                    function (err) {\r\n                        reject(err instanceof Error ? err : Error(err));\r\n                    });\r\n            });\r\n        };\r\n\r\n        layerProto.getGetCapabilitiesUrl = function () {\r\n            const self = this;\r\n            if (self.type === TC.Consts.layerType.WFS) {\r\n                const getUrl = function () { return self.options.url || self.url };\r\n                const _src = !TC.Util.isSecureURL(getUrl()) && TC.Util.isSecureURL(TC.Util.toAbsolutePath(getUrl())) ? self.getBySSL_(getUrl()) : getUrl();\r\n\r\n                var params = {\r\n                }\r\n                params.SERVICE = 'WFS';\r\n                params.VERSION = '2.0.0';\r\n                params.REQUEST = 'GetCapabilities';\r\n\r\n                return _src + '?' + TC.Util.getParamString(params);\r\n            }\r\n            else\r\n                return null;\r\n        };\r\n\r\n        layerProto.getCapabilitiesPromise = function () {\r\n            const self = this;\r\n            if (self.type === TC.Consts.layerType.WFS) {\r\n                return new Promise((resolve, reject) => {\r\n                    const processedCapabilities = function (capabilities) {\r\n                        // Si existe el capabilities no machacamos, porque provoca efectos indeseados en la gestión de capas.\r\n                        // En concreto, se regeneran los UIDs de capas, como consecuencia los controles de la API interpretan como distintas capas que son la misma.\r\n                        self.capabilities = self.capabilities || capabilities;\r\n                        TC.capabilitiesWFS[self.options.url || self.url] = TC.capabilitiesWFS[self.options.url || self.url] || capabilities;\r\n                        TC.capabilitiesWFS[actualUrl] = TC.capabilitiesWFS[actualUrl] || capabilities;\r\n                        resolve(capabilities);\r\n                    };\r\n\r\n                    var actualUrl = (self.options.url || self.url).replace(/https ?:/gi, '');\r\n\r\n                    if (self.capabilities) {\r\n                        resolve(self.capabilities);\r\n                        self._capabilitiesPromise = Promise.resolve(self.capabilities);\r\n                    }\r\n                    if (TC.capabilitiesWFS[actualUrl]) {\r\n                        resolve(TC.capabilitiesWFS[actualUrl]);\r\n                        self._capabilitiesPromise = Promise.resolve(TC.capabilitiesWFS[actualUrl]);\r\n\r\n                    }\r\n\r\n                    self.toolProxification = new TC.tool.Proxification(TC.proxify);\r\n\r\n                    const cachePromise = capabilitiesPromises[actualUrl];\r\n                    capabilitiesPromises[actualUrl] = self._capabilitiesPromise = cachePromise || new Promise(function (res, rej) {\r\n                        const onlinePromise = self.getCapabilitiesOnline();\r\n                        const storagePromise = self.getCapabilitiesFromStorage();\r\n\r\n                        onlinePromise\r\n                            .then(function (capabilities) {\r\n                                res(capabilities);\r\n                            })\r\n                            .catch(function (error) {\r\n                                storagePromise.catch(function () {\r\n                                    rej(error);\r\n                                });\r\n                            });\r\n                        storagePromise\r\n                            .then(function (capabilities) {\r\n                                res(capabilities);\r\n                            })\r\n                            .catch(function () {\r\n                                onlinePromise.catch(function (error) {\r\n                                    rej(error);\r\n                                });\r\n                            });\r\n                    });\r\n\r\n                    capabilitiesPromises[actualUrl].then(function (capabilities) {\r\n                        processedCapabilities(capabilities);\r\n                    })\r\n                        .catch(function (error) {\r\n                            if (self.map) {\r\n                                self.map.trigger(TC.Consts.event.LAYERERROR, { layer: self, reason: 'couldNotGetCapabilities' });\r\n                            }\r\n                            reject(error)\r\n                        });\r\n                });\r\n            }\r\n            else {\r\n                return Promise.reject(new Error(`Layer \"${self.id}\" does not have capabilities document`));\r\n            }\r\n        };\r\n\r\n    })();\r\n})();"]}