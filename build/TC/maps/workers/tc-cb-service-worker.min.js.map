{"version":3,"sources":["workers/tc-cb-service-worker.js"],"names":["self","addEventListener","event","cacheName","waitUntil","caches","has","then","hasCache","open","cache","keys","console","log","length","fetch","delete","e","skipWaiting","clients","claim","respondWith","match","request","response","catch","reason","url","currentMapStates","postMessage","msg","matchAll","includeUncontrolled","clientList","forEach","client","action","data","name","silent","urlList","list","finally","addToCache","idx","count","add","total","notification","close","promise","Promise","resolve","type","windowClients","find","wc","focus"],"mappings":"CAAA,WAGIA,KAAKC,iBAAiB,UAAW,SAAUC,GACvC,MAAMC,EAAY,wBAClBD,EAAME,UACFC,OAAOC,IAAIH,GAAWI,KAAK,SAAUC,GAC7BA,GACAH,OAAOI,KAAKN,GAAWI,KAAK,SAAUG,GAClCA,EAAMC,OAAOJ,KAAK,SAAUI,GACxBC,QAAQC,IAAI,sBACZ,OAAIF,EAAKG,OACEC,MAAMJ,EAAK,IAAIJ,KAAK,WAEvBF,OAAOW,OAAOb,GAAWI,KAAK,WAC1BK,QAAQC,IAAI,kBAAoBV,EAAY,gBAEjD,SAAUc,GACTL,QAAQC,IAAII,KAGbjB,KAAKkB,uBAapClB,KAAKC,iBAAiB,WAAY,SAAUC,GAExCA,EAAME,UAAUJ,KAAKmB,QAAQC,WAGjCpB,KAAKC,iBAAiB,QAAS,SAAUC,GAErCA,EAAMmB,YACFhB,OAAOiB,MAAMpB,EAAMqB,SACdhB,KAAK,SAAUiB,GACZ,OAAIA,GAIGT,MAAMb,EAAMqB,SAASE,MAAM,SAAUC,GACxCd,QAAQC,IAAI,2BAA6BX,EAAMqB,QAAQI,IAAM,KAAOD,UAOxF,MAAME,EAAmB,GAEnBC,EAAc,SAAUC,GAC1B9B,KAAKmB,QAAQY,SAAS,CAAEC,qBAAqB,IACxCzB,KAAK,SAAU0B,GACZA,EAAWC,QAAQ,SAAUC,GACzBA,EAAON,YAAYC,QAKnC9B,KAAKC,iBAAiB,UAAW,SAAUC,GAGvC,MAAMkC,EAASlC,EAAMmC,KAAKD,OACpBE,EAAOpC,EAAMmC,KAAKC,KAClBC,EAASrC,EAAMmC,KAAKE,OACpBC,EAAUtC,EAAMmC,KAAKI,KAC3B,OAAQL,GACJ,IAAK,SACDR,EAAiBU,GAAQF,EACzB/B,OAAOW,OAAOsB,GAAMI,QAAQ,WACxBrC,OAAOI,KAAK6B,GACP/B,KAAK,SAAUG,GACZ,MAAMiC,EAAa,SAAUC,GACzB,IAAKhB,EAAiBU,GAClB,OAEJ,GAAIM,IAAQJ,EAAQ1B,OAAQ,CACnByB,GACDV,EAAY,CACRO,OAAQA,EACRE,KAAMA,EACNpC,MAAO,WAGf,OAEJ,MAAM2C,EAAQD,EAAM,EACdjB,EAAMa,EAAQI,GACpBlC,EAAMoC,IAAInB,GACLpB,KACG,WACSgC,GACDV,EAAY,CACRO,OAAQA,EACRE,KAAMA,EACNpC,MAAO,WACP2C,MAAOA,EACPE,MAAOP,EAAQ1B,UAI3B,WACIe,EAAY,CACRO,OAAQA,EACRE,KAAMA,EACNpC,MAAO,QACPyB,IAAKA,MAIhBe,QAAQ,WACLC,EAAWE,MAGvBF,EAAW,OAGvB,MACJ,IAAK,gBACMf,EAAiBU,GACxBjC,OAAOW,OAAOsB,GAAM/B,KAChB,WACSgC,GACDV,EAAY,CACRO,OAAQA,EACRE,KAAMA,EACNpC,MAAO,aAInB,WACI2B,EAAY,CACRO,OAAQA,EACRE,KAAMA,EACNpC,MAAO,eAS/BF,KAAKC,iBAAiB,oBAAqB,SAAUC,GACjD,IAAI8C,EAAe9C,EAAM8C,aAEzB,GAAe,SADF9C,EAAMkC,OACI,CACnBY,EAAaC,QACb,IAAIC,EAAUC,QAAQC,UACtBF,EACIA,EAAQ3C,KAAK,WAAc,OAKZoB,EALqCqB,EAAaX,KAAKV,IAMvE3B,KAAKmB,QAAQY,SAAS,CAAEC,qBAAqB,EAAMqB,KAAM,WAAY9C,KAAK,SAAU+C,GACvF,OAAOA,EAAcxC,OAASwC,EAAcC,KAAK,SAAUC,GACvD,OAAOA,EAAG7B,MAAQA,IACjB,OAJb,IAA2BA,IAJVpB,KAAK,SAAU4B,GAAU,OAAOA,EAASA,EAAOsB,QAAU,OACnEvD,EAAME,UAAU8C,MAhK5B","sourcesContent":["(function () {\r\n\r\n    // Arreglo del bug de actualización de la cache\r\n    self.addEventListener('install', function (event) {\r\n        const cacheName = 'TC.offline.map.common';\r\n        event.waitUntil(\r\n            caches.has(cacheName).then(function (hasCache) {\r\n                if (hasCache) {\r\n                    caches.open(cacheName).then(function (cache) {\r\n                        cache.keys().then(function (keys) {\r\n                            console.log(\"Revisando cache...\");\r\n                            if (keys.length) {\r\n                                return fetch(keys[0]).then(function () {\r\n                                    // Estamos online, borramos cache\r\n                                    caches.delete(cacheName).then(function () {\r\n                                        console.log(\"Cache con bug (\" + cacheName + \") borrada\");\r\n                                    });\r\n                                }, function (e) {\r\n                                    console.log(e);\r\n                                });\r\n                            }\r\n                            return self.skipWaiting();\r\n                        });\r\n                    });\r\n                }\r\n            })\r\n        );\r\n    });\r\n\r\n    //self.addEventListener('install', function (event) {\r\n    // No hacemos nada en la instalaci\\u00f3n del service worker\r\n    //    event.waitUntil(self.skipWaiting());\r\n    //});\r\n\r\n    self.addEventListener('activate', function (event) {\r\n        // Reclamamos el control inmediatamente, para evitar tener que recargar la página\r\n        event.waitUntil(self.clients.claim());\r\n    });\r\n\r\n    self.addEventListener('fetch', function (event) {\r\n        // Si está la petición en la cache se responde de ella, si no, se pide a la red\r\n        event.respondWith(\r\n            caches.match(event.request)\r\n                .then(function (response) {\r\n                    if (response) {\r\n                        return response;\r\n                    }\r\n\r\n                    return fetch(event.request).catch(function (reason) {\r\n                        console.log('[fetch] Could not fetch ' + event.request.url + ': ' + reason);\r\n                    });\r\n                })\r\n        );\r\n    });\r\n\r\n    // Diccionario de estados de cacheo de mapas. Necesario para poder cancelar cacheos.\r\n    const currentMapStates = {};\r\n\r\n    const postMessage = function (msg) {\r\n        self.clients.matchAll({ includeUncontrolled: true })\r\n            .then(function (clientList) {\r\n                clientList.forEach(function (client) {\r\n                    client.postMessage(msg);\r\n                });\r\n            });\r\n    };\r\n\r\n    self.addEventListener('message', function (event) {\r\n        // Procesamos las solicitudes de cacheo y borrado\r\n\r\n        const action = event.data.action;\r\n        const name = event.data.name;\r\n        const silent = event.data.silent;\r\n        const urlList = event.data.list;\r\n        switch (action) {\r\n            case 'create':\r\n                currentMapStates[name] = action;\r\n                caches.delete(name).finally(function () {\r\n                    caches.open(name)\r\n                        .then(function (cache) {\r\n                            const addToCache = function (idx) {\r\n                                if (!currentMapStates[name]) { // Se ha cancelado la creación de la cache\r\n                                    return;\r\n                                }\r\n                                if (idx === urlList.length) {\r\n                                    if (!silent) {\r\n                                        postMessage({\r\n                                            action: action,\r\n                                            name: name,\r\n                                            event: 'cached'\r\n                                        });\r\n                                    }\r\n                                    return;\r\n                                }\r\n                                const count = idx + 1;\r\n                                const url = urlList[idx];\r\n                                cache.add(url)\r\n                                    .then(\r\n                                        function () {\r\n                                            if (!silent) {\r\n                                                postMessage({\r\n                                                    action: action,\r\n                                                    name: name,\r\n                                                    event: 'progress',\r\n                                                    count: count,\r\n                                                    total: urlList.length\r\n                                                });\r\n                                            }\r\n                                        },\r\n                                        function () {\r\n                                            postMessage({\r\n                                                action: action,\r\n                                                name: name,\r\n                                                event: 'error',\r\n                                                url: url\r\n                                            });\r\n                                        }\r\n                                    )\r\n                                    .finally(function () {\r\n                                        addToCache(count);\r\n                                    });\r\n                            };\r\n                            addToCache(0);\r\n                        });\r\n                });\r\n                break;\r\n            case 'delete':\r\n                delete currentMapStates[name];\r\n                caches.delete(name).then(\r\n                    function () {\r\n                        if (!silent) {\r\n                            postMessage({\r\n                                action: action,\r\n                                name: name,\r\n                                event: 'deleted'\r\n                            });\r\n                        }\r\n                    },\r\n                    function () {\r\n                        postMessage({\r\n                            action: action,\r\n                            name: name,\r\n                            event: 'error'\r\n                        });\r\n                    }\r\n                );\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n    self.addEventListener('notificationclick', function (event) {\r\n        var notification = event.notification;\r\n        var action = event.action;\r\n        if (action === \"back\") {\r\n            notification.close();\r\n            var promise = Promise.resolve();\r\n            promise =\r\n                promise.then(function () { return firstWindowClient(notification.data.url); })\r\n                    .then(function (client) { return client ? client.focus() : null; });\r\n            event.waitUntil(promise);\r\n        }\r\n    });\r\n    function firstWindowClient(url) {\r\n        return self.clients.matchAll({ includeUncontrolled: true, type: 'window' }).then(function (windowClients) {\r\n            return windowClients.length ? windowClients.find(function (wc) {\r\n                return wc.url === url;\r\n            }) : null;\r\n        });\r\n    }\r\n\r\n})();"]}