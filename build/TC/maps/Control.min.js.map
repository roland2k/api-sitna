{"version":3,"sources":["Control.js"],"names":["TC","control","parent","this","value","dust","Object","defineProperty","get","_dustLoaded","syncLoadJS","apiLocation","set","newValue","Control","self","EventTarget","call","map","isActive","isDisabled","len","arguments","length","options","Util","extend","id","getUID","CLASS","substr","prototype","div","getDiv","_jQueryIsLoaded","_$div","$","classList","add","template","exportsState","inherit","ctlProto","show","style","display","hide","render","callback","_set1stRenderPromise","renderData","addUIEventListeners","promise","_firstRender","data","Promise","resolve","reject","trigger","Consts","event","BEFORECONTROLRENDER","dataObject","toggle","classes","DISABLED","compiler","getRenderedHtml","then","html","innerHTML","CONTROLRENDER","isFunction","processTemplates","templates","mustCompile","hbsTemplates","dustTemplates","hbsTemplateKeys","key","endsWith","push","_isHbs","forEach","i18n","_done","locale","setLanguages","templatePromises","templateName","res","rej","ajax","url","method","responseType","response","loadSource","compile","cache","_hbs","catch","err","console","log","all","t","registerPartial","loadJSInOrder","templatingFull","templatingRuntime","templateId","endFn","out","error","Error","register","active","activate","activeControl","previousActiveControl","deactivate","CONTROLACTIVATE","stopChain","nextControl","getDefaultControl","CONTROLDEACTIVATE","enable","remove","disable","renderPromise","one","addUIEventListener","selector","listener","querySelectorAll","elm","addEventListener","isExclusive","getLocaleString","texts","Cfg","exportState","importState","state","getDownloadDialog","_downloadDialog","getControlsByClass","caller","addControl","ctl","getElevationTool","displayElevation","elevation","loadJS","tool","Elevation","mapElevation"],"mappings":"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","sourcesContent":["\r\n/**\r\n  * Opciones b√°sicas de control.\r\n  * @typedef ControlOptions\r\n  * @see MapControlOptions\r\n  * @see 2-configuration\r\n  * @property {HTMLElement|string} [div] - Elemento del DOM en el que crear el control o valor de atributo id de dicho elemento.\r\n  */\r\n\r\nTC.control = TC.control || {};\r\n\r\n// Carga de dust solamente si alguna plantilla lo usa\r\n(function () {\r\n    const parent = this;\r\n    let value;\r\n    if (!parent.dust) {\r\n        Object.defineProperty(parent, 'dust', {\r\n            get: function () {\r\n                if (!TC._dustLoaded) {\r\n                    TC._dustLoaded = true;\r\n                    TC.syncLoadJS(TC.apiLocation + 'lib/dust/dust-full.min.js');\r\n                    TC.syncLoadJS(TC.apiLocation + 'lib/dust/dust-helpers.min.js');\r\n                    TC.syncLoadJS(TC.apiLocation + 'lib/dust/dust-i18n.min.js');\r\n                    TC.syncLoadJS(TC.apiLocation + 'lib/dust/dust.overrides.js');\r\n                    value = parent.dust;\r\n                }\r\n                return value;\r\n            },\r\n            set: function (newValue) { value = newValue; },\r\n        });\r\n    }\r\n})();\r\n/////////////////////////////////////////////////////\r\n\r\nTC.Control = function () {\r\n    const self = this;\r\n    TC.EventTarget.call(self);\r\n\r\n    self.map = null;\r\n    self.isActive = false;\r\n    self.isDisabled = false;\r\n\r\n    var len = arguments.length;\r\n\r\n    self.options = TC.Util.extend({}, len > 1 ? arguments[1] : arguments[0]);\r\n    self.id = self.options.id || TC.getUID(self.CLASS.substr(TC.Control.prototype.CLASS.length + 1) + '-');\r\n    self.div = TC.Util.getDiv(self.options.div ? self.options.div : arguments[0]);\r\n    if (TC._jQueryIsLoaded) {\r\n        self._$div = $(self.div);\r\n    }\r\n\r\n    self.div.classList.add(TC.Control.prototype.CLASS, self.CLASS);\r\n\r\n    self.template = self.options.template || self.template;\r\n    self.exportsState = false;    \r\n};\r\n\r\nTC.inherit(TC.Control, TC.EventTarget);\r\n\r\n(function () {\r\n    const ctlProto = TC.Control.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl';\r\n\r\n    ctlProto.template = void (0);\r\n\r\n    ctlProto.show = function () {\r\n        this.div.style.display = '';\r\n    };\r\n\r\n    ctlProto.hide = function () {\r\n        this.div.style.display = 'none';\r\n    };\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        return self._set1stRenderPromise(self.renderData(null, function () {\r\n            self.addUIEventListeners();\r\n            if (typeof callback === 'function') {\r\n                callback();\r\n            }\r\n        }));\r\n    };\r\n\r\n    ctlProto._set1stRenderPromise = function (promise) {\r\n        const self = this;\r\n        if (!self._firstRender) {\r\n            self._firstRender = promise;\r\n        }\r\n        return promise;\r\n    };\r\n\r\n    ctlProto.renderData = function (data, callback) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (self.map) {\r\n                self.trigger(TC.Consts.event.BEFORECONTROLRENDER, { dataObject: data });\r\n            }\r\n            self.div.classList.toggle(TC.Consts.classes.DISABLED, self.isDisabled);\r\n\r\n            let template;\r\n            if (typeof self.template === 'object' && !self.template.compiler) {\r\n                template = self.template[self.CLASS];\r\n            }\r\n            else {\r\n                template = self.template;\r\n                self.template = {};\r\n                self.template[self.CLASS] = template;\r\n            };\r\n\r\n            self.getRenderedHtml(self.CLASS, data)\r\n                .then(function (html) {\r\n                    self.div.innerHTML = html;\r\n                    if (self.map) {\r\n                        self.trigger(TC.Consts.event.CONTROLRENDER);\r\n                    }\r\n                    if (TC.Util.isFunction(callback)) {\r\n                        callback();\r\n                    }\r\n                    resolve();\r\n                });\r\n        });\r\n    };\r\n\r\n    const processTemplates = function (templates, options) {\r\n        options = options || {};\r\n        return new Promise(function (resolve, reject) {\r\n            let mustCompile = false;\r\n            // Verificamos si hay plantillas mezcladas de los dos motores\r\n            let hbsTemplates = false;\r\n            let dustTemplates = false;\r\n            const hbsTemplateKeys = [];\r\n            for (var key in templates) {\r\n                const template = templates[key];\r\n                if (typeof template === 'string') {\r\n                    mustCompile = true;\r\n                    if (template.endsWith('.hbs')) {\r\n                        hbsTemplates = true;\r\n                        hbsTemplateKeys.push(key);\r\n                    }\r\n                    else {\r\n                        dustTemplates = true;\r\n                    }\r\n                }\r\n                else if (typeof template === 'object' || (template && template._isHbs)) {\r\n                    hbsTemplates = true;\r\n                    hbsTemplateKeys.push(key);\r\n                }\r\n                else if (typeof template === 'function') {\r\n                    dustTemplates = true;\r\n                }\r\n            }\r\n\r\n            if (hbsTemplates && dustTemplates) {\r\n                // Plantillas mezcladas, luego estamos en un visor legacy, entonces cambiamos las Handlebars por dust.\r\n                hbsTemplateKeys.forEach(function (key) {\r\n                    templates[key] = TC.apiLocation + \"TC/templates/\" + key + \".html\";\r\n                });\r\n                // No quedan plantillas Handlebars por compilar\r\n                mustCompile = false;\r\n            }\r\n\r\n            if (dustTemplates) {\r\n                // Si es la primera vez que pasamos por aqu√≠, dust.i18n no est√° inicializado, inicializamos\r\n                if (!dust.i18n._done) {\r\n                    const locale = options.locale;\r\n                    dust.i18n.setLanguages([locale]);\r\n                    dust.i18n.add(locale, TC.i18n[locale]);\r\n                    dust.i18n._done = true;\r\n                }\r\n            }\r\n\r\n            const callback = function () {\r\n                const templatePromises = [];\r\n                for (var key in templates) {\r\n                    const templateName = key;\r\n                    let template = templates[templateName];\r\n                    if (typeof template === 'string') {\r\n                        templatePromises.push(new Promise(function (res, rej) {\r\n                            TC.ajax({\r\n                                url: template,\r\n                                method: 'GET',\r\n                                responseType: 'text'\r\n                            })\r\n                                .then(function (response) {\r\n                                    if (template.endsWith('.html')) {\r\n                                        // Plantilla dust\r\n                                        dust.loadSource(dust.compile(response.data, templateName));\r\n                                        templates[templateName] = template = dust.cache[templateName];\r\n                                        res(template);\r\n                                        /////////////////\r\n                                    }\r\n                                    else {\r\n                                        // Plantilla Handlebars\r\n                                        templates[templateName] = template = TC._hbs.compile(response.data); // TODO: add optimization options\r\n                                        template._isHbs = true;\r\n                                        res(template);\r\n                                    }\r\n                                })\r\n                                .catch(function (err) {\r\n                                    console.log(\"Error fetching template: \" + err);\r\n                                    rej(err);\r\n                                });\r\n                        }));\r\n                    }\r\n                    else {\r\n                        if (typeof template === 'object') {\r\n                            templates[key] = template = TC._hbs.template(template);\r\n                            template._isHbs = true;\r\n                        }\r\n                        else {\r\n                            if (TC.Util.isFunction(template) && !template._isHbs) {\r\n                                // Plantilla dust\r\n                                if (!dust.cache[templateName]) {\r\n                                    template();\r\n                                    templates[templateName] = template = dust.cache[templateName];\r\n                                }\r\n                                /////////////////\r\n                            }\r\n                        }\r\n                        templatePromises.push(Promise.resolve(template));\r\n                    }\r\n                }\r\n\r\n                Promise.all(templatePromises).then(function () {\r\n                    for (var key in templates) {\r\n                        const t = templates[key];\r\n                        if (t && t._isHbs && key !== self.CLASS) {\r\n                            TC._hbs.registerPartial(key, templates[key]);\r\n                        }\r\n                    }\r\n                    resolve();\r\n                });\r\n            };\r\n\r\n            if (mustCompile) {\r\n                TC.loadJSInOrder(\r\n                    !TC._hbs || !TC._hbs.compile,\r\n                    TC.url.templatingFull,\r\n                    callback\r\n                );\r\n            }\r\n            else {\r\n                TC.loadJSInOrder(\r\n                    !TC._hbs,\r\n                    TC.url.templatingRuntime,\r\n                    callback\r\n                );\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto.getRenderedHtml = function (templateId, data, callback) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            const endFn = function (template) {\r\n                if (typeof template === 'undefined') {\r\n                    resolve('');\r\n                    return;\r\n                }\r\n                if (template._isHbs) {\r\n                    // Es una plantilla Handlebars\r\n                    const html = template(data);\r\n                    if (TC.Util.isFunction(callback)) {\r\n                        callback(html);\r\n                    }\r\n                    resolve(html);\r\n                }\r\n                else {\r\n                    // Es una plantilla dust\r\n                    if (dust.cache[templateId]) {\r\n                        self.template[templateId] = template = dust.cache[templateId];\r\n                        dust.render(templateId, data || {}, function (err, out) {\r\n                            if (err) {\r\n                                TC.error(err);\r\n                                reject(Error(err));\r\n                            }\r\n                            else {\r\n                                if (TC.Util.isFunction(callback)) {\r\n                                    callback(out);\r\n                                }\r\n                                resolve(out);\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        processTemplates(self.template, { locale: self.map && self.map.options.locale }).then(function () {\r\n                            endFn(self.template[templateId]);\r\n                        })\r\n                    }\r\n                    ////////////////////////\r\n                }\r\n            };\r\n\r\n            const template = self.template[templateId];\r\n            if (typeof template !== 'function') {\r\n                processTemplates(self.template, { locale: self.map && self.map.options.locale }).then(function () {\r\n                    endFn(self.template[templateId]);\r\n                })\r\n            }\r\n            else {\r\n                endFn(template);\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            self.map = map;\r\n            Promise.resolve(self.render()).then(function () {\r\n                if (self.options.active) {\r\n                    self.activate();\r\n                }\r\n                resolve(self);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.activate = function () {\r\n        var self = this;\r\n        if (self.map && self.map.activeControl && self.map.activeControl != self) {\r\n            self.map.previousActiveControl = self.map.activeControl;\r\n            self.map.activeControl.deactivate();\r\n        }\r\n        self.isActive = true;\r\n        if (self.map) {\r\n            self.map.activeControl = self;\r\n            self.map.trigger(TC.Consts.event.CONTROLACTIVATE, { control: self });\r\n            self.trigger(TC.Consts.event.CONTROLACTIVATE, { control: self });\r\n        }\r\n    };\r\n\r\n    ctlProto.deactivate = function (stopChain) {\r\n        if (arguments.length == 0) stopChain = false;\r\n\r\n        var self = this;\r\n        self.isActive = false;\r\n        if (self.map) {\r\n            self.map.activeControl = null;\r\n\r\n            if (!stopChain) {\r\n                //determinar cu√°l es el control predeterminado para reactivarlo\r\n                //salvo que sea yo mismo, claro\r\n                var nextControl = self.map.getDefaultControl();\r\n                if (nextControl == self) nextControl = null;\r\n                else if (self.map.previousActiveControl == self) // GLS: Validamos antes de activar que el control activo anterior sea distinto al control actual\r\n                    nextControl = null;\r\n                else if (!nextControl) {\r\n                    nextControl = self.map.previousActiveControl;\r\n                }\r\n\r\n                if (nextControl)\r\n                    nextControl.activate();\r\n            }\r\n            self.map.trigger(TC.Consts.event.CONTROLDEACTIVATE, { control: self });\r\n            self.trigger(TC.Consts.event.CONTROLDEACTIVATE, { control: self });\r\n        }\r\n    };\r\n\r\n    ctlProto.enable = function () {\r\n        var self = this;\r\n        self.isDisabled = false;\r\n        if (self.div) {\r\n            self.div.classList.remove(TC.Consts.classes.DISABLED);\r\n        }\r\n    };\r\n\r\n    ctlProto.disable = function () {\r\n        var self = this;\r\n        self.isDisabled = true;\r\n        if (self.div) {\r\n            self.div.classList.add(TC.Consts.classes.DISABLED);\r\n        }\r\n    };\r\n\r\n    ctlProto.renderPromise = function () {\r\n        const self = this;\r\n        return self._firstRender || new Promise(function (resolve, reject) {\r\n            self.one(TC.Consts.event.CONTROLRENDER, function () {\r\n                resolve(self);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.addUIEventListener = function (selector, event, listener) {\r\n        const self = this;\r\n        const elements = selector ? self.div.querySelectorAll(selector) : [self.div];\r\n        elements.forEach(function (elm) {\r\n            elm.addEventListener(event, listener);\r\n        });\r\n    };\r\n\r\n    ctlProto.addUIEventListeners = function () {\r\n    };\r\n\r\n    ctlProto.isExclusive = function () {\r\n        return false;\r\n    };\r\n\r\n    ctlProto.getLocaleString = function (key, texts) {\r\n        var self = this;\r\n        var locale = self.map ? self.map.options.locale : TC.Cfg.locale;\r\n        return TC.Util.getLocaleString(locale, key, texts);\r\n    };\r\n\r\n    ctlProto.getUID = function () {\r\n        const self = this;\r\n        return TC.getUID(self.id + '-');\r\n    };\r\n\r\n    ctlProto.exportState = function () {\r\n        const self = this;\r\n        if (self.exportsState) {\r\n            return {};\r\n        }\r\n        return null;\r\n    };\r\n\r\n    ctlProto.importState = function (state) {\r\n    };\r\n    \r\n    ctlProto.getDownloadDialog = function () {\r\n        const self = this;\r\n        self._downloadDialog = self._downloadDialog || self.map.getControlsByClass('TC.control.FeatureDownloadDialog')[0];\r\n        if (self._downloadDialog) {\r\n            self._downloadDialog.caller = self;\r\n            return Promise.resolve(self._downloadDialog);\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            self.map.addControl('FeatureDownloadDialog').then(ctl => {\r\n                self._downloadDialog = ctl;\r\n                self._downloadDialog.caller = self;\r\n                resolve(ctl);\r\n            })\r\n        });\r\n    };\r\n\r\n    ctlProto.getElevationTool = function () {\r\n        const self = this;\r\n        if (!self.displayElevation && !self.options.displayElevation) {\r\n            return Promise.resolve(null);\r\n        }\r\n        if (self.elevation) {\r\n            return Promise.resolve(self.elevation);\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            TC.loadJS(\r\n                !TC.tool || !TC.tool.Elevation,\r\n                TC.apiLocation + 'TC/tool/Elevation',\r\n                function () {\r\n                    if (typeof self.options.displayElevation === 'boolean') {\r\n                        if (self.map) {\r\n                            self.map.getElevationTool().then(function (mapElevation) {\r\n                                if (mapElevation) {\r\n                                    self.elevation = mapElevation;\r\n                                }\r\n                                else {\r\n                                    self.elevation = new TC.tool.Elevation();\r\n                                }\r\n                                resolve(self.elevation);\r\n                            });\r\n                        }\r\n                        else {\r\n                            self.elevation = new TC.tool.Elevation();\r\n                            resolve(self.elevation);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (self.map) {\r\n                            self.map.getElevationTool().then(function (mapElevation) {\r\n                                if (mapElevation) {\r\n                                    self.elevation = new TC.tool.Elevation(TC.Util.extend(true, {}, mapElevation.options, self.options.displayElevation));\r\n                                }\r\n                                else {\r\n                                    self.elevation = new TC.tool.Elevation(self.options.displayElevation);\r\n                                }\r\n                                resolve(self.elevation);\r\n                            });\r\n                        }\r\n                        else {\r\n                            self.elevation = new TC.tool.Elevation(self.options.displayElevation);\r\n                            resolve(self.elevation);\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n        });\r\n    };   \r\n\r\n})();\r\n"]}