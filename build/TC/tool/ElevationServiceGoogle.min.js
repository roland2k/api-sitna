TC.tool=TC.tool||{};TC.tool.ElevationService||TC.syncLoadJS(TC.apiLocation+"TC/tool/ElevationService");TC.tool.ElevationServiceGoogle=function(e){const t=this;TC.tool.ElevationService.apply(t,arguments);t.url=t.options.url||"//maps.googleapis.com/maps/api/js?v=3";const o=t.url.lastIndexOf("?");o<0?t.url+="?":o<t.url.length-1&&(t.url+="&");t.url+="key="+t.options.googleMapsKey;t.minimumElevation=t.options.minimumElevation||-9998;t.nativeCRS="EPSG:4326";t.maxCoordinateCountPerRequest=512;t.minRetryInterval=5100;t.maxRetries=Number.isInteger(t.options.maxRetries)?t.options.maxRetries:0};TC.inherit(TC.tool.ElevationServiceGoogle,TC.tool.ElevationService);!function(){const e=TC.tool.ElevationServiceGoogle.prototype;let t;const o=new Map,n=function(e){let t=o.get(e);if(t){(t-=1)<=0&&o.delete(e);return!0}return!1};e.request=function(e){const s=this;e=e||{};if(!s.options.googleMapsKey)return Promise.reject(Error("Missing Google Maps key"));const r=e.id,l={status:"CANCELLED"};let a,c=e.coordinates;a=1===c.length?TC.Consts.geom.POINT:TC.Consts.geom.POLYLINE;if(s.options.allowedGeometryTypes&&!s.options.allowedGeometryTypes.includes(a))return Promise.reject(Error(a+" geometry type not allowed by configuration"));if(c.length>s.maxCoordinateCountPerRequest)return new Promise(function(t,a){const u=[];for(i=0,ii=c.length;i<ii;i+=s.maxCoordinateCountPerRequest)u.push(c.slice(i,i+s.maxCoordinateCountPerRequest));!function(e,t){let n=o.get(e)||0;n+=t;o.set(e,n)}(r,u.length);let p=0;const C=u.map(function t(n){const i=TC.Util.extend({},e,{coordinates:n,id:r});return new Promise(function(e,a){o.has(r)?s.request(i).then(function(i){if("OVER_QUERY_LIMIT"===i.status){console.log("OVER_QUERY_LIMIT status reached for request "+r);if(o.has(r))if(!s.maxRetries||p<s.maxRetries){p+=1;setTimeout(function(){t(n).then(t=>e(t)).catch(e=>a(e))},s.minRetryInterval)}else e(i);else e(l)}else e(i)}).catch(e=>a(e)):e(l)})});Promise.all(C).then(function(e){const o=Array.prototype.concat.apply([],e.filter(e=>"OK"===e.status).map(e=>e.elevations));n(r);t({status:"OK",elevations:o})})});e.crs&&e.crs!==s.nativeCRS&&(c=TC.Util.reproject(c,e.crs,s.nativeCRS));return new Promise(function(e,o){const i=window.google&&window.google.maps;if(!i){TC.Cfg.proxyExceptions=TC.Cfg.proxyExceptions||[];TC.Cfg.proxyExceptions.push(s.url)}TC.loadJS(!i,s.url,function(){t=t||new google.maps.ElevationService;const o=c.map(e=>({lat:e[1],lng:e[0]}));t.getElevationForLocations({locations:o},function(t,o){n(r);e({elevations:t,status:o})})},!1,!0)})};e.parseResponse=function(e,t){const o=this;switch(e.status){case"OK":return e.elevations.map(function(e){return t.crs&&t.crs!==o.nativeCRS?TC.Util.reproject([e.location.lng(),e.location.lat()],o.nativeCRS,t.crs).concat(e.elevation):[e.location.lng(),e.location.lat(),e.elevation]});default:return[]}};e.cancelRequest=function(e){o.delete(e)}}();
//# sourceMappingURL=../maps/tool/ElevationServiceGoogle.min.js.map