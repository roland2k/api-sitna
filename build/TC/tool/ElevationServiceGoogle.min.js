TC.tool=TC.tool||{};TC.tool.ElevationService||TC.syncLoadJS(TC.apiLocation+"TC/tool/ElevationService");TC.tool.ElevationServiceGoogle=function(e){const t=this;TC.tool.ElevationService.apply(t,arguments);t.url=t.options.url||"//maps.googleapis.com/maps/api/js?v=3";const o=t.url.lastIndexOf("?");o<0?t.url+="?":o<t.url.length-1&&(t.url+="&");t.url+="key="+t.options.googleMapsKey;t.minimumElevation=t.options.minimumElevation||-9998;t.nativeCRS="EPSG:4326";t.maxCoordinateCountPerRequest=512;t.minRetryInterval=5100;t.maxRetries=Number.isInteger(t.options.maxRetries)?t.options.maxRetries:0};TC.inherit(TC.tool.ElevationServiceGoogle,TC.tool.ElevationService);!function(){const e=TC.tool.ElevationServiceGoogle.prototype;let t;const o=new Set;e.request=function(e){const n=this;let s=(e=e||{}).id;s&&o.add(s);const l={status:"CANCELLED"};let a,r=e.coordinates;a=1===r.length?TC.Consts.geom.POINT:TC.Consts.geom.POLYLINE;if(n.options.allowedGeometryTypes&&!n.options.allowedGeometryTypes.includes(a))return Promise.reject(Error(a+" geometry type not allowed by configuration"));if(r.length>n.maxCoordinateCountPerRequest)return new Promise(function(t,a){const c=[];for(i=0,ii=r.length;i<ii;i+=n.maxCoordinateCountPerRequest)c.push(r.slice(i,i+n.maxCoordinateCountPerRequest));let u=0;const p=c.map(function t(i){const a=TC.Util.extend({},e,{coordinates:i,id:0});return new Promise(function(e,r){o.has(s)?n.request(a).then(function(a){if("OVER_QUERY_LIMIT"===a.status)if(o.has(s))if(!n.maxRetries||u<n.maxRetries){u+=1;setTimeout(function(){t(i).then(t=>e(t)).catch(e=>r(e))},n.minRetryInterval)}else e(a);else e(l);else e(a)}).catch(e=>r(e)):e(l)})});Promise.all(p).then(function(e){const n=Array.prototype.concat.apply([],e.filter(e=>"OK"===e.status).map(e=>e.elevations));o.delete(s);t({status:"OK",elevations:n})})});e.crs&&e.crs!==n.nativeCRS&&(r=TC.Util.reproject(r,e.crs,n.nativeCRS));return new Promise(function(e,i){const l=window.google&&window.google.maps;if(!l){TC.Cfg.proxyExceptions=TC.Cfg.proxyExceptions||[];TC.Cfg.proxyExceptions.push(n.url)}TC.loadJS(!l,n.url,function(){t=t||new google.maps.ElevationService;const n=r.map(e=>({lat:e[1],lng:e[0]}));t.getElevationForLocations({locations:n},function(t,n){s&&o.delete(s);e({elevations:t,status:n})})},!1,!0)})};e.parseResponse=function(e,t){const o=this;switch(e.status){case"OK":return e.elevations.map(function(e){return t.crs&&t.crs!==o.nativeCRS?TC.Util.reproject([e.location.lng(),e.location.lat()],o.nativeCRS,t.crs).concat(e.elevation):[e.location.lng(),e.location.lat(),e.elevation]});default:return[]}};e.cancelRequest=function(e){o.delete(e)}}();
//# sourceMappingURL=../maps/tool/ElevationServiceGoogle.min.js.map