TC.tool=TC.tool||{};TC.tool.ElevationService||TC.syncLoadJS(TC.apiLocation+"TC/tool/ElevationService");TC.tool.ElevationServiceIDENA=function(o){TC.tool.ElevationService.apply(this,arguments);this.url=this.options.url||"//idena.navarra.es/ogc/wps";this.process=this.options.process||"gs:ExtractRasterPoints";this.minimumElevation=this.options.minimumElevation||-9998};TC.inherit(TC.tool.ElevationServiceIDENA,TC.tool.ElevationService);TC.tool.ElevationServiceIDENA.prototype.request=function(o){const e={coordinates:(o=o||{}).coordinates};var t;switch(!0){case TC.Geometry.isPoint(o.coordinates):e.type=TC.Consts.geom.POINT;t=[[o.coordinates]];break;case TC.Geometry.isRing(o.coordinates):e.type=TC.Consts.geom.POLYLINE;t=[o.coordinates];break;case TC.Geometry.isRingCollection(o.coordinates):e.type=TC.Consts.geom.POLYGON;t=o.coordinates}const s={coverageClass:o.coverageClass,geometry:{mimeType:TC.Consts.mimeType.JSON,value:TC.wrap.Geometry.toGeoJSON(e)}};if(o.crs){var i=o.crs.lastIndexOf(":");i<0&&(i=o.crs.lastIndexOf("#"));s.srid=o.crs.substr(i+1)}if(o.sampleNumber){const i=function(o,e){const t=e[0]-o[0],s=e[1]-o[1];return Math.sqrt(t*t+s*s)};var n=0;t.forEach(function(o){n+=o.map(function(o,e,t){const s=t[e-1];return s?i(s,o):0}).reduce(function(o,e){return o+e},0);e.type===TC.Consts.geom.POLYGON&&(n+=i(o[o.length-1],o[0]))});s.splitDistance=n/(o.sampleNumber-1)}else o.resolution&&(s.splitDistance=o.resolution);return TC.tool.ElevationService.prototype.request.call(this,{dataInputs:s},o)};