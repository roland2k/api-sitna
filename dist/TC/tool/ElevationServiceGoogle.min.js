TC.tool=TC.tool||{};TC.tool.ElevationService||TC.syncLoadJS(TC.apiLocation+"TC/tool/ElevationService");TC.tool.ElevationServiceGoogle=function(e){const t=this;TC.tool.ElevationService.apply(t,arguments);t.url=t.options.url||"//maps.googleapis.com/maps/api/js?v=3";const o=t.url.lastIndexOf("?");o<0?t.url+="?":o<t.url.length-1&&(t.url+="&");t.url+="key="+t.options.googleMapsKey;t.minimumElevation=t.options.minimumElevation||-9998;t.nativeCRS="EPSG:4326";t.maxCoordinateCountPerRequest=512;t.minRetryInterval=5100;t.maxRetries=Number.isInteger(t.options.maxRetries)?t.options.maxRetries:0};TC.inherit(TC.tool.ElevationServiceGoogle,TC.tool.ElevationService);!function(){const e=TC.tool.ElevationServiceGoogle.prototype;let t;const o=new Map,n=function(e){let t=o.get(e);if(t){(t-=1)<=0&&o.delete(e);return!0}return!1};e.request=function(e){const i=this;e=e||{};if(!i.options.googleMapsKey)return Promise.reject(Error("Missing Google Maps key"));const s=e.id,r={status:"CANCELLED"};let l,a=e.coordinates;l=1===a.length?TC.Consts.geom.POINT:TC.Consts.geom.POLYLINE;if(i.options.allowedGeometryTypes&&!i.options.allowedGeometryTypes.includes(l))return Promise.reject(Error(l+" geometry type not allowed by configuration"));if(a.length>i.maxCoordinateCountPerRequest)return new Promise(function(t,l){const c=[];for(var u=0,p=a.length;u<p;u+=i.maxCoordinateCountPerRequest)c.push(a.slice(u,u+i.maxCoordinateCountPerRequest));!function(e,t){let n=o.get(e)||0;n+=t;o.set(e,n)}(s,c.length);let C=0;const m=c.map(function t(n){const l=TC.Util.extend({},e,{coordinates:n,id:s});return new Promise(function(e,a){o.has(s)?i.request(l).then(function(l){if("OVER_QUERY_LIMIT"===l.status){console.log("OVER_QUERY_LIMIT status reached for request "+s);if(o.has(s))if(!i.maxRetries||C<i.maxRetries){C+=1;setTimeout(function(){t(n).then(t=>e(t)).catch(e=>a(e))},i.minRetryInterval)}else e(l);else e(r)}else e(l)}).catch(e=>a(e)):e(r)})});Promise.all(m).then(function(e){const o=Array.prototype.concat.apply([],e.filter(e=>"OK"===e.status).map(e=>e.elevations));n(s);t({status:"OK",elevations:o})})});e.crs&&e.crs!==i.nativeCRS&&(a=TC.Util.reproject(a,e.crs,i.nativeCRS));return new Promise(function(e,o){const r=window.google&&window.google.maps;if(!r){TC.Cfg.proxyExceptions=TC.Cfg.proxyExceptions||[];TC.Cfg.proxyExceptions.push(i.url)}TC.loadJS(!r,i.url,function(){t=t||new google.maps.ElevationService;const o=a.map(e=>({lat:e[1],lng:e[0]}));t.getElevationForLocations({locations:o},function(t,o){n(s);e({elevations:t,status:o})})},!1,!0)})};e.parseResponse=function(e,t){const o=this;switch(e.status){case"OK":return e.elevations.map(function(e){return t.crs&&t.crs!==o.nativeCRS?TC.Util.reproject([e.location.lng(),e.location.lat()],o.nativeCRS,t.crs).concat(e.elevation):[e.location.lng(),e.location.lat(),e.elevation]});default:return[]}};e.cancelRequest=function(e){o.delete(e)}}();