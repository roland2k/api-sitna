(function (n) { n([], function () { var f = -1, e = -2, i = -3, n = -4, r = -5, h = function (s, h) { var l, c, a; h = h || {}; l = h.verbose || !1; l && console.log("Normalize the JSON Object"); s = typeof s == "string" ? this.JSON.parse(s) : s; l && console.log("Creating a empty dictionary"); c = { strings: [], integers: [], floats: [] }; l && console.log("Creating the AST"); var y = function v(s) { var y, w, a, p, h; if (l && console.log("Calling recursiveAstBuilder with " + this.JSON.stringify(s)), y = typeof s, s === null) return { type: "null", index: i }; if (typeof s == "undefined") return { type: "undefined", index: r }; if (s instanceof Array) { a = ["@"]; for (w in s) s.hasOwnProperty(w) && a.push(v(s[w])); return a } if (y === "object") { a = ["$"]; for (p in s) s.hasOwnProperty(p) && (a.push(v(p)), a.push(v(s[p]))); return a } if (s === "") return { type: "empty", index: n }; if (y === "string") return h = u.call(c.strings, s), h == -1 && (c.strings.push(o(s)), h = c.strings.length - 1), { type: "strings", index: h }; if (y === "number" && s % 1 == 0) return h = u.call(c.integers, s), h == -1 && (c.integers.push(t(s)), h = c.integers.length - 1), { type: "integers", index: h }; if (y === "number") return h = u.call(c.floats, s), h == -1 && (c.floats.push(s), h = c.floats.length - 1), { type: "floats", index: h }; if (y === "boolean") return { type: "boolean", index: s ? f : e }; throw new Error("Unexpected argument of type " + typeof s); }(s), p = c.strings.length, w = c.integers.length, k = c.floats.length; return (l && console.log("Parsing the dictionary"), a = c.strings.join("|"), a += "^" + c.integers.join("|"), a += "^" + c.floats.join("|"), l && console.log("Parsing the structure"), a += "^" + function b(u) { var e, s, f, o; if (l && console.log("Calling a recursiveParser with " + this.JSON.stringify(u)), u instanceof Array) { e = u.shift(); for (s in u) u.hasOwnProperty(s) && (e += b(u[s]) + "|"); return (e[e.length - 1] === "|" ? e.slice(0, -1) : e) + "]" } if (f = u.type, o = u.index, f === "strings") return t(o); if (f === "integers") return t(p + o); if (f === "floats") return t(p + w + o); if (f === "boolean") return u.index; if (f === "null") return i; if (f === "undefined") return r; if (f === "empty") return n; throw new TypeError("The item is alien!"); }(y), l && console.log("Ending parser"), h.debug) ? { dictionary: c, ast: y, packed: a } : a }, c = function (t, u) { var p, v, o, w, h, a, k, c; if (u = u || {}, p = t.split("^"), u.verbose && console.log("Building dictionary"), v = [], o = p[0], o !== "") for (o = o.split("|"), u.verbose && console.log("Parse the strings dictionary"), h = 0, w = o.length; h < w; h++) v.push(l(o[h])); if (o = p[1], o !== "") for (o = o.split("|"), u.verbose && console.log("Parse the integers dictionary"), h = 0, w = o.length; h < w; h++) v.push(s(o[h])); if (o = p[2], o !== "") for (o = o.split("|"), u.verbose && console.log("Parse the floats dictionary"), h = 0, w = o.length; h < w; h++) v.push(parseFloat(o[h])); o = null; u.verbose && console.log("Tokenizing the structure"); var b = "", y = [], g = p[3].length; for (h = 0; h < g; h++) a = p[3].charAt(h), a === "|" || a === "$" || a === "@" || a === "]" ? (b && (y.push(s(b)), b = ""), a !== "|" && y.push(a)) : b += a; return k = y.length, c = 0, u.verbose && console.log("Starting recursive parser"), function d() { var h = y[c++], t, s, o; if (u.verbose && console.log("Reading collection type " + (h === "$" ? "object" : "Array")), h === "@") { for (t = []; c < k; c++) { if (o = y[c], u.verbose && console.log("Read " + o + " symbol"), o === "]") return t; if (o === "@" || o === "$") t.push(d()); else switch (o) { case f: t.push(!0); break; case e: t.push(!1); break; case i: t.push(null); break; case r: t.push(undefined); break; case n: t.push(""); break; default: t.push(v[o]) } } return u.verbose && console.log("Parsed " + this.JSON.stringify(t)), t } if (h === "$") { for (t = {}; c < k; c++) { if (s = y[c], s === "]") return t; if (s = s === n ? "" : v[s], o = y[++c], o === "@" || o === "$") t[s] = d(); else switch (o) { case f: t[s] = !0; break; case e: t[s] = !1; break; case i: t[s] = null; break; case r: t[s] = undefined; break; case n: t[s] = ""; break; default: t[s] = v[o] } } return u.verbose && console.log("Parsed " + this.JSON.stringify(t)), t } throw new TypeError("Bad token " + h + " isn't a type"); }() }, a = function (s, h) { var c = typeof h, l; if (c === "boolean") return h ? f : e; if (h === null) return i; if (typeof h == "undefined") return r; if (h === "") return n; if (c === "string" && (h = o(h), l = u.call(s.strings, h), l === -1 && (s.strings.push(h), l = s.strings.length - 1)), c !== "string" && c !== "number") throw new Error("The type is not a JSON type"); return c === "string" ? h = o(h) : h % 1 == 0 && (h = t(h)), h = c === "number" ? t(h) : o(h), l = u.call(s[c], h), l === -1 && (s[c].push(h), l = s[c].length - 1), c === "number" ? "+" + l : l }, o = function (n) { return typeof n != "string" ? n : n.replace(/[\+ \|\^\%]/g, function (n) { return { " ": "+", "+": "%2B", "|": "%7C", "^": "%5E", "%": "%25" }[n] }) }, l = function (n) { return typeof n != "string" ? n : n.replace(/\+|%2B|%7C|%5E|%25/g, function (n) { return { "+": " ", "%2B": "+", "%7C": "|", "%5E": "^", "%25": "%" }[n] }) }, t = function (n) { return Number.prototype.toString.call(n, 36).toUpperCase() }, s = function (n) { return parseInt(n, 36) }, u = Array.prototype.indexOf || function (n, t) { for (var i = t || 0, r = this.length; i < r; i++) if (this[i] === n) return i; return -1 }; return { JSON: JSON, pack: h, unpack: c } }) })(typeof define == "undefined" || !define.amd ? function (n, t) { var i = t(), r; if (typeof exports != "undefined") for (r in i) exports[r] = i[r]; else window.jsonpack = i } : define);